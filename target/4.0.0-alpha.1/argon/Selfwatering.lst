
c:/workspace/Selfwatering/target/4.0.0-alpha.1/argon/Selfwatering.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000044c0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b84e0  000b84e0  000084e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b8504  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000011c  2003e520  000b8508  0001e520  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001b4  2003e640  2003e640  0002e640  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000b8624  000b8624  00028624  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b864c  000b864c  0002864c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0011afa1  00000000  00000000  00028650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00012cb4  00000000  00000000  001435f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00039c30  00000000  00000000  001562a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b08  00000000  00000000  0018fed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a618  00000000  00000000  001929dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039a29  00000000  00000000  0019cff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003d8b7  00000000  00000000  001d6a1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013657d  00000000  00000000  002142d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007da8  00000000  00000000  0034a854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 ff95 	bl	b7f60 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 ff9d 	bl	b7f7c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e520 	.word	0x2003e520
   b404c:	000b8508 	.word	0x000b8508
   b4050:	2003e63c 	.word	0x2003e63c
   b4054:	2003e640 	.word	0x2003e640
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 fb11 	bl	b5688 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b84b4 	.word	0x000b84b4
   b4080:	000b84d8 	.word	0x000b84d8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b966 	b.w	b4354 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fa5d 	bl	b4548 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 bab1 	b.w	b55f8 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 bfed 	b.w	b5074 <malloc>

000b409a <_Znaj>:
   b409a:	f000 bfeb 	b.w	b5074 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 bff1 	b.w	b5084 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b40b2:	6943      	ldr	r3, [r0, #20]
   b40b4:	b113      	cbz	r3, b40bc <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b40b6:	6983      	ldr	r3, [r0, #24]
   b40b8:	300c      	adds	r0, #12
   b40ba:	4718      	bx	r3
            callback();
        }
    }
   b40bc:	4770      	bx	lr

000b40be <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b40be:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b40c0:	2100      	movs	r1, #0
   b40c2:	4604      	mov	r4, r0
   b40c4:	4608      	mov	r0, r1
   b40c6:	f000 fdd1 	bl	b4c6c <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b40ca:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b40cc:	4620      	mov	r0, r4
   b40ce:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b40d0:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b40d2:	f000 fde3 	bl	b4c9c <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b40d6:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b40d8:	b10c      	cbz	r4, b40de <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b40da:	2301      	movs	r3, #1
   b40dc:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b40de:	2100      	movs	r1, #0
   b40e0:	2001      	movs	r0, #1
   b40e2:	f000 fdc3 	bl	b4c6c <os_thread_scheduling>
            }
        }
        if (t) {
   b40e6:	b12c      	cbz	r4, b40f4 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b40e8:	6823      	ldr	r3, [r4, #0]
   b40ea:	4620      	mov	r0, r4
   b40ec:	689b      	ldr	r3, [r3, #8]
   b40ee:	4798      	blx	r3
            t->running = false;
   b40f0:	2300      	movs	r3, #0
   b40f2:	7123      	strb	r3, [r4, #4]
        }
    }
   b40f4:	b002      	add	sp, #8
   b40f6:	bd10      	pop	{r4, pc}

000b40f8 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b40f8:	2a01      	cmp	r2, #1
   b40fa:	d102      	bne.n	b4102 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b40fc:	6001      	str	r1, [r0, #0]
      }
   b40fe:	2000      	movs	r0, #0
   b4100:	4770      	bx	lr
	  switch (__op)
   b4102:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4104:	bf04      	itt	eq
   b4106:	680b      	ldreq	r3, [r1, #0]
   b4108:	6003      	streq	r3, [r0, #0]
	      break;
   b410a:	e7f8      	b.n	b40fe <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b410c <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b410c:	6803      	ldr	r3, [r0, #0]
   b410e:	4718      	bx	r3

000b4110 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b4110:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4112:	2000      	movs	r0, #0
   b4114:	f000 ff9e 	bl	b5054 <spark_sync_time_pending>
   b4118:	b128      	cbz	r0, b4126 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b411a:	f000 ff83 	bl	b5024 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b411e:	f080 0001 	eor.w	r0, r0, #1
   b4122:	b2c0      	uxtb	r0, r0
    }
   b4124:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4126:	2001      	movs	r0, #1
   b4128:	e7fc      	b.n	b4124 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b412c <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b412c:	b513      	push	{r0, r1, r4, lr}
   b412e:	4b05      	ldr	r3, [pc, #20]	; (b4144 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   b4130:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4132:	f88d 3000 	strb.w	r3, [sp]
   b4136:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b4138:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b413a:	f001 fc29 	bl	b5990 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   b413e:	4620      	mov	r0, r4
   b4140:	b002      	add	sp, #8
   b4142:	bd10      	pop	{r4, pc}
   b4144:	2003e640 	.word	0x2003e640

000b4148 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4148:	b510      	push	{r4, lr}
      if (_M_manager)
   b414a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b414c:	4604      	mov	r4, r0
      if (_M_manager)
   b414e:	b113      	cbz	r3, b4156 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4150:	2203      	movs	r2, #3
   b4152:	4601      	mov	r1, r0
   b4154:	4798      	blx	r3
    }
   b4156:	4620      	mov	r0, r4
   b4158:	bd10      	pop	{r4, pc}
	...

000b415c <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b415c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b415e:	4b13      	ldr	r3, [pc, #76]	; (b41ac <_ZN5TimerD1Ev+0x50>)
   b4160:	6003      	str	r3, [r0, #0]
   b4162:	4604      	mov	r4, r0
        if (handle) {
   b4164:	6880      	ldr	r0, [r0, #8]
   b4166:	b1c8      	cbz	r0, b419c <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4168:	2500      	movs	r5, #0
   b416a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b416e:	e9cd 3500 	strd	r3, r5, [sp]
   b4172:	2102      	movs	r1, #2
   b4174:	462b      	mov	r3, r5
   b4176:	462a      	mov	r2, r5
   b4178:	f000 fd98 	bl	b4cac <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b417c:	68a0      	ldr	r0, [r4, #8]
   b417e:	4629      	mov	r1, r5
   b4180:	f000 fdac 	bl	b4cdc <os_timer_set_id>
            while (running) {
   b4184:	7923      	ldrb	r3, [r4, #4]
   b4186:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b418a:	b113      	cbz	r3, b4192 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b418c:	f000 fd66 	bl	b4c5c <os_thread_yield>
            while (running) {
   b4190:	e7f8      	b.n	b4184 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b4192:	68a0      	ldr	r0, [r4, #8]
   b4194:	4629      	mov	r1, r5
   b4196:	f000 fd79 	bl	b4c8c <os_timer_destroy>
            handle = nullptr;
   b419a:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b419c:	f104 000c 	add.w	r0, r4, #12
   b41a0:	f7ff ffd2 	bl	b4148 <_ZNSt14_Function_baseD1Ev>
    }
   b41a4:	4620      	mov	r0, r4
   b41a6:	b003      	add	sp, #12
   b41a8:	bd30      	pop	{r4, r5, pc}
   b41aa:	bf00      	nop
   b41ac:	000b8264 	.word	0x000b8264

000b41b0 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b41b0:	b510      	push	{r4, lr}
   b41b2:	4604      	mov	r4, r0
    }
   b41b4:	f7ff ffd2 	bl	b415c <_ZN5TimerD1Ev>
   b41b8:	4620      	mov	r0, r4
   b41ba:	211c      	movs	r1, #28
   b41bc:	f7ff ff6f 	bl	b409e <_ZdlPvj>
   b41c0:	4620      	mov	r0, r4
   b41c2:	bd10      	pop	{r4, pc}
   b41c4:	0000      	movs	r0, r0
	...

000b41c8 <_Z11get_weatherP7Weather>:
   b41c8:	b510      	push	{r4, lr}
   b41ca:	4604      	mov	r4, r0
   b41cc:	481c      	ldr	r0, [pc, #112]	; (b4240 <_Z11get_weatherP7Weather+0x78>)
   b41ce:	f000 fc7d 	bl	b4acc <_ZN9MPL3115A28readTempEv>
   b41d2:	481b      	ldr	r0, [pc, #108]	; (b4240 <_Z11get_weatherP7Weather+0x78>)
   b41d4:	f000 fc20 	bl	b4a18 <_ZN9MPL3115A212readPressureEv>
   b41d8:	4819      	ldr	r0, [pc, #100]	; (b4240 <_Z11get_weatherP7Weather+0x78>)
   b41da:	f000 fc1d 	bl	b4a18 <_ZN9MPL3115A212readPressureEv>
   b41de:	4818      	ldr	r0, [pc, #96]	; (b4240 <_Z11get_weatherP7Weather+0x78>)
   b41e0:	ed84 0a01 	vstr	s0, [r4, #4]
   b41e4:	f000 fc72 	bl	b4acc <_ZN9MPL3115A28readTempEv>
   b41e8:	ed94 7a01 	vldr	s14, [r4, #4]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b41ec:	eddf 7a15 	vldr	s15, [pc, #84]	; b4244 <_Z11get_weatherP7Weather+0x7c>
   b41f0:	ed84 0a00 	vstr	s0, [r4]
   b41f4:	eec7 7a27 	vdiv.f32	s15, s14, s15
   b41f8:	ee17 0a90 	vmov	r0, s15
   b41fc:	f003 fafe 	bl	b77fc <__aeabi_f2d>
   b4200:	ed9f 1b0b 	vldr	d1, [pc, #44]	; b4230 <_Z11get_weatherP7Weather+0x68>
   b4204:	ec41 0b10 	vmov	d0, r0, r1
   b4208:	f002 f90e 	bl	b6428 <pow>
   b420c:	490e      	ldr	r1, [pc, #56]	; (b4248 <_Z11get_weatherP7Weather+0x80>)
   b420e:	ec53 2b10 	vmov	r2, r3, d0
   b4212:	2000      	movs	r0, #0
   b4214:	f003 f992 	bl	b753c <__aeabi_dsub>
   b4218:	a307      	add	r3, pc, #28	; (adr r3, b4238 <_Z11get_weatherP7Weather+0x70>)
   b421a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b421e:	f003 fb45 	bl	b78ac <__aeabi_dmul>
   b4222:	f003 fe13 	bl	b7e4c <__aeabi_d2f>
   b4226:	60a0      	str	r0, [r4, #8]
   b4228:	bd10      	pop	{r4, pc}
   b422a:	bf00      	nop
   b422c:	f3af 8000 	nop.w
   b4230:	ccd9456c 	.word	0xccd9456c
   b4234:	3fc85b95 	.word	0x3fc85b95
   b4238:	00000000 	.word	0x00000000
   b423c:	40e5a540 	.word	0x40e5a540
   b4240:	2003e64c 	.word	0x2003e64c
   b4244:	47c5e680 	.word	0x47c5e680
   b4248:	3ff00000 	.word	0x3ff00000
   b424c:	00000000 	.word	0x00000000

000b4250 <_Z14get_batt_levelv>:
   b4250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4254:	a721      	add	r7, pc, #132	; (adr r7, b42dc <_Z14get_batt_levelv+0x8c>)
   b4256:	e9d7 6700 	ldrd	r6, r7, [r7]
   b425a:	f20f 0988 	addw	r9, pc, #136	; 0x88
   b425e:	e9d9 8900 	ldrd	r8, r9, [r9]
   b4262:	ed2d 8b02 	vpush	{d8}
   b4266:	ed9f 8a1c 	vldr	s16, [pc, #112]	; b42d8 <_Z14get_batt_levelv+0x88>
   b426a:	f04f 0a0f 	mov.w	sl, #15
   b426e:	200f      	movs	r0, #15
   b4270:	f002 f83f 	bl	b62f2 <analogRead>
   b4274:	f003 fab0 	bl	b77d8 <__aeabi_i2d>
   b4278:	4632      	mov	r2, r6
   b427a:	463b      	mov	r3, r7
   b427c:	f003 fb16 	bl	b78ac <__aeabi_dmul>
   b4280:	4642      	mov	r2, r8
   b4282:	464b      	mov	r3, r9
   b4284:	f003 fc3c 	bl	b7b00 <__aeabi_ddiv>
   b4288:	a311      	add	r3, pc, #68	; (adr r3, b42d0 <_Z14get_batt_levelv+0x80>)
   b428a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b428e:	f003 fb0d 	bl	b78ac <__aeabi_dmul>
   b4292:	4632      	mov	r2, r6
   b4294:	463b      	mov	r3, r7
   b4296:	f003 fc33 	bl	b7b00 <__aeabi_ddiv>
   b429a:	4604      	mov	r4, r0
   b429c:	ee18 0a10 	vmov	r0, s16
   b42a0:	460d      	mov	r5, r1
   b42a2:	f003 faab 	bl	b77fc <__aeabi_f2d>
   b42a6:	4602      	mov	r2, r0
   b42a8:	460b      	mov	r3, r1
   b42aa:	4620      	mov	r0, r4
   b42ac:	4629      	mov	r1, r5
   b42ae:	f003 f947 	bl	b7540 <__adddf3>
   b42b2:	f003 fdcb 	bl	b7e4c <__aeabi_d2f>
   b42b6:	f1ba 0a01 	subs.w	sl, sl, #1
   b42ba:	ee08 0a10 	vmov	s16, r0
   b42be:	d1d6      	bne.n	b426e <_Z14get_batt_levelv+0x1e>
   b42c0:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
   b42c4:	ee88 0a00 	vdiv.f32	s0, s16, s0
   b42c8:	ecbd 8b02 	vpop	{d8}
   b42cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b42d0:	cccccccd 	.word	0xcccccccd
   b42d4:	4010cccc 	.word	0x4010cccc
   b42d8:	00000000 	.word	0x00000000
   b42dc:	66666666 	.word	0x66666666
   b42e0:	400a6666 	.word	0x400a6666
   b42e4:	00000000 	.word	0x00000000
   b42e8:	40af7c00 	.word	0x40af7c00

000b42ec <_Z18get_moisture_levelP10Gardenzone>:
   b42ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b42ee:	4604      	mov	r4, r0
   b42f0:	250f      	movs	r5, #15
   b42f2:	2600      	movs	r6, #0
   b42f4:	8820      	ldrh	r0, [r4, #0]
   b42f6:	f001 fffc 	bl	b62f2 <analogRead>
   b42fa:	3d01      	subs	r5, #1
   b42fc:	4406      	add	r6, r0
   b42fe:	d1f9      	bne.n	b42f4 <_Z18get_moisture_levelP10Gardenzone+0x8>
   b4300:	2364      	movs	r3, #100	; 0x64
   b4302:	9300      	str	r3, [sp, #0]
   b4304:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   b4308:	462b      	mov	r3, r5
   b430a:	200f      	movs	r0, #15
   b430c:	fb96 f0f0 	sdiv	r0, r6, r0
   b4310:	f001 f93a 	bl	b5588 <_Z3mapiiiii>
   b4314:	60e0      	str	r0, [r4, #12]
   b4316:	b002      	add	sp, #8
   b4318:	bd70      	pop	{r4, r5, r6, pc}
	...

000b431c <_Z16check_auto_waterv>:
   b431c:	b538      	push	{r3, r4, r5, lr}
   b431e:	4b0c      	ldr	r3, [pc, #48]	; (b4350 <_Z16check_auto_waterv+0x34>)
   b4320:	2400      	movs	r4, #0
   b4322:	461d      	mov	r5, r3
   b4324:	f853 2b04 	ldr.w	r2, [r3], #4
   b4328:	7c11      	ldrb	r1, [r2, #16]
   b432a:	2901      	cmp	r1, #1
   b432c:	d10b      	bne.n	b4346 <_Z16check_auto_waterv+0x2a>
   b432e:	8a90      	ldrh	r0, [r2, #20]
   b4330:	f001 ffb3 	bl	b629a <digitalWrite>
   b4334:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   b4338:	f7ff ffd8 	bl	b42ec <_Z18get_moisture_levelP10Gardenzone>
   b433c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   b4340:	2202      	movs	r2, #2
   b4342:	741a      	strb	r2, [r3, #16]
   b4344:	bd38      	pop	{r3, r4, r5, pc}
   b4346:	3401      	adds	r4, #1
   b4348:	2c04      	cmp	r4, #4
   b434a:	d1eb      	bne.n	b4324 <_Z16check_auto_waterv+0x8>
   b434c:	e7fa      	b.n	b4344 <_Z16check_auto_waterv+0x28>
   b434e:	bf00      	nop
   b4350:	2003e520 	.word	0x2003e520

000b4354 <setup>:
   b4354:	b538      	push	{r3, r4, r5, lr}
   b4356:	f002 f83b 	bl	b63d0 <_Z19__fetch_global_Wirev>
   b435a:	f001 fe25 	bl	b5fa8 <_ZN7TwoWire5beginEv>
   b435e:	f001 fd59 	bl	b5e14 <_Z16_fetch_usbserialv>
   b4362:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4366:	f001 fd49 	bl	b5dfc <_ZN9USBSerial5beginEl>
   b436a:	f002 f831 	bl	b63d0 <_Z19__fetch_global_Wirev>
   b436e:	2260      	movs	r2, #96	; 0x60
   b4370:	4601      	mov	r1, r0
   b4372:	482b      	ldr	r0, [pc, #172]	; (b4420 <setup+0xcc>)
   b4374:	4d2b      	ldr	r5, [pc, #172]	; (b4424 <setup+0xd0>)
   b4376:	f000 fadc 	bl	b4932 <_ZN9MPL3115A25beginER7TwoWireh>
   b437a:	4829      	ldr	r0, [pc, #164]	; (b4420 <setup+0xcc>)
   b437c:	f000 fb0f 	bl	b499e <_ZN9MPL3115A216setModeBarometerEv>
   b4380:	2107      	movs	r1, #7
   b4382:	4827      	ldr	r0, [pc, #156]	; (b4420 <setup+0xcc>)
   b4384:	f000 fb18 	bl	b49b8 <_ZN9MPL3115A217setOversampleRateEh>
   b4388:	4825      	ldr	r0, [pc, #148]	; (b4420 <setup+0xcc>)
   b438a:	f000 fb29 	bl	b49e0 <_ZN9MPL3115A216enableEventFlagsEv>
   b438e:	2101      	movs	r1, #1
   b4390:	2005      	movs	r0, #5
   b4392:	f001 ff71 	bl	b6278 <pinMode>
   b4396:	2101      	movs	r1, #1
   b4398:	2004      	movs	r0, #4
   b439a:	f001 ff6d 	bl	b6278 <pinMode>
   b439e:	2101      	movs	r1, #1
   b43a0:	2003      	movs	r0, #3
   b43a2:	f001 ff69 	bl	b6278 <pinMode>
   b43a6:	2101      	movs	r1, #1
   b43a8:	2002      	movs	r0, #2
   b43aa:	f001 ff65 	bl	b6278 <pinMode>
   b43ae:	2101      	movs	r1, #1
   b43b0:	200d      	movs	r0, #13
   b43b2:	f001 ff61 	bl	b6278 <pinMode>
   b43b6:	2100      	movs	r1, #0
   b43b8:	2006      	movs	r0, #6
   b43ba:	f001 ff5d 	bl	b6278 <pinMode>
   b43be:	2100      	movs	r1, #0
   b43c0:	2007      	movs	r0, #7
   b43c2:	f001 ff59 	bl	b6278 <pinMode>
   b43c6:	2100      	movs	r1, #0
   b43c8:	2008      	movs	r0, #8
   b43ca:	f001 ff55 	bl	b6278 <pinMode>
   b43ce:	2101      	movs	r1, #1
   b43d0:	200c      	movs	r0, #12
   b43d2:	f001 ff51 	bl	b6278 <pinMode>
   b43d6:	2101      	movs	r1, #1
   b43d8:	2005      	movs	r0, #5
   b43da:	f001 ff5e 	bl	b629a <digitalWrite>
   b43de:	2101      	movs	r1, #1
   b43e0:	2004      	movs	r0, #4
   b43e2:	f001 ff5a 	bl	b629a <digitalWrite>
   b43e6:	2101      	movs	r1, #1
   b43e8:	2003      	movs	r0, #3
   b43ea:	f001 ff56 	bl	b629a <digitalWrite>
   b43ee:	2101      	movs	r1, #1
   b43f0:	2002      	movs	r0, #2
   b43f2:	f001 ff52 	bl	b629a <digitalWrite>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b43f6:	4a0c      	ldr	r2, [pc, #48]	; (b4428 <setup+0xd4>)
   b43f8:	490c      	ldr	r1, [pc, #48]	; (b442c <setup+0xd8>)
   b43fa:	480d      	ldr	r0, [pc, #52]	; (b4430 <setup+0xdc>)
   b43fc:	f001 f9d1 	bl	b57a2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b4400:	f001 f866 	bl	b54d0 <_ZN9TimeClass8beginDSTEv>
   b4404:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   b4408:	f001 f842 	bl	b5490 <_ZN9TimeClass4zoneEf>
   b440c:	2400      	movs	r4, #0
   b440e:	f855 0b04 	ldr.w	r0, [r5], #4
   b4412:	3401      	adds	r4, #1
   b4414:	f7ff ff6a 	bl	b42ec <_Z18get_moisture_levelP10Gardenzone>
   b4418:	2c04      	cmp	r4, #4
   b441a:	d1f8      	bne.n	b440e <setup+0xba>
   b441c:	bd38      	pop	{r3, r4, r5, pc}
   b441e:	bf00      	nop
   b4420:	2003e64c 	.word	0x2003e64c
   b4424:	2003e520 	.word	0x2003e520
   b4428:	000b8128 	.word	0x000b8128
   b442c:	000b4619 	.word	0x000b4619
   b4430:	000b5777 	.word	0x000b5777

000b4434 <_Z15get_water_levelv>:
   b4434:	b510      	push	{r4, lr}
   b4436:	2008      	movs	r0, #8
   b4438:	f001 ff48 	bl	b62cc <digitalRead>
   b443c:	4604      	mov	r4, r0
   b443e:	2007      	movs	r0, #7
   b4440:	f001 ff44 	bl	b62cc <digitalRead>
   b4444:	0043      	lsls	r3, r0, #1
   b4446:	2006      	movs	r0, #6
   b4448:	ea43 0484 	orr.w	r4, r3, r4, lsl #2
   b444c:	f001 ff3e 	bl	b62cc <digitalRead>
   b4450:	4320      	orrs	r0, r4
   b4452:	2807      	cmp	r0, #7
   b4454:	bf96      	itet	ls
   b4456:	4b02      	ldrls	r3, [pc, #8]	; (b4460 <_Z15get_water_levelv+0x2c>)
   b4458:	2000      	movhi	r0, #0
   b445a:	5618      	ldrsbls	r0, [r3, r0]
   b445c:	bd10      	pop	{r4, pc}
   b445e:	bf00      	nop
   b4460:	000b8270 	.word	0x000b8270

000b4464 <_Z10auto_waterv>:
   b4464:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4468:	f7ff ffe4 	bl	b4434 <_Z15get_water_levelv>
   b446c:	492a      	ldr	r1, [pc, #168]	; (b4518 <_Z10auto_waterv+0xb4>)
   b446e:	2800      	cmp	r0, #0
   b4470:	d04c      	beq.n	b450c <_Z10auto_waterv+0xa8>
   b4472:	4d2a      	ldr	r5, [pc, #168]	; (b451c <_Z10auto_waterv+0xb8>)
   b4474:	7808      	ldrb	r0, [r1, #0]
   b4476:	2200      	movs	r2, #0
   b4478:	4614      	mov	r4, r2
   b447a:	46a8      	mov	r8, r5
   b447c:	f04f 0c02 	mov.w	ip, #2
   b4480:	f855 3b04 	ldr.w	r3, [r5], #4
   b4484:	7c1e      	ldrb	r6, [r3, #16]
   b4486:	2e00      	cmp	r6, #0
   b4488:	d13b      	bne.n	b4502 <_Z10auto_waterv+0x9e>
   b448a:	68df      	ldr	r7, [r3, #12]
   b448c:	6a1e      	ldr	r6, [r3, #32]
   b448e:	42b7      	cmp	r7, r6
   b4490:	dc2e      	bgt.n	b44f0 <_Z10auto_waterv+0x8c>
   b4492:	b102      	cbz	r2, b4496 <_Z10auto_waterv+0x32>
   b4494:	7008      	strb	r0, [r1, #0]
   b4496:	2201      	movs	r2, #1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b4498:	4d21      	ldr	r5, [pc, #132]	; (b4520 <_Z10auto_waterv+0xbc>)
   b449a:	8a98      	ldrh	r0, [r3, #20]
   b449c:	741a      	strb	r2, [r3, #16]
   b449e:	2100      	movs	r1, #0
   b44a0:	f001 fefb 	bl	b629a <digitalWrite>
   b44a4:	68a8      	ldr	r0, [r5, #8]
   b44a6:	b150      	cbz	r0, b44be <_Z10auto_waterv+0x5a>
   b44a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b44ac:	2200      	movs	r2, #0
   b44ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   b44b2:	e9cd 1200 	strd	r1, r2, [sp]
   b44b6:	2103      	movs	r1, #3
   b44b8:	699b      	ldr	r3, [r3, #24]
   b44ba:	f000 fbf7 	bl	b4cac <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b44be:	68a8      	ldr	r0, [r5, #8]
   b44c0:	b130      	cbz	r0, b44d0 <_Z10auto_waterv+0x6c>
   b44c2:	2300      	movs	r3, #0
   b44c4:	e9cd 3300 	strd	r3, r3, [sp]
   b44c8:	461a      	mov	r2, r3
   b44ca:	2102      	movs	r1, #2
   b44cc:	f000 fbee 	bl	b4cac <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b44d0:	68a8      	ldr	r0, [r5, #8]
   b44d2:	b148      	cbz	r0, b44e8 <_Z10auto_waterv+0x84>
   b44d4:	2400      	movs	r4, #0
   b44d6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b44da:	e9cd 3400 	strd	r3, r4, [sp]
   b44de:	4622      	mov	r2, r4
   b44e0:	4623      	mov	r3, r4
   b44e2:	4621      	mov	r1, r4
   b44e4:	f000 fbe2 	bl	b4cac <os_timer_change>
   b44e8:	2000      	movs	r0, #0
   b44ea:	b002      	add	sp, #8
   b44ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b44f0:	f883 c010 	strb.w	ip, [r3, #16]
   b44f4:	3401      	adds	r4, #1
   b44f6:	2c04      	cmp	r4, #4
   b44f8:	d1c2      	bne.n	b4480 <_Z10auto_waterv+0x1c>
   b44fa:	2a00      	cmp	r2, #0
   b44fc:	d0f4      	beq.n	b44e8 <_Z10auto_waterv+0x84>
   b44fe:	7008      	strb	r0, [r1, #0]
   b4500:	e7f2      	b.n	b44e8 <_Z10auto_waterv+0x84>
   b4502:	2c03      	cmp	r4, #3
   b4504:	bf04      	itt	eq
   b4506:	2201      	moveq	r2, #1
   b4508:	4610      	moveq	r0, r2
   b450a:	e7f3      	b.n	b44f4 <_Z10auto_waterv+0x90>
   b450c:	2301      	movs	r3, #1
   b450e:	700b      	strb	r3, [r1, #0]
   b4510:	f04f 30ff 	mov.w	r0, #4294967295
   b4514:	e7e9      	b.n	b44ea <_Z10auto_waterv+0x86>
   b4516:	bf00      	nop
   b4518:	2003e648 	.word	0x2003e648
   b451c:	2003e520 	.word	0x2003e520
   b4520:	2003e660 	.word	0x2003e660

000b4524 <_Z11reset_statev>:
   b4524:	4a06      	ldr	r2, [pc, #24]	; (b4540 <_Z11reset_statev+0x1c>)
   b4526:	2300      	movs	r3, #0
   b4528:	7013      	strb	r3, [r2, #0]
   b452a:	4a06      	ldr	r2, [pc, #24]	; (b4544 <_Z11reset_statev+0x20>)
   b452c:	6811      	ldr	r1, [r2, #0]
   b452e:	740b      	strb	r3, [r1, #16]
   b4530:	6851      	ldr	r1, [r2, #4]
   b4532:	740b      	strb	r3, [r1, #16]
   b4534:	6891      	ldr	r1, [r2, #8]
   b4536:	68d2      	ldr	r2, [r2, #12]
   b4538:	740b      	strb	r3, [r1, #16]
   b453a:	7413      	strb	r3, [r2, #16]
   b453c:	4770      	bx	lr
   b453e:	bf00      	nop
   b4540:	2003e648 	.word	0x2003e648
   b4544:	2003e520 	.word	0x2003e520

000b4548 <loop>:
   b4548:	b510      	push	{r4, lr}
   b454a:	4c24      	ldr	r4, [pc, #144]	; (b45dc <loop+0x94>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b454c:	f000 fb6e 	bl	b4c2c <HAL_Timer_Get_Milli_Seconds>
   b4550:	6823      	ldr	r3, [r4, #0]
   b4552:	1ac0      	subs	r0, r0, r3
   b4554:	4b22      	ldr	r3, [pc, #136]	; (b45e0 <loop+0x98>)
   b4556:	4298      	cmp	r0, r3
   b4558:	d912      	bls.n	b4580 <loop+0x38>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b455a:	f000 fd63 	bl	b5024 <spark_cloud_flag_connected>
        if (!connected()) {
   b455e:	b110      	cbz	r0, b4566 <loop+0x1e>
        return spark_sync_time(NULL);
   b4560:	2000      	movs	r0, #0
   b4562:	f000 fd6f 	bl	b5044 <spark_sync_time>
   b4566:	f7ff fdd3 	bl	b4110 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b456a:	b910      	cbnz	r0, b4572 <loop+0x2a>
            spark_process();
   b456c:	f000 fd52 	bl	b5014 <spark_process>
        while (_while() && !_condition()) {
   b4570:	e7f9      	b.n	b4566 <loop+0x1e>
   b4572:	f7ff fdcd 	bl	b4110 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   b4576:	f000 fb59 	bl	b4c2c <HAL_Timer_Get_Milli_Seconds>
   b457a:	6020      	str	r0, [r4, #0]
   b457c:	f7ff ffd2 	bl	b4524 <_Z11reset_statev>
   b4580:	f000 ffe0 	bl	b5544 <_ZN9TimeClass4hourEv>
   b4584:	2815      	cmp	r0, #21
   b4586:	d107      	bne.n	b4598 <loop+0x50>
   b4588:	4b16      	ldr	r3, [pc, #88]	; (b45e4 <loop+0x9c>)
   b458a:	7819      	ldrb	r1, [r3, #0]
   b458c:	b921      	cbnz	r1, b4598 <loop+0x50>
    bool isValid() const { return handle!=nullptr; }
   b458e:	4b16      	ldr	r3, [pc, #88]	; (b45e8 <loop+0xa0>)
   b4590:	6898      	ldr	r0, [r3, #8]
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   b4592:	b968      	cbnz	r0, b45b0 <loop+0x68>
   b4594:	f7ff ff66 	bl	b4464 <_Z10auto_waterv>
   b4598:	f000 ffd4 	bl	b5544 <_ZN9TimeClass4hourEv>
   b459c:	2814      	cmp	r0, #20
   b459e:	dc0c      	bgt.n	b45ba <loop+0x72>
   b45a0:	f000 ffd0 	bl	b5544 <_ZN9TimeClass4hourEv>
   b45a4:	b198      	cbz	r0, b45ce <loop+0x86>
   b45a6:	f7ff ff45 	bl	b4434 <_Z15get_water_levelv>
   b45aa:	b1a8      	cbz	r0, b45d8 <loop+0x90>
   b45ac:	2100      	movs	r1, #0
   b45ae:	e009      	b.n	b45c4 <loop+0x7c>
   b45b0:	f000 fb8c 	bl	b4ccc <os_timer_is_active>
   b45b4:	2800      	cmp	r0, #0
   b45b6:	d0ed      	beq.n	b4594 <loop+0x4c>
   b45b8:	e7ee      	b.n	b4598 <loop+0x50>
   b45ba:	f7ff ff3b 	bl	b4434 <_Z15get_water_levelv>
   b45be:	2800      	cmp	r0, #0
   b45c0:	d1ee      	bne.n	b45a0 <loop+0x58>
   b45c2:	2101      	movs	r1, #1
   b45c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b45c8:	200c      	movs	r0, #12
   b45ca:	f001 be66 	b.w	b629a <digitalWrite>
   b45ce:	f7ff ff31 	bl	b4434 <_Z15get_water_levelv>
   b45d2:	2800      	cmp	r0, #0
   b45d4:	d1e7      	bne.n	b45a6 <loop+0x5e>
   b45d6:	e7e9      	b.n	b45ac <loop+0x64>
   b45d8:	bd10      	pop	{r4, pc}
   b45da:	bf00      	nop
   b45dc:	2003e644 	.word	0x2003e644
   b45e0:	05265c00 	.word	0x05265c00
   b45e4:	2003e648 	.word	0x2003e648
   b45e8:	2003e660 	.word	0x2003e660

000b45ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b45ec:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b45ee:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b45f0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b45f2:	b17c      	cbz	r4, b4614 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b45f4:	6863      	ldr	r3, [r4, #4]
   b45f6:	3b01      	subs	r3, #1
   b45f8:	6063      	str	r3, [r4, #4]
   b45fa:	b95b      	cbnz	r3, b4614 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b45fc:	6823      	ldr	r3, [r4, #0]
   b45fe:	4620      	mov	r0, r4
   b4600:	689b      	ldr	r3, [r3, #8]
   b4602:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4604:	68a3      	ldr	r3, [r4, #8]
   b4606:	3b01      	subs	r3, #1
   b4608:	60a3      	str	r3, [r4, #8]
   b460a:	b91b      	cbnz	r3, b4614 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b460c:	6823      	ldr	r3, [r4, #0]
   b460e:	4620      	mov	r0, r4
   b4610:	68db      	ldr	r3, [r3, #12]
   b4612:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4614:	4628      	mov	r0, r5
   b4616:	bd38      	pop	{r3, r4, r5, pc}

000b4618 <_Z7getdata6String>:
   b4618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b461c:	4980      	ldr	r1, [pc, #512]	; (b4820 <_Z7getdata6String+0x208>)
   b461e:	b091      	sub	sp, #68	; 0x44
   b4620:	4605      	mov	r5, r0
   b4622:	f000 fe4a 	bl	b52ba <_ZNK6String6equalsEPKc>
   b4626:	b1d8      	cbz	r0, b4660 <_Z7getdata6String+0x48>
   b4628:	f7ff fe12 	bl	b4250 <_Z14get_batt_levelv>
   b462c:	ee10 0a10 	vmov	r0, s0
   b4630:	f003 f8e4 	bl	b77fc <__aeabi_f2d>
   b4634:	4602      	mov	r2, r0
   b4636:	460b      	mov	r3, r1
   b4638:	a80c      	add	r0, sp, #48	; 0x30
   b463a:	497a      	ldr	r1, [pc, #488]	; (b4824 <_Z7getdata6String+0x20c>)
   b463c:	f000 fe50 	bl	b52e0 <_ZN6String6formatEPKcz>
   b4640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   b4642:	4979      	ldr	r1, [pc, #484]	; (b4828 <_Z7getdata6String+0x210>)
   b4644:	a80a      	add	r0, sp, #40	; 0x28
   b4646:	f7ff fd71 	bl	b412c <_ZN10CloudClass7publishEPKcS1_.isra.0>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b464a:	a80b      	add	r0, sp, #44	; 0x2c
   b464c:	f7ff ffce 	bl	b45ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4650:	a80c      	add	r0, sp, #48	; 0x30
   b4652:	f000 fdb9 	bl	b51c8 <_ZN6StringD1Ev>
   b4656:	2400      	movs	r4, #0
   b4658:	4620      	mov	r0, r4
   b465a:	b011      	add	sp, #68	; 0x44
   b465c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4660:	4972      	ldr	r1, [pc, #456]	; (b482c <_Z7getdata6String+0x214>)
   b4662:	4628      	mov	r0, r5
   b4664:	f000 fe29 	bl	b52ba <_ZNK6String6equalsEPKc>
   b4668:	4604      	mov	r4, r0
   b466a:	b1d0      	cbz	r0, b46a2 <_Z7getdata6String+0x8a>
   b466c:	4c70      	ldr	r4, [pc, #448]	; (b4830 <_Z7getdata6String+0x218>)
   b466e:	6820      	ldr	r0, [r4, #0]
   b4670:	f7ff fe3c 	bl	b42ec <_Z18get_moisture_levelP10Gardenzone>
   b4674:	9009      	str	r0, [sp, #36]	; 0x24
   b4676:	6860      	ldr	r0, [r4, #4]
   b4678:	f7ff fe38 	bl	b42ec <_Z18get_moisture_levelP10Gardenzone>
   b467c:	9006      	str	r0, [sp, #24]
   b467e:	68a0      	ldr	r0, [r4, #8]
   b4680:	f7ff fe34 	bl	b42ec <_Z18get_moisture_levelP10Gardenzone>
   b4684:	4605      	mov	r5, r0
   b4686:	68e0      	ldr	r0, [r4, #12]
   b4688:	f7ff fe30 	bl	b42ec <_Z18get_moisture_levelP10Gardenzone>
   b468c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b468e:	4969      	ldr	r1, [pc, #420]	; (b4834 <_Z7getdata6String+0x21c>)
   b4690:	9b06      	ldr	r3, [sp, #24]
   b4692:	e9cd 5000 	strd	r5, r0, [sp]
   b4696:	a80c      	add	r0, sp, #48	; 0x30
   b4698:	f000 fe22 	bl	b52e0 <_ZN6String6formatEPKcz>
   b469c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   b469e:	4966      	ldr	r1, [pc, #408]	; (b4838 <_Z7getdata6String+0x220>)
   b46a0:	e7d0      	b.n	b4644 <_Z7getdata6String+0x2c>
   b46a2:	4966      	ldr	r1, [pc, #408]	; (b483c <_Z7getdata6String+0x224>)
   b46a4:	4628      	mov	r0, r5
   b46a6:	f000 fe08 	bl	b52ba <_ZNK6String6equalsEPKc>
   b46aa:	b308      	cbz	r0, b46f0 <_Z7getdata6String+0xd8>
   b46ac:	f7ff fec2 	bl	b4434 <_Z15get_water_levelv>
   b46b0:	9009      	str	r0, [sp, #36]	; 0x24
   b46b2:	2008      	movs	r0, #8
   b46b4:	f001 fe0a 	bl	b62cc <digitalRead>
   b46b8:	9006      	str	r0, [sp, #24]
   b46ba:	2007      	movs	r0, #7
   b46bc:	f001 fe06 	bl	b62cc <digitalRead>
   b46c0:	4605      	mov	r5, r0
   b46c2:	2006      	movs	r0, #6
   b46c4:	f001 fe02 	bl	b62cc <digitalRead>
   b46c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b46ca:	495d      	ldr	r1, [pc, #372]	; (b4840 <_Z7getdata6String+0x228>)
   b46cc:	9b06      	ldr	r3, [sp, #24]
   b46ce:	e9cd 5000 	strd	r5, r0, [sp]
   b46d2:	a80c      	add	r0, sp, #48	; 0x30
   b46d4:	f000 fe04 	bl	b52e0 <_ZN6String6formatEPKcz>
   b46d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   b46da:	495a      	ldr	r1, [pc, #360]	; (b4844 <_Z7getdata6String+0x22c>)
   b46dc:	a80a      	add	r0, sp, #40	; 0x28
   b46de:	f7ff fd25 	bl	b412c <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b46e2:	a80b      	add	r0, sp, #44	; 0x2c
   b46e4:	f7ff ff82 	bl	b45ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b46e8:	a80c      	add	r0, sp, #48	; 0x30
   b46ea:	f000 fd6d 	bl	b51c8 <_ZN6StringD1Ev>
   b46ee:	e7b3      	b.n	b4658 <_Z7getdata6String+0x40>
   b46f0:	4955      	ldr	r1, [pc, #340]	; (b4848 <_Z7getdata6String+0x230>)
   b46f2:	4628      	mov	r0, r5
   b46f4:	f000 fde1 	bl	b52ba <_ZNK6String6equalsEPKc>
   b46f8:	4604      	mov	r4, r0
   b46fa:	b340      	cbz	r0, b474e <_Z7getdata6String+0x136>
   b46fc:	4c53      	ldr	r4, [pc, #332]	; (b484c <_Z7getdata6String+0x234>)
   b46fe:	4620      	mov	r0, r4
   b4700:	f7ff fd62 	bl	b41c8 <_Z11get_weatherP7Weather>
   b4704:	6820      	ldr	r0, [r4, #0]
   b4706:	f003 f879 	bl	b77fc <__aeabi_f2d>
   b470a:	4602      	mov	r2, r0
   b470c:	460b      	mov	r3, r1
   b470e:	68a0      	ldr	r0, [r4, #8]
   b4710:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b4714:	f003 f872 	bl	b77fc <__aeabi_f2d>
   b4718:	4680      	mov	r8, r0
   b471a:	6860      	ldr	r0, [r4, #4]
   b471c:	4689      	mov	r9, r1
   b471e:	f003 f86d 	bl	b77fc <__aeabi_f2d>
   b4722:	460d      	mov	r5, r1
   b4724:	4604      	mov	r4, r0
   b4726:	f000 ff0d 	bl	b5544 <_ZN9TimeClass4hourEv>
   b472a:	4607      	mov	r7, r0
   b472c:	f000 ff16 	bl	b555c <_ZN9TimeClass6minuteEv>
   b4730:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b4734:	e9cd 7004 	strd	r7, r0, [sp, #16]
   b4738:	4945      	ldr	r1, [pc, #276]	; (b4850 <_Z7getdata6String+0x238>)
   b473a:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b473e:	e9cd 8900 	strd	r8, r9, [sp]
   b4742:	a80c      	add	r0, sp, #48	; 0x30
   b4744:	f000 fdcc 	bl	b52e0 <_ZN6String6formatEPKcz>
   b4748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   b474a:	4942      	ldr	r1, [pc, #264]	; (b4854 <_Z7getdata6String+0x23c>)
   b474c:	e77a      	b.n	b4644 <_Z7getdata6String+0x2c>
   b474e:	4942      	ldr	r1, [pc, #264]	; (b4858 <_Z7getdata6String+0x240>)
   b4750:	4628      	mov	r0, r5
   b4752:	f000 fdb2 	bl	b52ba <_ZNK6String6equalsEPKc>
   b4756:	b120      	cbz	r0, b4762 <_Z7getdata6String+0x14a>
   b4758:	4621      	mov	r1, r4
   b475a:	2002      	movs	r0, #2
   b475c:	f001 fd9d 	bl	b629a <digitalWrite>
   b4760:	e77a      	b.n	b4658 <_Z7getdata6String+0x40>
   b4762:	493e      	ldr	r1, [pc, #248]	; (b485c <_Z7getdata6String+0x244>)
   b4764:	4628      	mov	r0, r5
   b4766:	f000 fda8 	bl	b52ba <_ZNK6String6equalsEPKc>
   b476a:	4604      	mov	r4, r0
   b476c:	b120      	cbz	r0, b4778 <_Z7getdata6String+0x160>
   b476e:	2101      	movs	r1, #1
   b4770:	2002      	movs	r0, #2
   b4772:	f001 fd92 	bl	b629a <digitalWrite>
   b4776:	e76e      	b.n	b4656 <_Z7getdata6String+0x3e>
   b4778:	4939      	ldr	r1, [pc, #228]	; (b4860 <_Z7getdata6String+0x248>)
   b477a:	4628      	mov	r0, r5
   b477c:	f000 fd9d 	bl	b52ba <_ZNK6String6equalsEPKc>
   b4780:	b110      	cbz	r0, b4788 <_Z7getdata6String+0x170>
   b4782:	4621      	mov	r1, r4
   b4784:	2003      	movs	r0, #3
   b4786:	e7e9      	b.n	b475c <_Z7getdata6String+0x144>
   b4788:	4936      	ldr	r1, [pc, #216]	; (b4864 <_Z7getdata6String+0x24c>)
   b478a:	4628      	mov	r0, r5
   b478c:	f000 fd95 	bl	b52ba <_ZNK6String6equalsEPKc>
   b4790:	4604      	mov	r4, r0
   b4792:	b110      	cbz	r0, b479a <_Z7getdata6String+0x182>
   b4794:	2101      	movs	r1, #1
   b4796:	2003      	movs	r0, #3
   b4798:	e7eb      	b.n	b4772 <_Z7getdata6String+0x15a>
   b479a:	4933      	ldr	r1, [pc, #204]	; (b4868 <_Z7getdata6String+0x250>)
   b479c:	4628      	mov	r0, r5
   b479e:	f000 fd8c 	bl	b52ba <_ZNK6String6equalsEPKc>
   b47a2:	b110      	cbz	r0, b47aa <_Z7getdata6String+0x192>
   b47a4:	4621      	mov	r1, r4
   b47a6:	2004      	movs	r0, #4
   b47a8:	e7d8      	b.n	b475c <_Z7getdata6String+0x144>
   b47aa:	4930      	ldr	r1, [pc, #192]	; (b486c <_Z7getdata6String+0x254>)
   b47ac:	4628      	mov	r0, r5
   b47ae:	f000 fd84 	bl	b52ba <_ZNK6String6equalsEPKc>
   b47b2:	b110      	cbz	r0, b47ba <_Z7getdata6String+0x1a2>
   b47b4:	2101      	movs	r1, #1
   b47b6:	2004      	movs	r0, #4
   b47b8:	e7db      	b.n	b4772 <_Z7getdata6String+0x15a>
   b47ba:	492d      	ldr	r1, [pc, #180]	; (b4870 <_Z7getdata6String+0x258>)
   b47bc:	4628      	mov	r0, r5
   b47be:	f000 fd7c 	bl	b52ba <_ZNK6String6equalsEPKc>
   b47c2:	b110      	cbz	r0, b47ca <_Z7getdata6String+0x1b2>
   b47c4:	2100      	movs	r1, #0
   b47c6:	2005      	movs	r0, #5
   b47c8:	e7d3      	b.n	b4772 <_Z7getdata6String+0x15a>
   b47ca:	492a      	ldr	r1, [pc, #168]	; (b4874 <_Z7getdata6String+0x25c>)
   b47cc:	4628      	mov	r0, r5
   b47ce:	f000 fd74 	bl	b52ba <_ZNK6String6equalsEPKc>
   b47d2:	4604      	mov	r4, r0
   b47d4:	b108      	cbz	r0, b47da <_Z7getdata6String+0x1c2>
   b47d6:	2101      	movs	r1, #1
   b47d8:	e7f5      	b.n	b47c6 <_Z7getdata6String+0x1ae>
   b47da:	4927      	ldr	r1, [pc, #156]	; (b4878 <_Z7getdata6String+0x260>)
   b47dc:	4628      	mov	r0, r5
   b47de:	f000 fd6c 	bl	b52ba <_ZNK6String6equalsEPKc>
   b47e2:	b188      	cbz	r0, b4808 <_Z7getdata6String+0x1f0>
   b47e4:	4912      	ldr	r1, [pc, #72]	; (b4830 <_Z7getdata6String+0x218>)
   b47e6:	68c8      	ldr	r0, [r1, #12]
   b47e8:	684b      	ldr	r3, [r1, #4]
   b47ea:	680a      	ldr	r2, [r1, #0]
   b47ec:	7c00      	ldrb	r0, [r0, #16]
   b47ee:	7c12      	ldrb	r2, [r2, #16]
   b47f0:	7c1b      	ldrb	r3, [r3, #16]
   b47f2:	9001      	str	r0, [sp, #4]
   b47f4:	6889      	ldr	r1, [r1, #8]
   b47f6:	7c09      	ldrb	r1, [r1, #16]
   b47f8:	9100      	str	r1, [sp, #0]
   b47fa:	a80c      	add	r0, sp, #48	; 0x30
   b47fc:	491f      	ldr	r1, [pc, #124]	; (b487c <_Z7getdata6String+0x264>)
   b47fe:	f000 fd6f 	bl	b52e0 <_ZN6String6formatEPKcz>
   b4802:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   b4804:	491e      	ldr	r1, [pc, #120]	; (b4880 <_Z7getdata6String+0x268>)
   b4806:	e769      	b.n	b46dc <_Z7getdata6String+0xc4>
   b4808:	4a1e      	ldr	r2, [pc, #120]	; (b4884 <_Z7getdata6String+0x26c>)
   b480a:	491f      	ldr	r1, [pc, #124]	; (b4888 <_Z7getdata6String+0x270>)
   b480c:	a80c      	add	r0, sp, #48	; 0x30
   b480e:	f7ff fc8d 	bl	b412c <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4812:	a80d      	add	r0, sp, #52	; 0x34
   b4814:	f7ff feea 	bl	b45ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4818:	f04f 34ff 	mov.w	r4, #4294967295
   b481c:	e71c      	b.n	b4658 <_Z7getdata6String+0x40>
   b481e:	bf00      	nop
   b4820:	000b812d 	.word	0x000b812d
   b4824:	000b8135 	.word	0x000b8135
   b4828:	000b813c 	.word	0x000b813c
   b482c:	000b814c 	.word	0x000b814c
   b4830:	2003e520 	.word	0x2003e520
   b4834:	000b8155 	.word	0x000b8155
   b4838:	000b8178 	.word	0x000b8178
   b483c:	000b8181 	.word	0x000b8181
   b4840:	000b8187 	.word	0x000b8187
   b4844:	000b819d 	.word	0x000b819d
   b4848:	000b81a9 	.word	0x000b81a9
   b484c:	2003e654 	.word	0x2003e654
   b4850:	000b81b1 	.word	0x000b81b1
   b4854:	000b81e2 	.word	0x000b81e2
   b4858:	000b81ec 	.word	0x000b81ec
   b485c:	000b81ea 	.word	0x000b81ea
   b4860:	000b81f3 	.word	0x000b81f3
   b4864:	000b81f1 	.word	0x000b81f1
   b4868:	000b81fa 	.word	0x000b81fa
   b486c:	000b81f8 	.word	0x000b81f8
   b4870:	000b8201 	.word	0x000b8201
   b4874:	000b81ff 	.word	0x000b81ff
   b4878:	000b824a 	.word	0x000b824a
   b487c:	000b8206 	.word	0x000b8206
   b4880:	000b8224 	.word	0x000b8224
   b4884:	000b822b 	.word	0x000b822b
   b4888:	000b8251 	.word	0x000b8251

000b488c <_GLOBAL__sub_I_version>:
   b488c:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b488e:	4b1c      	ldr	r3, [pc, #112]	; (b4900 <_GLOBAL__sub_I_version+0x74>)
   b4890:	2500      	movs	r5, #0
   b4892:	b088      	sub	sp, #32
   b4894:	701d      	strb	r5, [r3, #0]
   b4896:	f000 f9c9 	bl	b4c2c <HAL_Timer_Get_Milli_Seconds>
   b489a:	4b1a      	ldr	r3, [pc, #104]	; (b4904 <_GLOBAL__sub_I_version+0x78>)
   b489c:	6018      	str	r0, [r3, #0]
   b489e:	481a      	ldr	r0, [pc, #104]	; (b4908 <_GLOBAL__sub_I_version+0x7c>)
   b48a0:	f000 f844 	bl	b492c <_ZN9MPL3115A2C1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b48a4:	4b19      	ldr	r3, [pc, #100]	; (b490c <_GLOBAL__sub_I_version+0x80>)
   b48a6:	9304      	str	r3, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b48a8:	ac04      	add	r4, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b48aa:	4b19      	ldr	r3, [pc, #100]	; (b4910 <_GLOBAL__sub_I_version+0x84>)
   b48ac:	4a19      	ldr	r2, [pc, #100]	; (b4914 <_GLOBAL__sub_I_version+0x88>)
   b48ae:	601a      	str	r2, [r3, #0]
   b48b0:	e894 0003 	ldmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b48b4:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b48b8:	ae02      	add	r6, sp, #8
   b48ba:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b48be:	e892 0003 	ldmia.w	r2, {r0, r1}
   b48c2:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b48c6:	e896 0003 	ldmia.w	r6, {r0, r1}
   b48ca:	e882 0003 	stmia.w	r2, {r0, r1}
   b48ce:	4a12      	ldr	r2, [pc, #72]	; (b4918 <_GLOBAL__sub_I_version+0x8c>)
   b48d0:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b48d2:	699a      	ldr	r2, [r3, #24]
   b48d4:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   b48d6:	4a11      	ldr	r2, [pc, #68]	; (b491c <_GLOBAL__sub_I_version+0x90>)
   b48d8:	619a      	str	r2, [r3, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b48da:	2201      	movs	r2, #1
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b48dc:	711d      	strb	r5, [r3, #4]
   b48de:	609d      	str	r5, [r3, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b48e0:	f247 5130 	movw	r1, #30000	; 0x7530
   b48e4:	9200      	str	r2, [sp, #0]
   b48e6:	f103 0008 	add.w	r0, r3, #8
   b48ea:	4a0d      	ldr	r2, [pc, #52]	; (b4920 <_GLOBAL__sub_I_version+0x94>)
   b48ec:	9501      	str	r5, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
   b48ee:	9506      	str	r5, [sp, #24]
   b48f0:	f000 f9c4 	bl	b4c7c <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b48f4:	4620      	mov	r0, r4
   b48f6:	f7ff fc27 	bl	b4148 <_ZNSt14_Function_baseD1Ev>
   b48fa:	b008      	add	sp, #32
   b48fc:	bd70      	pop	{r4, r5, r6, pc}
   b48fe:	bf00      	nop
   b4900:	2003e640 	.word	0x2003e640
   b4904:	2003e644 	.word	0x2003e644
   b4908:	2003e64c 	.word	0x2003e64c
   b490c:	000b431d 	.word	0x000b431d
   b4910:	2003e660 	.word	0x2003e660
   b4914:	000b8264 	.word	0x000b8264
   b4918:	000b40f9 	.word	0x000b40f9
   b491c:	000b410d 	.word	0x000b410d
   b4920:	000b40bf 	.word	0x000b40bf

000b4924 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4924:	6803      	ldr	r3, [r0, #0]
   b4926:	b2c9      	uxtb	r1, r1
   b4928:	689b      	ldr	r3, [r3, #8]
   b492a:	4718      	bx	r3

000b492c <_ZN9MPL3115A2C1Ev>:

#include <Wire.h>

#include "SparkFunMPL3115A2.h"

MPL3115A2::MPL3115A2()
   b492c:	2360      	movs	r3, #96	; 0x60
   b492e:	7103      	strb	r3, [r0, #4]
{
  //Set initial values for private vars
}
   b4930:	4770      	bx	lr

000b4932 <_ZN9MPL3115A25beginER7TwoWireh>:
/*******************************************************************************************/
//Start I2C communication
void MPL3115A2::begin(TwoWire &wirePort, uint8_t deviceAddress)
{
  // Let's assume that Wire.begin(); has been done elsewhere
  _i2cPort = &wirePort;
   b4932:	6001      	str	r1, [r0, #0]
  _I2Caddress = deviceAddress;
   b4934:	7102      	strb	r2, [r0, #4]
}
   b4936:	4770      	bx	lr

000b4938 <_ZN9MPL3115A28IIC_ReadEh>:
}


// These are the two I2C functions in this sketch.
byte MPL3115A2::IIC_Read(byte regAddr)
{
   b4938:	b538      	push	{r3, r4, r5, lr}
   b493a:	4604      	mov	r4, r0
   b493c:	460d      	mov	r5, r1
  // This function reads one byte over IIC
  _i2cPort->beginTransmission(_I2Caddress);
   b493e:	7901      	ldrb	r1, [r0, #4]
   b4940:	6800      	ldr	r0, [r0, #0]
   b4942:	f001 fb63 	bl	b600c <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(regAddr);  // Address of CTRL_REG1
   b4946:	6820      	ldr	r0, [r4, #0]
   b4948:	6803      	ldr	r3, [r0, #0]
   b494a:	4629      	mov	r1, r5
   b494c:	689b      	ldr	r3, [r3, #8]
   b494e:	4798      	blx	r3
  _i2cPort->endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
   b4950:	6820      	ldr	r0, [r4, #0]
   b4952:	2100      	movs	r1, #0
   b4954:	f001 fb5e 	bl	b6014 <_ZN7TwoWire15endTransmissionEh>
  _i2cPort->requestFrom(_I2Caddress, 1); // Request the data...
   b4958:	7921      	ldrb	r1, [r4, #4]
   b495a:	6820      	ldr	r0, [r4, #0]
   b495c:	2201      	movs	r2, #1
   b495e:	f001 fb52 	bl	b6006 <_ZN7TwoWire11requestFromEhj>
  return _i2cPort->read();
   b4962:	6820      	ldr	r0, [r4, #0]
   b4964:	6803      	ldr	r3, [r0, #0]
   b4966:	695b      	ldr	r3, [r3, #20]
   b4968:	4798      	blx	r3
}
   b496a:	b2c0      	uxtb	r0, r0
   b496c:	bd38      	pop	{r3, r4, r5, pc}

000b496e <_ZN9MPL3115A29IIC_WriteEhh>:

void MPL3115A2::IIC_Write(byte regAddr, byte value)
{
   b496e:	b570      	push	{r4, r5, r6, lr}
   b4970:	4604      	mov	r4, r0
   b4972:	460e      	mov	r6, r1
  // This function writes one byto over IIC
  _i2cPort->beginTransmission(_I2Caddress);
   b4974:	7901      	ldrb	r1, [r0, #4]
   b4976:	6800      	ldr	r0, [r0, #0]
{
   b4978:	4615      	mov	r5, r2
  _i2cPort->beginTransmission(_I2Caddress);
   b497a:	f001 fb47 	bl	b600c <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(regAddr);
   b497e:	6820      	ldr	r0, [r4, #0]
   b4980:	6803      	ldr	r3, [r0, #0]
   b4982:	4631      	mov	r1, r6
   b4984:	689b      	ldr	r3, [r3, #8]
   b4986:	4798      	blx	r3
  _i2cPort->write(value);
   b4988:	6820      	ldr	r0, [r4, #0]
   b498a:	6803      	ldr	r3, [r0, #0]
   b498c:	4629      	mov	r1, r5
   b498e:	689b      	ldr	r3, [r3, #8]
   b4990:	4798      	blx	r3
  _i2cPort->endTransmission(true);
   b4992:	6820      	ldr	r0, [r4, #0]
   b4994:	2101      	movs	r1, #1
}
   b4996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _i2cPort->endTransmission(true);
   b499a:	f001 bb3b 	b.w	b6014 <_ZN7TwoWire15endTransmissionEh>

000b499e <_ZN9MPL3115A216setModeBarometerEv>:
{
   b499e:	b510      	push	{r4, lr}
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   b49a0:	2126      	movs	r1, #38	; 0x26
{
   b49a2:	4604      	mov	r4, r0
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   b49a4:	f7ff ffc8 	bl	b4938 <_ZN9MPL3115A28IIC_ReadEh>
  IIC_Write(CTRL_REG1, tempSetting);
   b49a8:	2126      	movs	r1, #38	; 0x26
   b49aa:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   b49ae:	4620      	mov	r0, r4
}
   b49b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IIC_Write(CTRL_REG1, tempSetting);
   b49b4:	f7ff bfdb 	b.w	b496e <_ZN9MPL3115A29IIC_WriteEhh>

000b49b8 <_ZN9MPL3115A217setOversampleRateEh>:
  if(sampleRate > 7) sampleRate = 7; //OS cannot be larger than 0b.0111
   b49b8:	2907      	cmp	r1, #7
   b49ba:	bf28      	it	cs
   b49bc:	2107      	movcs	r1, #7
{
   b49be:	b538      	push	{r3, r4, r5, lr}
   b49c0:	460d      	mov	r5, r1
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   b49c2:	2126      	movs	r1, #38	; 0x26
{
   b49c4:	4604      	mov	r4, r0
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   b49c6:	f7ff ffb7 	bl	b4938 <_ZN9MPL3115A28IIC_ReadEh>
  tempSetting &= 0xc7; // B11000111; //Clear out old OS bits
   b49ca:	f000 03c7 	and.w	r3, r0, #199	; 0xc7
  tempSetting |= sampleRate; //Mask in new OS bits
   b49ce:	ea43 02c5 	orr.w	r2, r3, r5, lsl #3
  IIC_Write(CTRL_REG1, tempSetting);
   b49d2:	4620      	mov	r0, r4
   b49d4:	b2d2      	uxtb	r2, r2
}
   b49d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IIC_Write(CTRL_REG1, tempSetting);
   b49da:	2126      	movs	r1, #38	; 0x26
   b49dc:	f7ff bfc7 	b.w	b496e <_ZN9MPL3115A29IIC_WriteEhh>

000b49e0 <_ZN9MPL3115A216enableEventFlagsEv>:
  IIC_Write(PT_DATA_CFG, 0x07); // Enable all three pressure and temp event flags 
   b49e0:	2207      	movs	r2, #7
   b49e2:	2113      	movs	r1, #19
   b49e4:	f7ff bfc3 	b.w	b496e <_ZN9MPL3115A29IIC_WriteEhh>

000b49e8 <_ZN9MPL3115A213toggleOneShotEv>:
{
   b49e8:	b510      	push	{r4, lr}
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   b49ea:	2126      	movs	r1, #38	; 0x26
{
   b49ec:	4604      	mov	r4, r0
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   b49ee:	f7ff ffa3 	bl	b4938 <_ZN9MPL3115A28IIC_ReadEh>
  IIC_Write(CTRL_REG1, tempSetting);
   b49f2:	2126      	movs	r1, #38	; 0x26
   b49f4:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
   b49f8:	4620      	mov	r0, r4
   b49fa:	f7ff ffb8 	bl	b496e <_ZN9MPL3115A29IIC_WriteEhh>
  tempSetting = IIC_Read(CTRL_REG1); //Read current settings to be safe
   b49fe:	2126      	movs	r1, #38	; 0x26
   b4a00:	4620      	mov	r0, r4
   b4a02:	f7ff ff99 	bl	b4938 <_ZN9MPL3115A28IIC_ReadEh>
  tempSetting |= (1<<1); //Set OST bit
   b4a06:	f040 0002 	orr.w	r0, r0, #2
  IIC_Write(CTRL_REG1, tempSetting);
   b4a0a:	b2c2      	uxtb	r2, r0
   b4a0c:	2126      	movs	r1, #38	; 0x26
   b4a0e:	4620      	mov	r0, r4
}
   b4a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IIC_Write(CTRL_REG1, tempSetting);
   b4a14:	f7ff bfab 	b.w	b496e <_ZN9MPL3115A29IIC_WriteEhh>

000b4a18 <_ZN9MPL3115A212readPressureEv>:
{
   b4a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if((IIC_Read(STATUS) & (1<<2)) == 0) toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   b4a1a:	2100      	movs	r1, #0
{
   b4a1c:	4605      	mov	r5, r0
	if((IIC_Read(STATUS) & (1<<2)) == 0) toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   b4a1e:	f7ff ff8b 	bl	b4938 <_ZN9MPL3115A28IIC_ReadEh>
   b4a22:	0742      	lsls	r2, r0, #29
   b4a24:	d402      	bmi.n	b4a2c <_ZN9MPL3115A212readPressureEv+0x14>
   b4a26:	4628      	mov	r0, r5
   b4a28:	f7ff ffde 	bl	b49e8 <_ZN9MPL3115A213toggleOneShotEv>
{
   b4a2c:	f240 2459 	movw	r4, #601	; 0x259
	while((IIC_Read(STATUS) & (1<<2)) == 0)
   b4a30:	2100      	movs	r1, #0
   b4a32:	4628      	mov	r0, r5
   b4a34:	f7ff ff80 	bl	b4938 <_ZN9MPL3115A28IIC_ReadEh>
   b4a38:	0743      	lsls	r3, r0, #29
   b4a3a:	d408      	bmi.n	b4a4e <_ZN9MPL3115A212readPressureEv+0x36>
		if(++counter > 600) return(-999); //Error out after max of 512ms for a read
   b4a3c:	3c01      	subs	r4, #1
   b4a3e:	d102      	bne.n	b4a46 <_ZN9MPL3115A212readPressureEv+0x2e>
   b4a40:	ed9f 0a21 	vldr	s0, [pc, #132]	; b4ac8 <_ZN9MPL3115A212readPressureEv+0xb0>
}
   b4a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		delay(1);
   b4a46:	2001      	movs	r0, #1
   b4a48:	f000 fdaa 	bl	b55a0 <delay>
	while((IIC_Read(STATUS) & (1<<2)) == 0)
   b4a4c:	e7f0      	b.n	b4a30 <_ZN9MPL3115A212readPressureEv+0x18>
	_i2cPort->beginTransmission(_I2Caddress);
   b4a4e:	7929      	ldrb	r1, [r5, #4]
   b4a50:	6828      	ldr	r0, [r5, #0]
   b4a52:	f001 fadb 	bl	b600c <_ZN7TwoWire17beginTransmissionEh>
	_i2cPort->write(OUT_P_MSB);  // Address of data to get
   b4a56:	6828      	ldr	r0, [r5, #0]
   b4a58:	2101      	movs	r1, #1
   b4a5a:	f7ff ff63 	bl	b4924 <_ZN7TwoWire5writeEi.isra.0>
	_i2cPort->endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
   b4a5e:	2100      	movs	r1, #0
   b4a60:	6828      	ldr	r0, [r5, #0]
   b4a62:	f001 fad7 	bl	b6014 <_ZN7TwoWire15endTransmissionEh>
	if (_i2cPort->requestFrom(_I2Caddress, 3) != 3) { // Request three bytes
   b4a66:	7929      	ldrb	r1, [r5, #4]
   b4a68:	6828      	ldr	r0, [r5, #0]
   b4a6a:	2203      	movs	r2, #3
   b4a6c:	f001 facb 	bl	b6006 <_ZN7TwoWire11requestFromEhj>
   b4a70:	2803      	cmp	r0, #3
   b4a72:	d1e5      	bne.n	b4a40 <_ZN9MPL3115A212readPressureEv+0x28>
	msb = _i2cPort->read();
   b4a74:	6828      	ldr	r0, [r5, #0]
   b4a76:	6803      	ldr	r3, [r0, #0]
   b4a78:	695b      	ldr	r3, [r3, #20]
   b4a7a:	4798      	blx	r3
   b4a7c:	4604      	mov	r4, r0
	csb = _i2cPort->read();
   b4a7e:	6828      	ldr	r0, [r5, #0]
   b4a80:	6803      	ldr	r3, [r0, #0]
   b4a82:	695b      	ldr	r3, [r3, #20]
   b4a84:	4798      	blx	r3
   b4a86:	4607      	mov	r7, r0
	lsb = _i2cPort->read();
   b4a88:	6828      	ldr	r0, [r5, #0]
   b4a8a:	6803      	ldr	r3, [r0, #0]
   b4a8c:	695b      	ldr	r3, [r3, #20]
   b4a8e:	4798      	blx	r3
	long pressure_whole = (long)msb<<16 | (long)csb<<8 | (long)lsb;
   b4a90:	0424      	lsls	r4, r4, #16
   b4a92:	023f      	lsls	r7, r7, #8
	lsb = _i2cPort->read();
   b4a94:	4606      	mov	r6, r0
	long pressure_whole = (long)msb<<16 | (long)csb<<8 | (long)lsb;
   b4a96:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
	toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   b4a9a:	4628      	mov	r0, r5
	long pressure_whole = (long)msb<<16 | (long)csb<<8 | (long)lsb;
   b4a9c:	b2bf      	uxth	r7, r7
	toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   b4a9e:	f7ff ffa3 	bl	b49e8 <_ZN9MPL3115A213toggleOneShotEv>
	long pressure_whole = (long)msb<<16 | (long)csb<<8 | (long)lsb;
   b4aa2:	433c      	orrs	r4, r7
   b4aa4:	b2f0      	uxtb	r0, r6
   b4aa6:	4304      	orrs	r4, r0
	pressure_whole >>= 6; //Pressure is an 18 bit number with 2 bits of decimal. Get rid of decimal portion.
   b4aa8:	11a3      	asrs	r3, r4, #6
	float pressure_decimal = (float)lsb/4.0; //Turn it into fraction
   b4aaa:	f3c0 1001 	ubfx	r0, r0, #4, #2
   b4aae:	ee07 0a90 	vmov	s15, r0
	pressure_whole >>= 6; //Pressure is an 18 bit number with 2 bits of decimal. Get rid of decimal portion.
   b4ab2:	ee00 3a10 	vmov	s0, r3
	float pressure_decimal = (float)lsb/4.0; //Turn it into fraction
   b4ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float pressure = (float)pressure_whole + pressure_decimal;
   b4aba:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   b4abe:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   b4ac2:	eea7 0a87 	vfma.f32	s0, s15, s14
	return(pressure);
   b4ac6:	e7bd      	b.n	b4a44 <_ZN9MPL3115A212readPressureEv+0x2c>
   b4ac8:	c479c000 	.word	0xc479c000

000b4acc <_ZN9MPL3115A28readTempEv>:
{
   b4acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if((IIC_Read(STATUS) & (1<<1)) == 0) toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   b4ace:	2100      	movs	r1, #0
{
   b4ad0:	4604      	mov	r4, r0
	if((IIC_Read(STATUS) & (1<<1)) == 0) toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   b4ad2:	f7ff ff31 	bl	b4938 <_ZN9MPL3115A28IIC_ReadEh>
   b4ad6:	0781      	lsls	r1, r0, #30
   b4ad8:	d402      	bmi.n	b4ae0 <_ZN9MPL3115A28readTempEv+0x14>
   b4ada:	4620      	mov	r0, r4
   b4adc:	f7ff ff84 	bl	b49e8 <_ZN9MPL3115A213toggleOneShotEv>
{
   b4ae0:	f240 2559 	movw	r5, #601	; 0x259
	while( (IIC_Read(STATUS) & (1<<1)) == 0)
   b4ae4:	2100      	movs	r1, #0
   b4ae6:	4620      	mov	r0, r4
   b4ae8:	f7ff ff26 	bl	b4938 <_ZN9MPL3115A28IIC_ReadEh>
   b4aec:	0782      	lsls	r2, r0, #30
   b4aee:	d408      	bmi.n	b4b02 <_ZN9MPL3115A28readTempEv+0x36>
		if(++counter > 600) return(-999); //Error out after max of 512ms for a read
   b4af0:	3d01      	subs	r5, #1
   b4af2:	d102      	bne.n	b4afa <_ZN9MPL3115A28readTempEv+0x2e>
   b4af4:	ed9f 0a26 	vldr	s0, [pc, #152]	; b4b90 <_ZN9MPL3115A28readTempEv+0xc4>
}
   b4af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		delay(1);
   b4afa:	2001      	movs	r0, #1
   b4afc:	f000 fd50 	bl	b55a0 <delay>
	while( (IIC_Read(STATUS) & (1<<1)) == 0)
   b4b00:	e7f0      	b.n	b4ae4 <_ZN9MPL3115A28readTempEv+0x18>
	_i2cPort->beginTransmission(_I2Caddress);
   b4b02:	7921      	ldrb	r1, [r4, #4]
   b4b04:	6820      	ldr	r0, [r4, #0]
   b4b06:	f001 fa81 	bl	b600c <_ZN7TwoWire17beginTransmissionEh>
	_i2cPort->write(OUT_T_MSB);  // Address of data to get
   b4b0a:	6820      	ldr	r0, [r4, #0]
   b4b0c:	2104      	movs	r1, #4
   b4b0e:	f7ff ff09 	bl	b4924 <_ZN7TwoWire5writeEi.isra.0>
	_i2cPort->endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
   b4b12:	2100      	movs	r1, #0
   b4b14:	6820      	ldr	r0, [r4, #0]
   b4b16:	f001 fa7d 	bl	b6014 <_ZN7TwoWire15endTransmissionEh>
	if (_i2cPort->requestFrom(_I2Caddress, 2) != 2) { // Request two bytes
   b4b1a:	7921      	ldrb	r1, [r4, #4]
   b4b1c:	6820      	ldr	r0, [r4, #0]
   b4b1e:	2202      	movs	r2, #2
   b4b20:	f001 fa71 	bl	b6006 <_ZN7TwoWire11requestFromEhj>
   b4b24:	2802      	cmp	r0, #2
   b4b26:	d1e5      	bne.n	b4af4 <_ZN9MPL3115A28readTempEv+0x28>
	msb = _i2cPort->read();
   b4b28:	6820      	ldr	r0, [r4, #0]
   b4b2a:	6803      	ldr	r3, [r0, #0]
   b4b2c:	695b      	ldr	r3, [r3, #20]
   b4b2e:	4798      	blx	r3
   b4b30:	b2c6      	uxtb	r6, r0
   b4b32:	4607      	mov	r7, r0
	lsb = _i2cPort->read();
   b4b34:	6820      	ldr	r0, [r4, #0]
   b4b36:	6803      	ldr	r3, [r0, #0]
   b4b38:	695b      	ldr	r3, [r3, #20]
   b4b3a:	4798      	blx	r3
   b4b3c:	b2c5      	uxtb	r5, r0
	toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   b4b3e:	4620      	mov	r0, r4
   b4b40:	f7ff ff52 	bl	b49e8 <_ZN9MPL3115A213toggleOneShotEv>
	if(msb > 0x7F)
   b4b44:	063b      	lsls	r3, r7, #24
        foo = ~((msb << 8) + lsb) + 1;  //2’s complement
   b4b46:	bf41      	itttt	mi
   b4b48:	eb05 2506 	addmi.w	r5, r5, r6, lsl #8
   b4b4c:	426d      	negmi	r5, r5
        msb = foo >> 8;
   b4b4e:	f3c5 2607 	ubfxmi	r6, r5, #8, #8
        lsb = foo & 0x00F0; 
   b4b52:	f005 05f0 	andmi.w	r5, r5, #240	; 0xf0
	float templsb = (lsb>>4)/16.0; //temp, fraction of a degree
   b4b56:	ea4f 1015 	mov.w	r0, r5, lsr #4
        negSign = true;
   b4b5a:	bf4c      	ite	mi
   b4b5c:	2401      	movmi	r4, #1
    bool negSign = false;
   b4b5e:	2400      	movpl	r4, #0
	float templsb = (lsb>>4)/16.0; //temp, fraction of a degree
   b4b60:	f002 fe3a 	bl	b77d8 <__aeabi_i2d>
   b4b64:	4b0b      	ldr	r3, [pc, #44]	; (b4b94 <_ZN9MPL3115A28readTempEv+0xc8>)
   b4b66:	2200      	movs	r2, #0
   b4b68:	f002 fea0 	bl	b78ac <__aeabi_dmul>
   b4b6c:	f003 f96e 	bl	b7e4c <__aeabi_d2f>
	float temperature = (float)(msb + templsb);
   b4b70:	ee07 6a90 	vmov	s15, r6
   b4b74:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   b4b78:	ee07 0a90 	vmov	s15, r0
   b4b7c:	ee37 0a80 	vadd.f32	s0, s15, s0
	if (negSign) temperature = 0 - temperature;
   b4b80:	2c00      	cmp	r4, #0
   b4b82:	d0b9      	beq.n	b4af8 <_ZN9MPL3115A28readTempEv+0x2c>
   b4b84:	eddf 7a04 	vldr	s15, [pc, #16]	; b4b98 <_ZN9MPL3115A28readTempEv+0xcc>
   b4b88:	ee37 0ac0 	vsub.f32	s0, s15, s0
   b4b8c:	e7b4      	b.n	b4af8 <_ZN9MPL3115A28readTempEv+0x2c>
   b4b8e:	bf00      	nop
   b4b90:	c479c000 	.word	0xc479c000
   b4b94:	3fb00000 	.word	0x3fb00000
   b4b98:	00000000 	.word	0x00000000

000b4b9c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4b9c:	b508      	push	{r3, lr}
   b4b9e:	4b02      	ldr	r3, [pc, #8]	; (b4ba8 <netdb_freeaddrinfo+0xc>)
   b4ba0:	681b      	ldr	r3, [r3, #0]
   b4ba2:	689b      	ldr	r3, [r3, #8]
   b4ba4:	9301      	str	r3, [sp, #4]
   b4ba6:	bd08      	pop	{r3, pc}
   b4ba8:	00030268 	.word	0x00030268

000b4bac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4bac:	b508      	push	{r3, lr}
   b4bae:	4b02      	ldr	r3, [pc, #8]	; (b4bb8 <netdb_getaddrinfo+0xc>)
   b4bb0:	681b      	ldr	r3, [r3, #0]
   b4bb2:	68db      	ldr	r3, [r3, #12]
   b4bb4:	9301      	str	r3, [sp, #4]
   b4bb6:	bd08      	pop	{r3, pc}
   b4bb8:	00030268 	.word	0x00030268

000b4bbc <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b4bbc:	b508      	push	{r3, lr}
   b4bbe:	4b02      	ldr	r3, [pc, #8]	; (b4bc8 <HAL_Validate_Pin_Function+0xc>)
   b4bc0:	681b      	ldr	r3, [r3, #0]
   b4bc2:	685b      	ldr	r3, [r3, #4]
   b4bc4:	9301      	str	r3, [sp, #4]
   b4bc6:	bd08      	pop	{r3, pc}
   b4bc8:	0003022c 	.word	0x0003022c

000b4bcc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4bcc:	b508      	push	{r3, lr}
   b4bce:	4b02      	ldr	r3, [pc, #8]	; (b4bd8 <HAL_Pin_Mode+0xc>)
   b4bd0:	681b      	ldr	r3, [r3, #0]
   b4bd2:	689b      	ldr	r3, [r3, #8]
   b4bd4:	9301      	str	r3, [sp, #4]
   b4bd6:	bd08      	pop	{r3, pc}
   b4bd8:	0003022c 	.word	0x0003022c

000b4bdc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4bdc:	b508      	push	{r3, lr}
   b4bde:	4b02      	ldr	r3, [pc, #8]	; (b4be8 <HAL_Get_Pin_Mode+0xc>)
   b4be0:	681b      	ldr	r3, [r3, #0]
   b4be2:	68db      	ldr	r3, [r3, #12]
   b4be4:	9301      	str	r3, [sp, #4]
   b4be6:	bd08      	pop	{r3, pc}
   b4be8:	0003022c 	.word	0x0003022c

000b4bec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4bec:	b508      	push	{r3, lr}
   b4bee:	4b02      	ldr	r3, [pc, #8]	; (b4bf8 <HAL_GPIO_Write+0xc>)
   b4bf0:	681b      	ldr	r3, [r3, #0]
   b4bf2:	691b      	ldr	r3, [r3, #16]
   b4bf4:	9301      	str	r3, [sp, #4]
   b4bf6:	bd08      	pop	{r3, pc}
   b4bf8:	0003022c 	.word	0x0003022c

000b4bfc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b4bfc:	b508      	push	{r3, lr}
   b4bfe:	4b02      	ldr	r3, [pc, #8]	; (b4c08 <HAL_GPIO_Read+0xc>)
   b4c00:	681b      	ldr	r3, [r3, #0]
   b4c02:	695b      	ldr	r3, [r3, #20]
   b4c04:	9301      	str	r3, [sp, #4]
   b4c06:	bd08      	pop	{r3, pc}
   b4c08:	0003022c 	.word	0x0003022c

000b4c0c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4c0c:	b508      	push	{r3, lr}
   b4c0e:	4b02      	ldr	r3, [pc, #8]	; (b4c18 <hal_adc_read+0xc>)
   b4c10:	681b      	ldr	r3, [r3, #0]
   b4c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c14:	9301      	str	r3, [sp, #4]
   b4c16:	bd08      	pop	{r3, pc}
   b4c18:	0003022c 	.word	0x0003022c

000b4c1c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4c1c:	b508      	push	{r3, lr}
   b4c1e:	4b02      	ldr	r3, [pc, #8]	; (b4c28 <HAL_RNG_GetRandomNumber+0xc>)
   b4c20:	681b      	ldr	r3, [r3, #0]
   b4c22:	685b      	ldr	r3, [r3, #4]
   b4c24:	9301      	str	r3, [sp, #4]
   b4c26:	bd08      	pop	{r3, pc}
   b4c28:	00030218 	.word	0x00030218

000b4c2c <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4c2c:	b508      	push	{r3, lr}
   b4c2e:	4b02      	ldr	r3, [pc, #8]	; (b4c38 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4c30:	681b      	ldr	r3, [r3, #0]
   b4c32:	695b      	ldr	r3, [r3, #20]
   b4c34:	9301      	str	r3, [sp, #4]
   b4c36:	bd08      	pop	{r3, pc}
   b4c38:	00030218 	.word	0x00030218

000b4c3c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b4c3c:	b508      	push	{r3, lr}
   b4c3e:	4b02      	ldr	r3, [pc, #8]	; (b4c48 <hal_rtc_time_is_valid+0xc>)
   b4c40:	681b      	ldr	r3, [r3, #0]
   b4c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4c44:	9301      	str	r3, [sp, #4]
   b4c46:	bd08      	pop	{r3, pc}
   b4c48:	00030218 	.word	0x00030218

000b4c4c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b4c4c:	b508      	push	{r3, lr}
   b4c4e:	4b02      	ldr	r3, [pc, #8]	; (b4c58 <hal_rtc_get_time+0xc>)
   b4c50:	681b      	ldr	r3, [r3, #0]
   b4c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b4c54:	9301      	str	r3, [sp, #4]
   b4c56:	bd08      	pop	{r3, pc}
   b4c58:	00030218 	.word	0x00030218

000b4c5c <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b4c5c:	b508      	push	{r3, lr}
   b4c5e:	4b02      	ldr	r3, [pc, #8]	; (b4c68 <os_thread_yield+0xc>)
   b4c60:	681b      	ldr	r3, [r3, #0]
   b4c62:	68db      	ldr	r3, [r3, #12]
   b4c64:	9301      	str	r3, [sp, #4]
   b4c66:	bd08      	pop	{r3, pc}
   b4c68:	00030248 	.word	0x00030248

000b4c6c <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b4c6c:	b508      	push	{r3, lr}
   b4c6e:	4b02      	ldr	r3, [pc, #8]	; (b4c78 <os_thread_scheduling+0xc>)
   b4c70:	681b      	ldr	r3, [r3, #0]
   b4c72:	69db      	ldr	r3, [r3, #28]
   b4c74:	9301      	str	r3, [sp, #4]
   b4c76:	bd08      	pop	{r3, pc}
   b4c78:	00030248 	.word	0x00030248

000b4c7c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b4c7c:	b508      	push	{r3, lr}
   b4c7e:	4b02      	ldr	r3, [pc, #8]	; (b4c88 <os_timer_create+0xc>)
   b4c80:	681b      	ldr	r3, [r3, #0]
   b4c82:	6a1b      	ldr	r3, [r3, #32]
   b4c84:	9301      	str	r3, [sp, #4]
   b4c86:	bd08      	pop	{r3, pc}
   b4c88:	00030248 	.word	0x00030248

000b4c8c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b4c8c:	b508      	push	{r3, lr}
   b4c8e:	4b02      	ldr	r3, [pc, #8]	; (b4c98 <os_timer_destroy+0xc>)
   b4c90:	681b      	ldr	r3, [r3, #0]
   b4c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4c94:	9301      	str	r3, [sp, #4]
   b4c96:	bd08      	pop	{r3, pc}
   b4c98:	00030248 	.word	0x00030248

000b4c9c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b4c9c:	b508      	push	{r3, lr}
   b4c9e:	4b02      	ldr	r3, [pc, #8]	; (b4ca8 <os_timer_get_id+0xc>)
   b4ca0:	681b      	ldr	r3, [r3, #0]
   b4ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4ca4:	9301      	str	r3, [sp, #4]
   b4ca6:	bd08      	pop	{r3, pc}
   b4ca8:	00030248 	.word	0x00030248

000b4cac <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b4cac:	b508      	push	{r3, lr}
   b4cae:	4b02      	ldr	r3, [pc, #8]	; (b4cb8 <os_timer_change+0xc>)
   b4cb0:	681b      	ldr	r3, [r3, #0]
   b4cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4cb4:	9301      	str	r3, [sp, #4]
   b4cb6:	bd08      	pop	{r3, pc}
   b4cb8:	00030248 	.word	0x00030248

000b4cbc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4cbc:	b508      	push	{r3, lr}
   b4cbe:	4b02      	ldr	r3, [pc, #8]	; (b4cc8 <os_mutex_recursive_create+0xc>)
   b4cc0:	681b      	ldr	r3, [r3, #0]
   b4cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4cc4:	9301      	str	r3, [sp, #4]
   b4cc6:	bd08      	pop	{r3, pc}
   b4cc8:	00030248 	.word	0x00030248

000b4ccc <os_timer_is_active>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))

DYNALIB_FN(22, hal_concurrent, os_timer_is_active, int(os_timer_t, void*))
   b4ccc:	b508      	push	{r3, lr}
   b4cce:	4b02      	ldr	r3, [pc, #8]	; (b4cd8 <os_timer_is_active+0xc>)
   b4cd0:	681b      	ldr	r3, [r3, #0]
   b4cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4cd4:	9301      	str	r3, [sp, #4]
   b4cd6:	bd08      	pop	{r3, pc}
   b4cd8:	00030248 	.word	0x00030248

000b4cdc <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b4cdc:	b508      	push	{r3, lr}
   b4cde:	4b02      	ldr	r3, [pc, #8]	; (b4ce8 <os_timer_set_id+0xc>)
   b4ce0:	681b      	ldr	r3, [r3, #0]
   b4ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b4ce4:	9301      	str	r3, [sp, #4]
   b4ce6:	bd08      	pop	{r3, pc}
   b4ce8:	00030248 	.word	0x00030248

000b4cec <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4cec:	b508      	push	{r3, lr}
   b4cee:	4b02      	ldr	r3, [pc, #8]	; (b4cf8 <inet_inet_ntop+0xc>)
   b4cf0:	681b      	ldr	r3, [r3, #0]
   b4cf2:	695b      	ldr	r3, [r3, #20]
   b4cf4:	9301      	str	r3, [sp, #4]
   b4cf6:	bd08      	pop	{r3, pc}
   b4cf8:	00030264 	.word	0x00030264

000b4cfc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4cfc:	b508      	push	{r3, lr}
   b4cfe:	4b02      	ldr	r3, [pc, #8]	; (b4d08 <hal_usart_write+0xc>)
   b4d00:	681b      	ldr	r3, [r3, #0]
   b4d02:	68db      	ldr	r3, [r3, #12]
   b4d04:	9301      	str	r3, [sp, #4]
   b4d06:	bd08      	pop	{r3, pc}
   b4d08:	0003023c 	.word	0x0003023c

000b4d0c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4d0c:	b508      	push	{r3, lr}
   b4d0e:	4b02      	ldr	r3, [pc, #8]	; (b4d18 <hal_usart_available+0xc>)
   b4d10:	681b      	ldr	r3, [r3, #0]
   b4d12:	691b      	ldr	r3, [r3, #16]
   b4d14:	9301      	str	r3, [sp, #4]
   b4d16:	bd08      	pop	{r3, pc}
   b4d18:	0003023c 	.word	0x0003023c

000b4d1c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4d1c:	b508      	push	{r3, lr}
   b4d1e:	4b02      	ldr	r3, [pc, #8]	; (b4d28 <hal_usart_read+0xc>)
   b4d20:	681b      	ldr	r3, [r3, #0]
   b4d22:	695b      	ldr	r3, [r3, #20]
   b4d24:	9301      	str	r3, [sp, #4]
   b4d26:	bd08      	pop	{r3, pc}
   b4d28:	0003023c 	.word	0x0003023c

000b4d2c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4d2c:	b508      	push	{r3, lr}
   b4d2e:	4b02      	ldr	r3, [pc, #8]	; (b4d38 <hal_usart_peek+0xc>)
   b4d30:	681b      	ldr	r3, [r3, #0]
   b4d32:	699b      	ldr	r3, [r3, #24]
   b4d34:	9301      	str	r3, [sp, #4]
   b4d36:	bd08      	pop	{r3, pc}
   b4d38:	0003023c 	.word	0x0003023c

000b4d3c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4d3c:	b508      	push	{r3, lr}
   b4d3e:	4b02      	ldr	r3, [pc, #8]	; (b4d48 <hal_usart_flush+0xc>)
   b4d40:	681b      	ldr	r3, [r3, #0]
   b4d42:	69db      	ldr	r3, [r3, #28]
   b4d44:	9301      	str	r3, [sp, #4]
   b4d46:	bd08      	pop	{r3, pc}
   b4d48:	0003023c 	.word	0x0003023c

000b4d4c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4d4c:	b508      	push	{r3, lr}
   b4d4e:	4b02      	ldr	r3, [pc, #8]	; (b4d58 <hal_usart_is_enabled+0xc>)
   b4d50:	681b      	ldr	r3, [r3, #0]
   b4d52:	6a1b      	ldr	r3, [r3, #32]
   b4d54:	9301      	str	r3, [sp, #4]
   b4d56:	bd08      	pop	{r3, pc}
   b4d58:	0003023c 	.word	0x0003023c

000b4d5c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4d5c:	b508      	push	{r3, lr}
   b4d5e:	4b02      	ldr	r3, [pc, #8]	; (b4d68 <hal_usart_available_data_for_write+0xc>)
   b4d60:	681b      	ldr	r3, [r3, #0]
   b4d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4d64:	9301      	str	r3, [sp, #4]
   b4d66:	bd08      	pop	{r3, pc}
   b4d68:	0003023c 	.word	0x0003023c

000b4d6c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4d6c:	b508      	push	{r3, lr}
   b4d6e:	4b02      	ldr	r3, [pc, #8]	; (b4d78 <hal_usart_init_ex+0xc>)
   b4d70:	681b      	ldr	r3, [r3, #0]
   b4d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d74:	9301      	str	r3, [sp, #4]
   b4d76:	bd08      	pop	{r3, pc}
   b4d78:	0003023c 	.word	0x0003023c

000b4d7c <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4d7c:	b508      	push	{r3, lr}
   b4d7e:	4b02      	ldr	r3, [pc, #8]	; (b4d88 <hal_i2c_begin+0xc>)
   b4d80:	681b      	ldr	r3, [r3, #0]
   b4d82:	68db      	ldr	r3, [r3, #12]
   b4d84:	9301      	str	r3, [sp, #4]
   b4d86:	bd08      	pop	{r3, pc}
   b4d88:	00030228 	.word	0x00030228

000b4d8c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4d8c:	b508      	push	{r3, lr}
   b4d8e:	4b02      	ldr	r3, [pc, #8]	; (b4d98 <hal_i2c_begin_transmission+0xc>)
   b4d90:	681b      	ldr	r3, [r3, #0]
   b4d92:	699b      	ldr	r3, [r3, #24]
   b4d94:	9301      	str	r3, [sp, #4]
   b4d96:	bd08      	pop	{r3, pc}
   b4d98:	00030228 	.word	0x00030228

000b4d9c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4d9c:	b508      	push	{r3, lr}
   b4d9e:	4b02      	ldr	r3, [pc, #8]	; (b4da8 <hal_i2c_end_transmission+0xc>)
   b4da0:	681b      	ldr	r3, [r3, #0]
   b4da2:	69db      	ldr	r3, [r3, #28]
   b4da4:	9301      	str	r3, [sp, #4]
   b4da6:	bd08      	pop	{r3, pc}
   b4da8:	00030228 	.word	0x00030228

000b4dac <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4dac:	b508      	push	{r3, lr}
   b4dae:	4b02      	ldr	r3, [pc, #8]	; (b4db8 <hal_i2c_write+0xc>)
   b4db0:	681b      	ldr	r3, [r3, #0]
   b4db2:	6a1b      	ldr	r3, [r3, #32]
   b4db4:	9301      	str	r3, [sp, #4]
   b4db6:	bd08      	pop	{r3, pc}
   b4db8:	00030228 	.word	0x00030228

000b4dbc <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4dbc:	b508      	push	{r3, lr}
   b4dbe:	4b02      	ldr	r3, [pc, #8]	; (b4dc8 <hal_i2c_available+0xc>)
   b4dc0:	681b      	ldr	r3, [r3, #0]
   b4dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4dc4:	9301      	str	r3, [sp, #4]
   b4dc6:	bd08      	pop	{r3, pc}
   b4dc8:	00030228 	.word	0x00030228

000b4dcc <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4dcc:	b508      	push	{r3, lr}
   b4dce:	4b02      	ldr	r3, [pc, #8]	; (b4dd8 <hal_i2c_read+0xc>)
   b4dd0:	681b      	ldr	r3, [r3, #0]
   b4dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4dd4:	9301      	str	r3, [sp, #4]
   b4dd6:	bd08      	pop	{r3, pc}
   b4dd8:	00030228 	.word	0x00030228

000b4ddc <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4ddc:	b508      	push	{r3, lr}
   b4dde:	4b02      	ldr	r3, [pc, #8]	; (b4de8 <hal_i2c_peek+0xc>)
   b4de0:	681b      	ldr	r3, [r3, #0]
   b4de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4de4:	9301      	str	r3, [sp, #4]
   b4de6:	bd08      	pop	{r3, pc}
   b4de8:	00030228 	.word	0x00030228

000b4dec <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4dec:	b508      	push	{r3, lr}
   b4dee:	4b02      	ldr	r3, [pc, #8]	; (b4df8 <hal_i2c_flush+0xc>)
   b4df0:	681b      	ldr	r3, [r3, #0]
   b4df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4df4:	9301      	str	r3, [sp, #4]
   b4df6:	bd08      	pop	{r3, pc}
   b4df8:	00030228 	.word	0x00030228

000b4dfc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4dfc:	b508      	push	{r3, lr}
   b4dfe:	4b02      	ldr	r3, [pc, #8]	; (b4e08 <hal_i2c_is_enabled+0xc>)
   b4e00:	681b      	ldr	r3, [r3, #0]
   b4e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4e04:	9301      	str	r3, [sp, #4]
   b4e06:	bd08      	pop	{r3, pc}
   b4e08:	00030228 	.word	0x00030228

000b4e0c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4e0c:	b508      	push	{r3, lr}
   b4e0e:	4b02      	ldr	r3, [pc, #8]	; (b4e18 <hal_i2c_init+0xc>)
   b4e10:	681b      	ldr	r3, [r3, #0]
   b4e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e14:	9301      	str	r3, [sp, #4]
   b4e16:	bd08      	pop	{r3, pc}
   b4e18:	00030228 	.word	0x00030228

000b4e1c <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4e1c:	b508      	push	{r3, lr}
   b4e1e:	4b02      	ldr	r3, [pc, #8]	; (b4e28 <hal_i2c_request_ex+0xc>)
   b4e20:	681b      	ldr	r3, [r3, #0]
   b4e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4e24:	9301      	str	r3, [sp, #4]
   b4e26:	bd08      	pop	{r3, pc}
   b4e28:	00030228 	.word	0x00030228

000b4e2c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4e2c:	b508      	push	{r3, lr}
   b4e2e:	4b02      	ldr	r3, [pc, #8]	; (b4e38 <hal_spi_init+0xc>)
   b4e30:	681b      	ldr	r3, [r3, #0]
   b4e32:	69db      	ldr	r3, [r3, #28]
   b4e34:	9301      	str	r3, [sp, #4]
   b4e36:	bd08      	pop	{r3, pc}
   b4e38:	00030230 	.word	0x00030230

000b4e3c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4e3c:	b508      	push	{r3, lr}
   b4e3e:	4b02      	ldr	r3, [pc, #8]	; (b4e48 <hal_spi_is_enabled+0xc>)
   b4e40:	681b      	ldr	r3, [r3, #0]
   b4e42:	6a1b      	ldr	r3, [r3, #32]
   b4e44:	9301      	str	r3, [sp, #4]
   b4e46:	bd08      	pop	{r3, pc}
   b4e48:	00030230 	.word	0x00030230

000b4e4c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4e4c:	b508      	push	{r3, lr}
   b4e4e:	4b02      	ldr	r3, [pc, #8]	; (b4e58 <HAL_USB_USART_Init+0xc>)
   b4e50:	681b      	ldr	r3, [r3, #0]
   b4e52:	681b      	ldr	r3, [r3, #0]
   b4e54:	9301      	str	r3, [sp, #4]
   b4e56:	bd08      	pop	{r3, pc}
   b4e58:	0003024c 	.word	0x0003024c

000b4e5c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4e5c:	b508      	push	{r3, lr}
   b4e5e:	4b02      	ldr	r3, [pc, #8]	; (b4e68 <HAL_USB_USART_Begin+0xc>)
   b4e60:	681b      	ldr	r3, [r3, #0]
   b4e62:	685b      	ldr	r3, [r3, #4]
   b4e64:	9301      	str	r3, [sp, #4]
   b4e66:	bd08      	pop	{r3, pc}
   b4e68:	0003024c 	.word	0x0003024c

000b4e6c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4e6c:	b508      	push	{r3, lr}
   b4e6e:	4b02      	ldr	r3, [pc, #8]	; (b4e78 <HAL_USB_USART_Available_Data+0xc>)
   b4e70:	681b      	ldr	r3, [r3, #0]
   b4e72:	691b      	ldr	r3, [r3, #16]
   b4e74:	9301      	str	r3, [sp, #4]
   b4e76:	bd08      	pop	{r3, pc}
   b4e78:	0003024c 	.word	0x0003024c

000b4e7c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4e7c:	b508      	push	{r3, lr}
   b4e7e:	4b02      	ldr	r3, [pc, #8]	; (b4e88 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4e80:	681b      	ldr	r3, [r3, #0]
   b4e82:	695b      	ldr	r3, [r3, #20]
   b4e84:	9301      	str	r3, [sp, #4]
   b4e86:	bd08      	pop	{r3, pc}
   b4e88:	0003024c 	.word	0x0003024c

000b4e8c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4e8c:	b508      	push	{r3, lr}
   b4e8e:	4b02      	ldr	r3, [pc, #8]	; (b4e98 <HAL_USB_USART_Receive_Data+0xc>)
   b4e90:	681b      	ldr	r3, [r3, #0]
   b4e92:	699b      	ldr	r3, [r3, #24]
   b4e94:	9301      	str	r3, [sp, #4]
   b4e96:	bd08      	pop	{r3, pc}
   b4e98:	0003024c 	.word	0x0003024c

000b4e9c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4e9c:	b508      	push	{r3, lr}
   b4e9e:	4b02      	ldr	r3, [pc, #8]	; (b4ea8 <HAL_USB_USART_Send_Data+0xc>)
   b4ea0:	681b      	ldr	r3, [r3, #0]
   b4ea2:	69db      	ldr	r3, [r3, #28]
   b4ea4:	9301      	str	r3, [sp, #4]
   b4ea6:	bd08      	pop	{r3, pc}
   b4ea8:	0003024c 	.word	0x0003024c

000b4eac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4eac:	b508      	push	{r3, lr}
   b4eae:	4b02      	ldr	r3, [pc, #8]	; (b4eb8 <HAL_USB_USART_Flush_Data+0xc>)
   b4eb0:	681b      	ldr	r3, [r3, #0]
   b4eb2:	6a1b      	ldr	r3, [r3, #32]
   b4eb4:	9301      	str	r3, [sp, #4]
   b4eb6:	bd08      	pop	{r3, pc}
   b4eb8:	0003024c 	.word	0x0003024c

000b4ebc <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b4ebc:	b508      	push	{r3, lr}
   b4ebe:	4b02      	ldr	r3, [pc, #8]	; (b4ec8 <system_mode+0xc>)
   b4ec0:	681b      	ldr	r3, [r3, #0]
   b4ec2:	681b      	ldr	r3, [r3, #0]
   b4ec4:	9301      	str	r3, [sp, #4]
   b4ec6:	bd08      	pop	{r3, pc}
   b4ec8:	00030220 	.word	0x00030220

000b4ecc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4ecc:	b508      	push	{r3, lr}
   b4ece:	4b02      	ldr	r3, [pc, #8]	; (b4ed8 <set_system_mode+0xc>)
   b4ed0:	681b      	ldr	r3, [r3, #0]
   b4ed2:	685b      	ldr	r3, [r3, #4]
   b4ed4:	9301      	str	r3, [sp, #4]
   b4ed6:	bd08      	pop	{r3, pc}
   b4ed8:	00030220 	.word	0x00030220

000b4edc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4edc:	b508      	push	{r3, lr}
   b4ede:	4b02      	ldr	r3, [pc, #8]	; (b4ee8 <system_delay_ms+0xc>)
   b4ee0:	681b      	ldr	r3, [r3, #0]
   b4ee2:	695b      	ldr	r3, [r3, #20]
   b4ee4:	9301      	str	r3, [sp, #4]
   b4ee6:	bd08      	pop	{r3, pc}
   b4ee8:	00030220 	.word	0x00030220

000b4eec <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4eec:	b508      	push	{r3, lr}
   b4eee:	4b02      	ldr	r3, [pc, #8]	; (b4ef8 <application_thread_current+0xc>)
   b4ef0:	681b      	ldr	r3, [r3, #0]
   b4ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4ef4:	9301      	str	r3, [sp, #4]
   b4ef6:	bd08      	pop	{r3, pc}
   b4ef8:	00030220 	.word	0x00030220

000b4efc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4efc:	b508      	push	{r3, lr}
   b4efe:	4b02      	ldr	r3, [pc, #8]	; (b4f08 <application_thread_invoke+0xc>)
   b4f00:	681b      	ldr	r3, [r3, #0]
   b4f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4f04:	9301      	str	r3, [sp, #4]
   b4f06:	bd08      	pop	{r3, pc}
   b4f08:	00030220 	.word	0x00030220

000b4f0c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b4f0c:	b508      	push	{r3, lr}
   b4f0e:	4b02      	ldr	r3, [pc, #8]	; (b4f18 <system_thread_get_state+0xc>)
   b4f10:	681b      	ldr	r3, [r3, #0]
   b4f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4f14:	9301      	str	r3, [sp, #4]
   b4f16:	bd08      	pop	{r3, pc}
   b4f18:	00030220 	.word	0x00030220

000b4f1c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4f1c:	b508      	push	{r3, lr}
   b4f1e:	4b03      	ldr	r3, [pc, #12]	; (b4f2c <system_ctrl_set_app_request_handler+0x10>)
   b4f20:	681b      	ldr	r3, [r3, #0]
   b4f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4f26:	9301      	str	r3, [sp, #4]
   b4f28:	bd08      	pop	{r3, pc}
   b4f2a:	0000      	.short	0x0000
   b4f2c:	00030220 	.word	0x00030220

000b4f30 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4f30:	b508      	push	{r3, lr}
   b4f32:	4b03      	ldr	r3, [pc, #12]	; (b4f40 <system_ctrl_set_result+0x10>)
   b4f34:	681b      	ldr	r3, [r3, #0]
   b4f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4f3a:	9301      	str	r3, [sp, #4]
   b4f3c:	bd08      	pop	{r3, pc}
   b4f3e:	0000      	.short	0x0000
   b4f40:	00030220 	.word	0x00030220

000b4f44 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f44:	b508      	push	{r3, lr}
   b4f46:	4b02      	ldr	r3, [pc, #8]	; (b4f50 <network_connect+0xc>)
   b4f48:	681b      	ldr	r3, [r3, #0]
   b4f4a:	685b      	ldr	r3, [r3, #4]
   b4f4c:	9301      	str	r3, [sp, #4]
   b4f4e:	bd08      	pop	{r3, pc}
   b4f50:	00030240 	.word	0x00030240

000b4f54 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4f54:	b508      	push	{r3, lr}
   b4f56:	4b02      	ldr	r3, [pc, #8]	; (b4f60 <network_connecting+0xc>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	689b      	ldr	r3, [r3, #8]
   b4f5c:	9301      	str	r3, [sp, #4]
   b4f5e:	bd08      	pop	{r3, pc}
   b4f60:	00030240 	.word	0x00030240

000b4f64 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4f64:	b508      	push	{r3, lr}
   b4f66:	4b02      	ldr	r3, [pc, #8]	; (b4f70 <network_disconnect+0xc>)
   b4f68:	681b      	ldr	r3, [r3, #0]
   b4f6a:	68db      	ldr	r3, [r3, #12]
   b4f6c:	9301      	str	r3, [sp, #4]
   b4f6e:	bd08      	pop	{r3, pc}
   b4f70:	00030240 	.word	0x00030240

000b4f74 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4f74:	b508      	push	{r3, lr}
   b4f76:	4b02      	ldr	r3, [pc, #8]	; (b4f80 <network_ready+0xc>)
   b4f78:	681b      	ldr	r3, [r3, #0]
   b4f7a:	691b      	ldr	r3, [r3, #16]
   b4f7c:	9301      	str	r3, [sp, #4]
   b4f7e:	bd08      	pop	{r3, pc}
   b4f80:	00030240 	.word	0x00030240

000b4f84 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f84:	b508      	push	{r3, lr}
   b4f86:	4b02      	ldr	r3, [pc, #8]	; (b4f90 <network_on+0xc>)
   b4f88:	681b      	ldr	r3, [r3, #0]
   b4f8a:	695b      	ldr	r3, [r3, #20]
   b4f8c:	9301      	str	r3, [sp, #4]
   b4f8e:	bd08      	pop	{r3, pc}
   b4f90:	00030240 	.word	0x00030240

000b4f94 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f94:	b508      	push	{r3, lr}
   b4f96:	4b02      	ldr	r3, [pc, #8]	; (b4fa0 <network_off+0xc>)
   b4f98:	681b      	ldr	r3, [r3, #0]
   b4f9a:	699b      	ldr	r3, [r3, #24]
   b4f9c:	9301      	str	r3, [sp, #4]
   b4f9e:	bd08      	pop	{r3, pc}
   b4fa0:	00030240 	.word	0x00030240

000b4fa4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4fa4:	b508      	push	{r3, lr}
   b4fa6:	4b02      	ldr	r3, [pc, #8]	; (b4fb0 <network_listen+0xc>)
   b4fa8:	681b      	ldr	r3, [r3, #0]
   b4faa:	69db      	ldr	r3, [r3, #28]
   b4fac:	9301      	str	r3, [sp, #4]
   b4fae:	bd08      	pop	{r3, pc}
   b4fb0:	00030240 	.word	0x00030240

000b4fb4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4fb4:	b508      	push	{r3, lr}
   b4fb6:	4b02      	ldr	r3, [pc, #8]	; (b4fc0 <network_listening+0xc>)
   b4fb8:	681b      	ldr	r3, [r3, #0]
   b4fba:	6a1b      	ldr	r3, [r3, #32]
   b4fbc:	9301      	str	r3, [sp, #4]
   b4fbe:	bd08      	pop	{r3, pc}
   b4fc0:	00030240 	.word	0x00030240

000b4fc4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4fc4:	b508      	push	{r3, lr}
   b4fc6:	4b02      	ldr	r3, [pc, #8]	; (b4fd0 <network_set_listen_timeout+0xc>)
   b4fc8:	681b      	ldr	r3, [r3, #0]
   b4fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4fcc:	9301      	str	r3, [sp, #4]
   b4fce:	bd08      	pop	{r3, pc}
   b4fd0:	00030240 	.word	0x00030240

000b4fd4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4fd4:	b508      	push	{r3, lr}
   b4fd6:	4b02      	ldr	r3, [pc, #8]	; (b4fe0 <network_get_listen_timeout+0xc>)
   b4fd8:	681b      	ldr	r3, [r3, #0]
   b4fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4fdc:	9301      	str	r3, [sp, #4]
   b4fde:	bd08      	pop	{r3, pc}
   b4fe0:	00030240 	.word	0x00030240

000b4fe4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4fe4:	b508      	push	{r3, lr}
   b4fe6:	4b02      	ldr	r3, [pc, #8]	; (b4ff0 <network_is_on+0xc>)
   b4fe8:	681b      	ldr	r3, [r3, #0]
   b4fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4fec:	9301      	str	r3, [sp, #4]
   b4fee:	bd08      	pop	{r3, pc}
   b4ff0:	00030240 	.word	0x00030240

000b4ff4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4ff4:	b508      	push	{r3, lr}
   b4ff6:	4b02      	ldr	r3, [pc, #8]	; (b5000 <network_is_off+0xc>)
   b4ff8:	681b      	ldr	r3, [r3, #0]
   b4ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4ffc:	9301      	str	r3, [sp, #4]
   b4ffe:	bd08      	pop	{r3, pc}
   b5000:	00030240 	.word	0x00030240

000b5004 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b5004:	b508      	push	{r3, lr}
   b5006:	4b02      	ldr	r3, [pc, #8]	; (b5010 <spark_function+0xc>)
   b5008:	681b      	ldr	r3, [r3, #0]
   b500a:	685b      	ldr	r3, [r3, #4]
   b500c:	9301      	str	r3, [sp, #4]
   b500e:	bd08      	pop	{r3, pc}
   b5010:	00030244 	.word	0x00030244

000b5014 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5014:	b508      	push	{r3, lr}
   b5016:	4b02      	ldr	r3, [pc, #8]	; (b5020 <spark_process+0xc>)
   b5018:	681b      	ldr	r3, [r3, #0]
   b501a:	689b      	ldr	r3, [r3, #8]
   b501c:	9301      	str	r3, [sp, #4]
   b501e:	bd08      	pop	{r3, pc}
   b5020:	00030244 	.word	0x00030244

000b5024 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5024:	b508      	push	{r3, lr}
   b5026:	4b02      	ldr	r3, [pc, #8]	; (b5030 <spark_cloud_flag_connected+0xc>)
   b5028:	681b      	ldr	r3, [r3, #0]
   b502a:	695b      	ldr	r3, [r3, #20]
   b502c:	9301      	str	r3, [sp, #4]
   b502e:	bd08      	pop	{r3, pc}
   b5030:	00030244 	.word	0x00030244

000b5034 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b5034:	b508      	push	{r3, lr}
   b5036:	4b02      	ldr	r3, [pc, #8]	; (b5040 <spark_send_event+0xc>)
   b5038:	681b      	ldr	r3, [r3, #0]
   b503a:	6a1b      	ldr	r3, [r3, #32]
   b503c:	9301      	str	r3, [sp, #4]
   b503e:	bd08      	pop	{r3, pc}
   b5040:	00030244 	.word	0x00030244

000b5044 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b5044:	b508      	push	{r3, lr}
   b5046:	4b02      	ldr	r3, [pc, #8]	; (b5050 <spark_sync_time+0xc>)
   b5048:	681b      	ldr	r3, [r3, #0]
   b504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b504c:	9301      	str	r3, [sp, #4]
   b504e:	bd08      	pop	{r3, pc}
   b5050:	00030244 	.word	0x00030244

000b5054 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b5054:	b508      	push	{r3, lr}
   b5056:	4b02      	ldr	r3, [pc, #8]	; (b5060 <spark_sync_time_pending+0xc>)
   b5058:	681b      	ldr	r3, [r3, #0]
   b505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b505c:	9301      	str	r3, [sp, #4]
   b505e:	bd08      	pop	{r3, pc}
   b5060:	00030244 	.word	0x00030244

000b5064 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5064:	b508      	push	{r3, lr}
   b5066:	4b02      	ldr	r3, [pc, #8]	; (b5070 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5068:	681b      	ldr	r3, [r3, #0]
   b506a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b506c:	9301      	str	r3, [sp, #4]
   b506e:	bd08      	pop	{r3, pc}
   b5070:	00030244 	.word	0x00030244

000b5074 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5074:	b508      	push	{r3, lr}
   b5076:	4b02      	ldr	r3, [pc, #8]	; (b5080 <malloc+0xc>)
   b5078:	681b      	ldr	r3, [r3, #0]
   b507a:	681b      	ldr	r3, [r3, #0]
   b507c:	9301      	str	r3, [sp, #4]
   b507e:	bd08      	pop	{r3, pc}
   b5080:	0003021c 	.word	0x0003021c

000b5084 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5084:	b508      	push	{r3, lr}
   b5086:	4b02      	ldr	r3, [pc, #8]	; (b5090 <free+0xc>)
   b5088:	681b      	ldr	r3, [r3, #0]
   b508a:	685b      	ldr	r3, [r3, #4]
   b508c:	9301      	str	r3, [sp, #4]
   b508e:	bd08      	pop	{r3, pc}
   b5090:	0003021c 	.word	0x0003021c

000b5094 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5094:	b508      	push	{r3, lr}
   b5096:	4b02      	ldr	r3, [pc, #8]	; (b50a0 <realloc+0xc>)
   b5098:	681b      	ldr	r3, [r3, #0]
   b509a:	689b      	ldr	r3, [r3, #8]
   b509c:	9301      	str	r3, [sp, #4]
   b509e:	bd08      	pop	{r3, pc}
   b50a0:	0003021c 	.word	0x0003021c

000b50a4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b50a4:	b508      	push	{r3, lr}
   b50a6:	4b02      	ldr	r3, [pc, #8]	; (b50b0 <vsnprintf+0xc>)
   b50a8:	681b      	ldr	r3, [r3, #0]
   b50aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b50ac:	9301      	str	r3, [sp, #4]
   b50ae:	bd08      	pop	{r3, pc}
   b50b0:	0003021c 	.word	0x0003021c

000b50b4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b50b4:	b508      	push	{r3, lr}
   b50b6:	4b02      	ldr	r3, [pc, #8]	; (b50c0 <abort+0xc>)
   b50b8:	681b      	ldr	r3, [r3, #0]
   b50ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b50bc:	9301      	str	r3, [sp, #4]
   b50be:	bd08      	pop	{r3, pc}
   b50c0:	0003021c 	.word	0x0003021c

000b50c4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b50c4:	b508      	push	{r3, lr}
   b50c6:	4b02      	ldr	r3, [pc, #8]	; (b50d0 <_malloc_r+0xc>)
   b50c8:	681b      	ldr	r3, [r3, #0]
   b50ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b50cc:	9301      	str	r3, [sp, #4]
   b50ce:	bd08      	pop	{r3, pc}
   b50d0:	0003021c 	.word	0x0003021c

000b50d4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b50d4:	b508      	push	{r3, lr}
   b50d6:	4b02      	ldr	r3, [pc, #8]	; (b50e0 <__errno+0xc>)
   b50d8:	681b      	ldr	r3, [r3, #0]
   b50da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b50dc:	9301      	str	r3, [sp, #4]
   b50de:	bd08      	pop	{r3, pc}
   b50e0:	0003021c 	.word	0x0003021c

000b50e4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b50e4:	b508      	push	{r3, lr}
   b50e6:	4b02      	ldr	r3, [pc, #8]	; (b50f0 <__assert_func+0xc>)
   b50e8:	681b      	ldr	r3, [r3, #0]
   b50ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b50ec:	9301      	str	r3, [sp, #4]
   b50ee:	bd08      	pop	{r3, pc}
   b50f0:	0003021c 	.word	0x0003021c

000b50f4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b50f4:	b508      	push	{r3, lr}
   b50f6:	4b02      	ldr	r3, [pc, #8]	; (b5100 <newlib_impure_ptr_callback+0xc>)
   b50f8:	681b      	ldr	r3, [r3, #0]
   b50fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b50fc:	9301      	str	r3, [sp, #4]
   b50fe:	bd08      	pop	{r3, pc}
   b5100:	0003021c 	.word	0x0003021c

000b5104 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b5104:	b508      	push	{r3, lr}
   b5106:	4b02      	ldr	r3, [pc, #8]	; (b5110 <localtime_r+0xc>)
   b5108:	681b      	ldr	r3, [r3, #0]
   b510a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b510c:	9301      	str	r3, [sp, #4]
   b510e:	bd08      	pop	{r3, pc}
   b5110:	0003021c 	.word	0x0003021c

000b5114 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5114:	2200      	movs	r2, #0
   b5116:	6840      	ldr	r0, [r0, #4]
   b5118:	4611      	mov	r1, r2
   b511a:	f7ff bf4b 	b.w	b4fb4 <network_listening>

000b511e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b511e:	2200      	movs	r2, #0
   b5120:	6840      	ldr	r0, [r0, #4]
   b5122:	4611      	mov	r1, r2
   b5124:	f7ff bf56 	b.w	b4fd4 <network_get_listen_timeout>

000b5128 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5128:	6840      	ldr	r0, [r0, #4]
   b512a:	2200      	movs	r2, #0
   b512c:	f7ff bf4a 	b.w	b4fc4 <network_set_listen_timeout>

000b5130 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5130:	6840      	ldr	r0, [r0, #4]
   b5132:	2200      	movs	r2, #0
   b5134:	f081 0101 	eor.w	r1, r1, #1
   b5138:	f7ff bf34 	b.w	b4fa4 <network_listen>

000b513c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b513c:	2300      	movs	r3, #0
   b513e:	6840      	ldr	r0, [r0, #4]
   b5140:	461a      	mov	r2, r3
   b5142:	4619      	mov	r1, r3
   b5144:	f7ff bf26 	b.w	b4f94 <network_off>

000b5148 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5148:	2300      	movs	r3, #0
   b514a:	6840      	ldr	r0, [r0, #4]
   b514c:	461a      	mov	r2, r3
   b514e:	4619      	mov	r1, r3
   b5150:	f7ff bf18 	b.w	b4f84 <network_on>

000b5154 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5154:	2200      	movs	r2, #0
   b5156:	6840      	ldr	r0, [r0, #4]
   b5158:	4611      	mov	r1, r2
   b515a:	f7ff bf0b 	b.w	b4f74 <network_ready>

000b515e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b515e:	2200      	movs	r2, #0
   b5160:	6840      	ldr	r0, [r0, #4]
   b5162:	4611      	mov	r1, r2
   b5164:	f7ff bef6 	b.w	b4f54 <network_connecting>

000b5168 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5168:	6840      	ldr	r0, [r0, #4]
   b516a:	2200      	movs	r2, #0
   b516c:	2102      	movs	r1, #2
   b516e:	f7ff bef9 	b.w	b4f64 <network_disconnect>

000b5172 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5172:	2300      	movs	r3, #0
   b5174:	6840      	ldr	r0, [r0, #4]
   b5176:	461a      	mov	r2, r3
   b5178:	f7ff bee4 	b.w	b4f44 <network_connect>

000b517c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b517c:	4b02      	ldr	r3, [pc, #8]	; (b5188 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b517e:	2203      	movs	r2, #3
   b5180:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5182:	4a02      	ldr	r2, [pc, #8]	; (b518c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5184:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5186:	4770      	bx	lr
   b5188:	2003e67c 	.word	0x2003e67c
   b518c:	000b8280 	.word	0x000b8280

000b5190 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5190:	b510      	push	{r4, lr}
   b5192:	4604      	mov	r4, r0
   b5194:	4608      	mov	r0, r1
{
    _spi = spi;
   b5196:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5198:	f7ff fe48 	bl	b4e2c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b519c:	2300      	movs	r3, #0
   b519e:	6063      	str	r3, [r4, #4]
}
   b51a0:	4620      	mov	r0, r4
   b51a2:	bd10      	pop	{r4, pc}

000b51a4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b51a4:	4b05      	ldr	r3, [pc, #20]	; (b51bc <_GLOBAL__sub_I_System+0x18>)
   b51a6:	2202      	movs	r2, #2
   b51a8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b51aa:	4b05      	ldr	r3, [pc, #20]	; (b51c0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b51ac:	4a05      	ldr	r2, [pc, #20]	; (b51c4 <_GLOBAL__sub_I_System+0x20>)
   b51ae:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b51b0:	2000      	movs	r0, #0
   b51b2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b51b6:	f7ff be89 	b.w	b4ecc <set_system_mode>
   b51ba:	bf00      	nop
   b51bc:	2003e690 	.word	0x2003e690
   b51c0:	2003e684 	.word	0x2003e684
   b51c4:	ffff0000 	.word	0xffff0000

000b51c8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b51c8:	b510      	push	{r4, lr}
   b51ca:	4604      	mov	r4, r0
{
	free(buffer);
   b51cc:	6800      	ldr	r0, [r0, #0]
   b51ce:	f7ff ff59 	bl	b5084 <free>
}
   b51d2:	4620      	mov	r0, r4
   b51d4:	bd10      	pop	{r4, pc}

000b51d6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b51d6:	b510      	push	{r4, lr}
   b51d8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b51da:	6800      	ldr	r0, [r0, #0]
   b51dc:	b108      	cbz	r0, b51e2 <_ZN6String10invalidateEv+0xc>
   b51de:	f7ff ff51 	bl	b5084 <free>
	buffer = NULL;
   b51e2:	2300      	movs	r3, #0
	capacity = len = 0;
   b51e4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b51e8:	6023      	str	r3, [r4, #0]
}
   b51ea:	bd10      	pop	{r4, pc}

000b51ec <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b51ec:	b538      	push	{r3, r4, r5, lr}
   b51ee:	4604      	mov	r4, r0
   b51f0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b51f2:	6800      	ldr	r0, [r0, #0]
   b51f4:	3101      	adds	r1, #1
   b51f6:	f7ff ff4d 	bl	b5094 <realloc>
	if (newbuffer) {
   b51fa:	b110      	cbz	r0, b5202 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b51fc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5200:	2001      	movs	r0, #1
	}
	return 0;
}
   b5202:	bd38      	pop	{r3, r4, r5, pc}

000b5204 <_ZN6String7reserveEj>:
{
   b5204:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5206:	6803      	ldr	r3, [r0, #0]
{
   b5208:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b520a:	b123      	cbz	r3, b5216 <_ZN6String7reserveEj+0x12>
   b520c:	6843      	ldr	r3, [r0, #4]
   b520e:	428b      	cmp	r3, r1
   b5210:	d301      	bcc.n	b5216 <_ZN6String7reserveEj+0x12>
   b5212:	2001      	movs	r0, #1
}
   b5214:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5216:	4620      	mov	r0, r4
   b5218:	f7ff ffe8 	bl	b51ec <_ZN6String12changeBufferEj>
   b521c:	2800      	cmp	r0, #0
   b521e:	d0f9      	beq.n	b5214 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5220:	68a3      	ldr	r3, [r4, #8]
   b5222:	2b00      	cmp	r3, #0
   b5224:	d1f5      	bne.n	b5212 <_ZN6String7reserveEj+0xe>
   b5226:	6822      	ldr	r2, [r4, #0]
   b5228:	7013      	strb	r3, [r2, #0]
   b522a:	e7f2      	b.n	b5212 <_ZN6String7reserveEj+0xe>

000b522c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b522c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b522e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5230:	4611      	mov	r1, r2
   b5232:	9201      	str	r2, [sp, #4]
{
   b5234:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5236:	f7ff ffe5 	bl	b5204 <_ZN6String7reserveEj>
   b523a:	9a01      	ldr	r2, [sp, #4]
   b523c:	b928      	cbnz	r0, b524a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b523e:	4620      	mov	r0, r4
   b5240:	f7ff ffc9 	bl	b51d6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5244:	4620      	mov	r0, r4
   b5246:	b003      	add	sp, #12
   b5248:	bd30      	pop	{r4, r5, pc}
	len = length;
   b524a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b524c:	4629      	mov	r1, r5
   b524e:	6820      	ldr	r0, [r4, #0]
   b5250:	f002 fe86 	bl	b7f60 <memcpy>
	buffer[len] = 0;
   b5254:	6822      	ldr	r2, [r4, #0]
   b5256:	68a3      	ldr	r3, [r4, #8]
   b5258:	2100      	movs	r1, #0
   b525a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b525c:	e7f2      	b.n	b5244 <_ZN6String4copyEPKcj+0x18>

000b525e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b525e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5260:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5262:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5266:	4604      	mov	r4, r0
	len = 0;
   b5268:	6083      	str	r3, [r0, #8]
	flags = 0;
   b526a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b526c:	b141      	cbz	r1, b5280 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b526e:	4608      	mov	r0, r1
   b5270:	9101      	str	r1, [sp, #4]
   b5272:	f002 fee0 	bl	b8036 <strlen>
   b5276:	9901      	ldr	r1, [sp, #4]
   b5278:	4602      	mov	r2, r0
   b527a:	4620      	mov	r0, r4
   b527c:	f7ff ffd6 	bl	b522c <_ZN6String4copyEPKcj>
}
   b5280:	4620      	mov	r0, r4
   b5282:	b002      	add	sp, #8
   b5284:	bd10      	pop	{r4, pc}

000b5286 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b5286:	4288      	cmp	r0, r1
{
   b5288:	b510      	push	{r4, lr}
   b528a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b528c:	d005      	beq.n	b529a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b528e:	680b      	ldr	r3, [r1, #0]
   b5290:	b12b      	cbz	r3, b529e <_ZN6StringaSERKS_+0x18>
   b5292:	688a      	ldr	r2, [r1, #8]
   b5294:	4619      	mov	r1, r3
   b5296:	f7ff ffc9 	bl	b522c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b529a:	4620      	mov	r0, r4
   b529c:	bd10      	pop	{r4, pc}
	else invalidate();
   b529e:	f7ff ff9a 	bl	b51d6 <_ZN6String10invalidateEv>
   b52a2:	e7fa      	b.n	b529a <_ZN6StringaSERKS_+0x14>

000b52a4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b52a4:	b510      	push	{r4, lr}
	buffer = NULL;
   b52a6:	2300      	movs	r3, #0
String::String(const String &value)
   b52a8:	4604      	mov	r4, r0
	capacity = 0;
   b52aa:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b52ae:	6083      	str	r3, [r0, #8]
	flags = 0;
   b52b0:	7303      	strb	r3, [r0, #12]
	*this = value;
   b52b2:	f7ff ffe8 	bl	b5286 <_ZN6StringaSERKS_>
}
   b52b6:	4620      	mov	r0, r4
   b52b8:	bd10      	pop	{r4, pc}

000b52ba <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b52ba:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b52bc:	6882      	ldr	r2, [r0, #8]
   b52be:	b93a      	cbnz	r2, b52d0 <_ZNK6String6equalsEPKc+0x16>
   b52c0:	b121      	cbz	r1, b52cc <_ZNK6String6equalsEPKc+0x12>
   b52c2:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b52c4:	fab0 f080 	clz	r0, r0
   b52c8:	0940      	lsrs	r0, r0, #5
   b52ca:	e000      	b.n	b52ce <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b52cc:	2001      	movs	r0, #1
}
   b52ce:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b52d0:	6800      	ldr	r0, [r0, #0]
   b52d2:	b909      	cbnz	r1, b52d8 <_ZNK6String6equalsEPKc+0x1e>
   b52d4:	7800      	ldrb	r0, [r0, #0]
   b52d6:	e7f5      	b.n	b52c4 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b52d8:	f002 fe86 	bl	b7fe8 <strcmp>
   b52dc:	e7f2      	b.n	b52c4 <_ZNK6String6equalsEPKc+0xa>
	...

000b52e0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b52e0:	b40e      	push	{r1, r2, r3}
   b52e2:	b570      	push	{r4, r5, r6, lr}
   b52e4:	b087      	sub	sp, #28
   b52e6:	ad0b      	add	r5, sp, #44	; 0x2c
   b52e8:	4604      	mov	r4, r0
   b52ea:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b52ee:	9201      	str	r2, [sp, #4]
   b52f0:	462b      	mov	r3, r5
   b52f2:	2105      	movs	r1, #5
   b52f4:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b52f6:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b52f8:	f7ff fed4 	bl	b50a4 <vsnprintf>
    va_end(marker);

    String result;
   b52fc:	490b      	ldr	r1, [pc, #44]	; (b532c <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b52fe:	4606      	mov	r6, r0
    String result;
   b5300:	4620      	mov	r0, r4
   b5302:	f7ff ffac 	bl	b525e <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b5306:	4631      	mov	r1, r6
   b5308:	4620      	mov	r0, r4
   b530a:	f7ff ff7b 	bl	b5204 <_ZN6String7reserveEj>
    if (result.buffer) {
   b530e:	6820      	ldr	r0, [r4, #0]
   b5310:	b130      	cbz	r0, b5320 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b5312:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b5314:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b5316:	462b      	mov	r3, r5
   b5318:	1c71      	adds	r1, r6, #1
   b531a:	f7ff fec3 	bl	b50a4 <vsnprintf>
        va_end(marker);
        result.len = n;
   b531e:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b5320:	4620      	mov	r0, r4
   b5322:	b007      	add	sp, #28
   b5324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5328:	b003      	add	sp, #12
   b532a:	4770      	bx	lr
   b532c:	000b8223 	.word	0x000b8223

000b5330 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b5330:	b513      	push	{r0, r1, r4, lr}
   b5332:	460b      	mov	r3, r1
   b5334:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5336:	e9d0 0100 	ldrd	r0, r1, [r0]
   b533a:	466c      	mov	r4, sp
   b533c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5340:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5344:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5348:	e894 0003 	ldmia.w	r4, {r0, r1}
   b534c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5350:	b002      	add	sp, #8
   b5352:	bd10      	pop	{r4, pc}

000b5354 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5354:	4802      	ldr	r0, [pc, #8]	; (b5360 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5356:	2300      	movs	r3, #0
   b5358:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b535a:	f7ff bcaf 	b.w	b4cbc <os_mutex_recursive_create>
   b535e:	bf00      	nop
   b5360:	2003e694 	.word	0x2003e694

000b5364 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5366:	4606      	mov	r6, r0
   b5368:	460d      	mov	r5, r1
  size_t n = 0;
   b536a:	188f      	adds	r7, r1, r2
   b536c:	2400      	movs	r4, #0
  while (size--) {
   b536e:	42bd      	cmp	r5, r7
   b5370:	d00c      	beq.n	b538c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5372:	6833      	ldr	r3, [r6, #0]
   b5374:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5378:	689b      	ldr	r3, [r3, #8]
   b537a:	4630      	mov	r0, r6
   b537c:	4798      	blx	r3
     if (chunk>=0)
   b537e:	1e03      	subs	r3, r0, #0
   b5380:	db01      	blt.n	b5386 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5382:	441c      	add	r4, r3
  while (size--) {
   b5384:	e7f3      	b.n	b536e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5386:	2c00      	cmp	r4, #0
   b5388:	bf08      	it	eq
   b538a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b538c:	4620      	mov	r0, r4
   b538e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5390 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5390:	b513      	push	{r0, r1, r4, lr}
   b5392:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5394:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5396:	b159      	cbz	r1, b53b0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5398:	9101      	str	r1, [sp, #4]
   b539a:	f002 fe4c 	bl	b8036 <strlen>
   b539e:	6823      	ldr	r3, [r4, #0]
   b53a0:	9901      	ldr	r1, [sp, #4]
   b53a2:	68db      	ldr	r3, [r3, #12]
   b53a4:	4602      	mov	r2, r0
   b53a6:	4620      	mov	r0, r4
    }
   b53a8:	b002      	add	sp, #8
   b53aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b53ae:	4718      	bx	r3
    }
   b53b0:	b002      	add	sp, #8
   b53b2:	bd10      	pop	{r4, pc}

000b53b4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b53b4:	6803      	ldr	r3, [r0, #0]
   b53b6:	689b      	ldr	r3, [r3, #8]
   b53b8:	4718      	bx	r3

000b53ba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b53ba:	b530      	push	{r4, r5, lr}
   b53bc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b53be:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b53c0:	2a01      	cmp	r2, #1
  *str = '\0';
   b53c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b53c6:	bf98      	it	ls
   b53c8:	220a      	movls	r2, #10
   b53ca:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b53cc:	460d      	mov	r5, r1
   b53ce:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b53d2:	fb01 5312 	mls	r3, r1, r2, r5
   b53d6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b53da:	2b09      	cmp	r3, #9
   b53dc:	bf94      	ite	ls
   b53de:	3330      	addls	r3, #48	; 0x30
   b53e0:	3337      	addhi	r3, #55	; 0x37
   b53e2:	b2db      	uxtb	r3, r3
  } while(n);
   b53e4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b53e6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b53ea:	d9ef      	bls.n	b53cc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b53ec:	4621      	mov	r1, r4
   b53ee:	f7ff ffcf 	bl	b5390 <_ZN5Print5writeEPKc>
}
   b53f2:	b00b      	add	sp, #44	; 0x2c
   b53f4:	bd30      	pop	{r4, r5, pc}
	...

000b53f8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b53f8:	4b01      	ldr	r3, [pc, #4]	; (b5400 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b53fa:	4a02      	ldr	r2, [pc, #8]	; (b5404 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b53fc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b53fe:	4770      	bx	lr
   b5400:	2003e698 	.word	0x2003e698
   b5404:	000b82b4 	.word	0x000b82b4

000b5408 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b5408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b540c:	4a15      	ldr	r2, [pc, #84]	; (b5464 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b540e:	f8df 8060 	ldr.w	r8, [pc, #96]	; b5470 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b5412:	e9d2 6300 	ldrd	r6, r3, [r2]
   b5416:	1980      	adds	r0, r0, r6
   b5418:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b541c:	4b12      	ldr	r3, [pc, #72]	; (b5468 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b541e:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b5422:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b5426:	1986      	adds	r6, r0, r6
   b5428:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b542c:	42bb      	cmp	r3, r7
   b542e:	bf08      	it	eq
   b5430:	42b2      	cmpeq	r2, r6
{
   b5432:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b5434:	d013      	beq.n	b545e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b5436:	a903      	add	r1, sp, #12
   b5438:	4668      	mov	r0, sp
   b543a:	e9cd 6700 	strd	r6, r7, [sp]
   b543e:	f7ff fe61 	bl	b5104 <localtime_r>
	calendar_time.tm_year += 1900;
   b5442:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5444:	4d09      	ldr	r5, [pc, #36]	; (b546c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b5446:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b544a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b544c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b544e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b5456:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b545a:	6823      	ldr	r3, [r4, #0]
   b545c:	602b      	str	r3, [r5, #0]
    }
}
   b545e:	b00c      	add	sp, #48	; 0x30
   b5460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5464:	2003e6d0 	.word	0x2003e6d0
   b5468:	2003e6c8 	.word	0x2003e6c8
   b546c:	2003e6a0 	.word	0x2003e6a0
   b5470:	2003e6d8 	.word	0x2003e6d8

000b5474 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b5474:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5476:	2000      	movs	r0, #0
   b5478:	f7ff fdec 	bl	b5054 <spark_sync_time_pending>
   b547c:	b128      	cbz	r0, b548a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b547e:	f7ff fdd1 	bl	b5024 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5482:	f080 0001 	eor.w	r0, r0, #1
   b5486:	b2c0      	uxtb	r0, r0
    }
   b5488:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b548a:	2001      	movs	r0, #1
   b548c:	e7fc      	b.n	b5488 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b5490 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b5490:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b5494:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b5498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b549c:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b549e:	d411      	bmi.n	b54c4 <_ZN9TimeClass4zoneEf+0x34>
   b54a0:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b54a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b54a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b54ac:	dc0a      	bgt.n	b54c4 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b54ae:	eddf 7a06 	vldr	s15, [pc, #24]	; b54c8 <_ZN9TimeClass4zoneEf+0x38>
   b54b2:	ee60 7a27 	vmul.f32	s15, s0, s15
   b54b6:	ee17 0a90 	vmov	r0, s15
   b54ba:	f002 fd17 	bl	b7eec <__aeabi_f2lz>
   b54be:	4b03      	ldr	r3, [pc, #12]	; (b54cc <_ZN9TimeClass4zoneEf+0x3c>)
   b54c0:	e9c3 0100 	strd	r0, r1, [r3]
}
   b54c4:	bd08      	pop	{r3, pc}
   b54c6:	bf00      	nop
   b54c8:	45610000 	.word	0x45610000
   b54cc:	2003e6d0 	.word	0x2003e6d0

000b54d0 <_ZN9TimeClass8beginDSTEv>:
    dst_cache = offset * 3600;
}

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   b54d0:	4b03      	ldr	r3, [pc, #12]	; (b54e0 <_ZN9TimeClass8beginDSTEv+0x10>)
   b54d2:	e9d3 0100 	ldrd	r0, r1, [r3]
   b54d6:	4b03      	ldr	r3, [pc, #12]	; (b54e4 <_ZN9TimeClass8beginDSTEv+0x14>)
   b54d8:	e9c3 0100 	strd	r0, r1, [r3]
}
   b54dc:	4770      	bx	lr
   b54de:	bf00      	nop
   b54e0:	2003e5c8 	.word	0x2003e5c8
   b54e4:	2003e6c8 	.word	0x2003e6c8

000b54e8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b54e8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b54ea:	2000      	movs	r0, #0
   b54ec:	f7ff fba6 	bl	b4c3c <hal_rtc_time_is_valid>
    if (rtcstate)
   b54f0:	4604      	mov	r4, r0
   b54f2:	b9a0      	cbnz	r0, b551e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b54f4:	f7ff fce2 	bl	b4ebc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b54f8:	2801      	cmp	r0, #1
   b54fa:	d110      	bne.n	b551e <_ZN9TimeClass7isValidEv+0x36>
   b54fc:	4620      	mov	r0, r4
   b54fe:	f7ff fd05 	bl	b4f0c <system_thread_get_state>
   b5502:	b960      	cbnz	r0, b551e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b5504:	f7ff ffb6 	bl	b5474 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b5508:	b910      	cbnz	r0, b5510 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b550a:	f7ff fd83 	bl	b5014 <spark_process>
        while (_while() && !_condition()) {
   b550e:	e7f9      	b.n	b5504 <_ZN9TimeClass7isValidEv+0x1c>
   b5510:	f7ff ffb0 	bl	b5474 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b5514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b5518:	2000      	movs	r0, #0
   b551a:	f7ff bb8f 	b.w	b4c3c <hal_rtc_time_is_valid>
}
   b551e:	4620      	mov	r0, r4
   b5520:	bd10      	pop	{r4, pc}

000b5522 <_ZN9TimeClass3nowEv>:
{
   b5522:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b5524:	f7ff ffe0 	bl	b54e8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b5528:	2210      	movs	r2, #16
   b552a:	2100      	movs	r1, #0
   b552c:	4668      	mov	r0, sp
   b552e:	f002 fd25 	bl	b7f7c <memset>
    hal_rtc_get_time(&tv, nullptr);
   b5532:	2100      	movs	r1, #0
   b5534:	4668      	mov	r0, sp
   b5536:	f7ff fb89 	bl	b4c4c <hal_rtc_get_time>
}
   b553a:	9800      	ldr	r0, [sp, #0]
   b553c:	b005      	add	sp, #20
   b553e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5544 <_ZN9TimeClass4hourEv>:
{
   b5544:	b508      	push	{r3, lr}
	return hour(now());
   b5546:	f7ff ffec 	bl	b5522 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b554a:	17c1      	asrs	r1, r0, #31
   b554c:	f7ff ff5c 	bl	b5408 <_ZL22Refresh_UnixTime_Cachex>
}
   b5550:	4b01      	ldr	r3, [pc, #4]	; (b5558 <_ZN9TimeClass4hourEv+0x14>)
   b5552:	6898      	ldr	r0, [r3, #8]
   b5554:	bd08      	pop	{r3, pc}
   b5556:	bf00      	nop
   b5558:	2003e6a0 	.word	0x2003e6a0

000b555c <_ZN9TimeClass6minuteEv>:
{
   b555c:	b508      	push	{r3, lr}
	return minute(now());
   b555e:	f7ff ffe0 	bl	b5522 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b5562:	17c1      	asrs	r1, r0, #31
   b5564:	f7ff ff50 	bl	b5408 <_ZL22Refresh_UnixTime_Cachex>
}
   b5568:	4b01      	ldr	r3, [pc, #4]	; (b5570 <_ZN9TimeClass6minuteEv+0x14>)
   b556a:	6858      	ldr	r0, [r3, #4]
   b556c:	bd08      	pop	{r3, pc}
   b556e:	bf00      	nop
   b5570:	2003e6a0 	.word	0x2003e6a0

000b5574 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5574:	4b02      	ldr	r3, [pc, #8]	; (b5580 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5576:	681a      	ldr	r2, [r3, #0]
   b5578:	4b02      	ldr	r3, [pc, #8]	; (b5584 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b557a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b557c:	4770      	bx	lr
   b557e:	bf00      	nop
   b5580:	2003e5c0 	.word	0x2003e5c0
   b5584:	2003e69c 	.word	0x2003e69c

000b5588 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b5588:	428a      	cmp	r2, r1
{
   b558a:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b558c:	d007      	beq.n	b559e <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b558e:	1a44      	subs	r4, r0, r1
   b5590:	9802      	ldr	r0, [sp, #8]
   b5592:	1ac0      	subs	r0, r0, r3
   b5594:	4344      	muls	r4, r0
   b5596:	1a50      	subs	r0, r2, r1
   b5598:	fb94 f0f0 	sdiv	r0, r4, r0
   b559c:	4418      	add	r0, r3
}
   b559e:	bd10      	pop	{r4, pc}

000b55a0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b55a0:	2100      	movs	r1, #0
   b55a2:	f7ff bc9b 	b.w	b4edc <system_delay_ms>
	...

000b55a8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b55a8:	4b01      	ldr	r3, [pc, #4]	; (b55b0 <_GLOBAL__sub_I_RGB+0x8>)
   b55aa:	2200      	movs	r2, #0
   b55ac:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b55ae:	4770      	bx	lr
   b55b0:	2003e6e0 	.word	0x2003e6e0

000b55b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b55b4:	4b01      	ldr	r3, [pc, #4]	; (b55bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b55b6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b55b8:	4770      	bx	lr
   b55ba:	bf00      	nop
   b55bc:	2003e5d4 	.word	0x2003e5d4

000b55c0 <serialEventRun>:
{
   b55c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b55c2:	4b0b      	ldr	r3, [pc, #44]	; (b55f0 <serialEventRun+0x30>)
   b55c4:	b143      	cbz	r3, b55d8 <serialEventRun+0x18>
   b55c6:	f000 fc25 	bl	b5e14 <_Z16_fetch_usbserialv>
   b55ca:	6803      	ldr	r3, [r0, #0]
   b55cc:	691b      	ldr	r3, [r3, #16]
   b55ce:	4798      	blx	r3
   b55d0:	2800      	cmp	r0, #0
   b55d2:	dd01      	ble.n	b55d8 <serialEventRun+0x18>
        serialEvent();
   b55d4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b55d8:	4b06      	ldr	r3, [pc, #24]	; (b55f4 <serialEventRun+0x34>)
   b55da:	b143      	cbz	r3, b55ee <serialEventRun+0x2e>
   b55dc:	f000 febc 	bl	b6358 <_Z22__fetch_global_Serial1v>
   b55e0:	6803      	ldr	r3, [r0, #0]
   b55e2:	691b      	ldr	r3, [r3, #16]
   b55e4:	4798      	blx	r3
   b55e6:	2800      	cmp	r0, #0
   b55e8:	dd01      	ble.n	b55ee <serialEventRun+0x2e>
        serialEvent1();
   b55ea:	f3af 8000 	nop.w
}
   b55ee:	bd08      	pop	{r3, pc}
	...

000b55f8 <_post_loop>:
{
   b55f8:	b508      	push	{r3, lr}
	serialEventRun();
   b55fa:	f7ff ffe1 	bl	b55c0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b55fe:	f7ff fb15 	bl	b4c2c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5602:	4b01      	ldr	r3, [pc, #4]	; (b5608 <_post_loop+0x10>)
   b5604:	6018      	str	r0, [r3, #0]
}
   b5606:	bd08      	pop	{r3, pc}
   b5608:	2003e744 	.word	0x2003e744

000b560c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b560c:	4805      	ldr	r0, [pc, #20]	; (b5624 <_Z33system_initialize_user_backup_ramv+0x18>)
   b560e:	4a06      	ldr	r2, [pc, #24]	; (b5628 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5610:	4906      	ldr	r1, [pc, #24]	; (b562c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5612:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5614:	1a12      	subs	r2, r2, r0
   b5616:	f002 fca3 	bl	b7f60 <memcpy>
    __backup_sram_signature = signature;
   b561a:	4b05      	ldr	r3, [pc, #20]	; (b5630 <_Z33system_initialize_user_backup_ramv+0x24>)
   b561c:	4a05      	ldr	r2, [pc, #20]	; (b5634 <_Z33system_initialize_user_backup_ramv+0x28>)
   b561e:	601a      	str	r2, [r3, #0]
}
   b5620:	bd08      	pop	{r3, pc}
   b5622:	bf00      	nop
   b5624:	2003f400 	.word	0x2003f400
   b5628:	2003f404 	.word	0x2003f404
   b562c:	000b8504 	.word	0x000b8504
   b5630:	2003f400 	.word	0x2003f400
   b5634:	9a271c1e 	.word	0x9a271c1e

000b5638 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5638:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b563a:	2300      	movs	r3, #0
   b563c:	9300      	str	r3, [sp, #0]
   b563e:	461a      	mov	r2, r3
   b5640:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5644:	f7ff fc74 	bl	b4f30 <system_ctrl_set_result>
}
   b5648:	b003      	add	sp, #12
   b564a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5650 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5650:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5652:	8843      	ldrh	r3, [r0, #2]
   b5654:	2b0a      	cmp	r3, #10
   b5656:	d008      	beq.n	b566a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5658:	2b50      	cmp	r3, #80	; 0x50
   b565a:	d10b      	bne.n	b5674 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b565c:	4b09      	ldr	r3, [pc, #36]	; (b5684 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b565e:	681b      	ldr	r3, [r3, #0]
   b5660:	b14b      	cbz	r3, b5676 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5662:	b003      	add	sp, #12
   b5664:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5668:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b566a:	f7ff ffe5 	bl	b5638 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b566e:	b003      	add	sp, #12
   b5670:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5674:	2300      	movs	r3, #0
   b5676:	9300      	str	r3, [sp, #0]
   b5678:	461a      	mov	r2, r3
   b567a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b567e:	f7ff fc57 	bl	b4f30 <system_ctrl_set_result>
}
   b5682:	e7f4      	b.n	b566e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5684:	2003e6f4 	.word	0x2003e6f4

000b5688 <module_user_init_hook>:
{
   b5688:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b568a:	4812      	ldr	r0, [pc, #72]	; (b56d4 <module_user_init_hook+0x4c>)
   b568c:	2100      	movs	r1, #0
   b568e:	f7ff fd31 	bl	b50f4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5692:	4b11      	ldr	r3, [pc, #68]	; (b56d8 <module_user_init_hook+0x50>)
   b5694:	681a      	ldr	r2, [r3, #0]
   b5696:	4b11      	ldr	r3, [pc, #68]	; (b56dc <module_user_init_hook+0x54>)
   b5698:	429a      	cmp	r2, r3
   b569a:	4b11      	ldr	r3, [pc, #68]	; (b56e0 <module_user_init_hook+0x58>)
   b569c:	bf0c      	ite	eq
   b569e:	2201      	moveq	r2, #1
   b56a0:	2200      	movne	r2, #0
   b56a2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b56a4:	d001      	beq.n	b56aa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b56a6:	f7ff ffb1 	bl	b560c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b56aa:	f7ff fab7 	bl	b4c1c <HAL_RNG_GetRandomNumber>
   b56ae:	4604      	mov	r4, r0
    srand(seed);
   b56b0:	f002 fc6c 	bl	b7f8c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b56b4:	4b0b      	ldr	r3, [pc, #44]	; (b56e4 <module_user_init_hook+0x5c>)
   b56b6:	b113      	cbz	r3, b56be <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b56b8:	4620      	mov	r0, r4
   b56ba:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b56be:	2100      	movs	r1, #0
   b56c0:	4808      	ldr	r0, [pc, #32]	; (b56e4 <module_user_init_hook+0x5c>)
   b56c2:	f7ff fccf 	bl	b5064 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b56c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b56ca:	4807      	ldr	r0, [pc, #28]	; (b56e8 <module_user_init_hook+0x60>)
   b56cc:	2100      	movs	r1, #0
   b56ce:	f7ff bc25 	b.w	b4f1c <system_ctrl_set_app_request_handler>
   b56d2:	bf00      	nop
   b56d4:	000b55b5 	.word	0x000b55b5
   b56d8:	2003f400 	.word	0x2003f400
   b56dc:	9a271c1e 	.word	0x9a271c1e
   b56e0:	2003e6f0 	.word	0x2003e6f0
   b56e4:	00000000 	.word	0x00000000
   b56e8:	000b5651 	.word	0x000b5651

000b56ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b56ec:	4770      	bx	lr

000b56ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b56ee:	2000      	movs	r0, #0
   b56f0:	4770      	bx	lr

000b56f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b56f2:	b510      	push	{r4, lr}
   b56f4:	2110      	movs	r1, #16
   b56f6:	4604      	mov	r4, r0
   b56f8:	f7fe fcd1 	bl	b409e <_ZdlPvj>
   b56fc:	4620      	mov	r0, r4
   b56fe:	bd10      	pop	{r4, pc}

000b5700 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5700:	b508      	push	{r3, lr}
      { delete this; }
   b5702:	f7ff fff6 	bl	b56f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b5706:	bd08      	pop	{r3, pc}

000b5708 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b5708:	b530      	push	{r4, r5, lr}
        type_(type) {
   b570a:	2200      	movs	r2, #0
   b570c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5710:	6002      	str	r2, [r0, #0]
   b5712:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5714:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b5716:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5718:	680c      	ldr	r4, [r1, #0]
   b571a:	8085      	strh	r5, [r0, #4]
   b571c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b571e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5720:	bd30      	pop	{r4, r5, pc}

000b5722 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b5722:	b510      	push	{r4, lr}
   b5724:	4604      	mov	r4, r0
    free((void*)msg_);
   b5726:	6800      	ldr	r0, [r0, #0]
   b5728:	f7ff fcac 	bl	b5084 <free>
}
   b572c:	4620      	mov	r0, r4
   b572e:	bd10      	pop	{r4, pc}

000b5730 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5730:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b5732:	68c4      	ldr	r4, [r0, #12]
   b5734:	b1f4      	cbz	r4, b5774 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b5736:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b5738:	2b02      	cmp	r3, #2
   b573a:	d103      	bne.n	b5744 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b573c:	f104 000c 	add.w	r0, r4, #12
   b5740:	f7ff ffef 	bl	b5722 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b5744:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b5746:	b135      	cbz	r5, b5756 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b5748:	4628      	mov	r0, r5
   b574a:	f7fe fcfd 	bl	b4148 <_ZNSt14_Function_baseD1Ev>
   b574e:	2110      	movs	r1, #16
   b5750:	4628      	mov	r0, r5
   b5752:	f7fe fca4 	bl	b409e <_ZdlPvj>
   b5756:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b5758:	b135      	cbz	r5, b5768 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b575a:	4628      	mov	r0, r5
   b575c:	f7fe fcf4 	bl	b4148 <_ZNSt14_Function_baseD1Ev>
   b5760:	2110      	movs	r1, #16
   b5762:	4628      	mov	r0, r5
   b5764:	f7fe fc9b 	bl	b409e <_ZdlPvj>
   b5768:	4620      	mov	r0, r4
   b576a:	2114      	movs	r1, #20
   b576c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5770:	f7fe bc95 	b.w	b409e <_ZdlPvj>
   b5774:	bd38      	pop	{r3, r4, r5, pc}

000b5776 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   b5776:	b510      	push	{r4, lr}
   b5778:	b088      	sub	sp, #32
   b577a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   b577c:	4668      	mov	r0, sp
   b577e:	f7ff fd6e 	bl	b525e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   b5782:	4669      	mov	r1, sp
   b5784:	a804      	add	r0, sp, #16
   b5786:	f7ff fd8d 	bl	b52a4 <_ZN6StringC1ERKS_>
   b578a:	a804      	add	r0, sp, #16
   b578c:	47a0      	blx	r4
   b578e:	4604      	mov	r4, r0
   b5790:	a804      	add	r0, sp, #16
   b5792:	f7ff fd19 	bl	b51c8 <_ZN6StringD1Ev>
    String p(param);
   b5796:	4668      	mov	r0, sp
   b5798:	f7ff fd16 	bl	b51c8 <_ZN6StringD1Ev>
}
   b579c:	4620      	mov	r0, r4
   b579e:	b008      	add	sp, #32
   b57a0:	bd10      	pop	{r4, pc}

000b57a2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   b57a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   b57a4:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   b57a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   b57aa:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   b57ac:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   b57ae:	461a      	mov	r2, r3
   b57b0:	4669      	mov	r1, sp
   b57b2:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   b57b4:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   b57b8:	f8ad 4000 	strh.w	r4, [sp]
   b57bc:	f7ff fc22 	bl	b5004 <spark_function>
}
   b57c0:	b004      	add	sp, #16
   b57c2:	bd10      	pop	{r4, pc}

000b57c4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b57c4:	680b      	ldr	r3, [r1, #0]
   b57c6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b57c8:	684b      	ldr	r3, [r1, #4]
   b57ca:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b57cc:	b113      	cbz	r3, b57d4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b57ce:	685a      	ldr	r2, [r3, #4]
   b57d0:	3201      	adds	r2, #1
   b57d2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b57d4:	4770      	bx	lr

000b57d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b57d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b57d8:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b57da:	4668      	mov	r0, sp
   b57dc:	460d      	mov	r5, r1
   b57de:	f7ff fff1 	bl	b57c4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b57e2:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b57e4:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b57e6:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b57e8:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b57ea:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b57ec:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b57ee:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b57f0:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b57f2:	f7fe fefb 	bl	b45ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b57f6:	b135      	cbz	r5, b5806 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b57f8:	1d28      	adds	r0, r5, #4
   b57fa:	f7fe fef7 	bl	b45ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b57fe:	2108      	movs	r1, #8
   b5800:	4628      	mov	r0, r5
   b5802:	f7fe fc4c 	bl	b409e <_ZdlPvj>
        return p;
    }
   b5806:	4620      	mov	r0, r4
   b5808:	b003      	add	sp, #12
   b580a:	bd30      	pop	{r4, r5, pc}

000b580c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b580c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b580e:	b510      	push	{r4, lr}
      if (_M_empty())
   b5810:	b90a      	cbnz	r2, b5816 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b5812:	f000 fe03 	bl	b641c <_ZSt25__throw_bad_function_callv>
    }
   b5816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b581a:	68c3      	ldr	r3, [r0, #12]
   b581c:	4718      	bx	r3

000b581e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b581e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5820:	6800      	ldr	r0, [r0, #0]
   b5822:	f100 0110 	add.w	r1, r0, #16
   b5826:	f7ff fff1 	bl	b580c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b582a:	bd08      	pop	{r3, pc}

000b582c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b582c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b582e:	b510      	push	{r4, lr}
      if (_M_empty())
   b5830:	b90a      	cbnz	r2, b5836 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5832:	f000 fdf3 	bl	b641c <_ZSt25__throw_bad_function_callv>
    }
   b5836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b583a:	68c3      	ldr	r3, [r0, #12]
   b583c:	4718      	bx	r3

000b583e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b583e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5840:	6800      	ldr	r0, [r0, #0]
   b5842:	f100 0110 	add.w	r1, r0, #16
   b5846:	f7ff fff1 	bl	b582c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b584a:	bd08      	pop	{r3, pc}

000b584c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b584c:	b538      	push	{r3, r4, r5, lr}
   b584e:	2300      	movs	r3, #0
   b5850:	4604      	mov	r4, r0
   b5852:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5854:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b5856:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5858:	f7fe fc1d 	bl	b4096 <_Znwj>
   b585c:	b128      	cbz	r0, b586a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b585e:	2301      	movs	r3, #1
   b5860:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b5864:	4b02      	ldr	r3, [pc, #8]	; (b5870 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b5866:	6003      	str	r3, [r0, #0]
   b5868:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b586a:	6020      	str	r0, [r4, #0]
	}
   b586c:	4620      	mov	r0, r4
   b586e:	bd38      	pop	{r3, r4, r5, pc}
   b5870:	000b82dc 	.word	0x000b82dc

000b5874 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b5874:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5876:	2300      	movs	r3, #0
   b5878:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b587a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b587c:	4604      	mov	r4, r0
   b587e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5880:	b12b      	cbz	r3, b588e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5882:	2202      	movs	r2, #2
   b5884:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5886:	68eb      	ldr	r3, [r5, #12]
   b5888:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b588a:	68ab      	ldr	r3, [r5, #8]
   b588c:	60a3      	str	r3, [r4, #8]
    }
   b588e:	4620      	mov	r0, r4
   b5890:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5894 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b5894:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5896:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5898:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b589a:	4668      	mov	r0, sp
   b589c:	f7ff ff34 	bl	b5708 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b58a0:	f04f 0302 	mov.w	r3, #2
   b58a4:	e8d4 2f4f 	ldrexb	r2, [r4]
   b58a8:	2a00      	cmp	r2, #0
   b58aa:	d103      	bne.n	b58b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b58ac:	e8c4 3f41 	strexb	r1, r3, [r4]
   b58b0:	2900      	cmp	r1, #0
   b58b2:	d1f7      	bne.n	b58a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b58b4:	d125      	bne.n	b5902 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b58b6:	f104 050c 	add.w	r5, r4, #12
   b58ba:	4669      	mov	r1, sp
   b58bc:	4628      	mov	r0, r5
   b58be:	f7ff ff23 	bl	b5708 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b58c2:	f3bf 8f5b 	dmb	ish
   b58c6:	2301      	movs	r3, #1
   b58c8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b58ca:	2000      	movs	r0, #0
   b58cc:	f104 0308 	add.w	r3, r4, #8
   b58d0:	f3bf 8f5b 	dmb	ish
   b58d4:	e853 6f00 	ldrex	r6, [r3]
   b58d8:	e843 0200 	strex	r2, r0, [r3]
   b58dc:	2a00      	cmp	r2, #0
   b58de:	d1f9      	bne.n	b58d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b58e0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b58e4:	b16e      	cbz	r6, b5902 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b58e6:	f7ff fb01 	bl	b4eec <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b58ea:	b178      	cbz	r0, b590c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b58ec:	4629      	mov	r1, r5
   b58ee:	4630      	mov	r0, r6
   b58f0:	f7ff ff8c 	bl	b580c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b58f4:	4630      	mov	r0, r6
   b58f6:	f7fe fc27 	bl	b4148 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b58fa:	2110      	movs	r1, #16
   b58fc:	4630      	mov	r0, r6
   b58fe:	f7fe fbce 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b5902:	4668      	mov	r0, sp
   b5904:	f7ff ff0d 	bl	b5722 <_ZN8particle5ErrorD1Ev>
    }
   b5908:	b009      	add	sp, #36	; 0x24
   b590a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b590c:	4631      	mov	r1, r6
   b590e:	a802      	add	r0, sp, #8
   b5910:	f7ff ffb0 	bl	b5874 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5914:	68e0      	ldr	r0, [r4, #12]
   b5916:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b591a:	b108      	cbz	r0, b5920 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b591c:	f002 fb6e 	bl	b7ffc <strdup>
        type_(type) {
   b5920:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5922:	2010      	movs	r0, #16
   b5924:	f8ad 501c 	strh.w	r5, [sp, #28]
   b5928:	f7fe fbb5 	bl	b4096 <_Znwj>
   b592c:	4605      	mov	r5, r0
   b592e:	b1e8      	cbz	r0, b596c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b5930:	2700      	movs	r7, #0
   b5932:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5934:	2018      	movs	r0, #24
   b5936:	f7fe fbae 	bl	b4096 <_Znwj>
   b593a:	4604      	mov	r4, r0
   b593c:	b188      	cbz	r0, b5962 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b593e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b5940:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5942:	a802      	add	r0, sp, #8
   b5944:	f7ff fcf4 	bl	b5330 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5948:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b594a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b594c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b594e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5950:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5952:	a906      	add	r1, sp, #24
   b5954:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5956:	60e3      	str	r3, [r4, #12]
   b5958:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b595c:	9205      	str	r2, [sp, #20]
   b595e:	f7ff fed3 	bl	b5708 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b5962:	4b08      	ldr	r3, [pc, #32]	; (b5984 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b5964:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5966:	4b08      	ldr	r3, [pc, #32]	; (b5988 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5968:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b596a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b596c:	a806      	add	r0, sp, #24
   b596e:	f7ff fed8 	bl	b5722 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5972:	a802      	add	r0, sp, #8
   b5974:	f7fe fbe8 	bl	b4148 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5978:	2200      	movs	r2, #0
   b597a:	4629      	mov	r1, r5
   b597c:	4803      	ldr	r0, [pc, #12]	; (b598c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b597e:	f7ff fabd 	bl	b4efc <application_thread_invoke>
   b5982:	e7b7      	b.n	b58f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b5984:	000b581f 	.word	0x000b581f
   b5988:	000b5aa1 	.word	0x000b5aa1
   b598c:	000b5f05 	.word	0x000b5f05

000b5990 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b5990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5994:	b08b      	sub	sp, #44	; 0x2c
   b5996:	4605      	mov	r5, r0
   b5998:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b599c:	460f      	mov	r7, r1
   b599e:	4690      	mov	r8, r2
   b59a0:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b59a2:	f7ff fb3f 	bl	b5024 <spark_cloud_flag_connected>
   b59a6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b59a8:	4683      	mov	fp, r0
   b59aa:	bb38      	cbnz	r0, b59fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b59ac:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b59b0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b59b2:	a905      	add	r1, sp, #20
   b59b4:	4630      	mov	r0, r6
   b59b6:	f8ad 3018 	strh.w	r3, [sp, #24]
   b59ba:	f7ff fea5 	bl	b5708 <_ZN8particle5ErrorC1EOS0_>
   b59be:	2014      	movs	r0, #20
   b59c0:	f7fe fb69 	bl	b4096 <_Znwj>
   b59c4:	4604      	mov	r4, r0
   b59c6:	b148      	cbz	r0, b59dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b59c8:	2302      	movs	r3, #2
   b59ca:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b59cc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b59ce:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b59d2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b59d4:	4631      	mov	r1, r6
   b59d6:	300c      	adds	r0, #12
   b59d8:	f7ff fe96 	bl	b5708 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b59dc:	4628      	mov	r0, r5
	: __shared_count(__p)
   b59de:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b59e0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b59e4:	f7ff ff32 	bl	b584c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b59e8:	4630      	mov	r0, r6
   b59ea:	f7ff fe9a 	bl	b5722 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b59ee:	a805      	add	r0, sp, #20
   b59f0:	f7ff fe97 	bl	b5722 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b59f4:	4628      	mov	r0, r5
   b59f6:	b00b      	add	sp, #44	; 0x2c
   b59f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b59fc:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b59fe:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b5a00:	2014      	movs	r0, #20
   b5a02:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b5a06:	9307      	str	r3, [sp, #28]
   b5a08:	f7fe fb45 	bl	b4096 <_Znwj>
   b5a0c:	4601      	mov	r1, r0
   b5a0e:	b118      	cbz	r0, b5a18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5a10:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b5a14:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5a16:	7044      	strb	r4, [r0, #1]
   b5a18:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5a1a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5a1c:	f7ff ff16 	bl	b584c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b5a20:	4b1e      	ldr	r3, [pc, #120]	; (b5a9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b5a22:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b5a24:	2008      	movs	r0, #8
   b5a26:	f7fe fb36 	bl	b4096 <_Znwj>
   b5a2a:	4604      	mov	r4, r0
   b5a2c:	b110      	cbz	r0, b5a34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b5a2e:	a903      	add	r1, sp, #12
   b5a30:	f7ff fec8 	bl	b57c4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5a34:	9600      	str	r6, [sp, #0]
   b5a36:	fa5f f38a 	uxtb.w	r3, sl
   b5a3a:	464a      	mov	r2, r9
   b5a3c:	4641      	mov	r1, r8
   b5a3e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b5a40:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5a42:	f7ff faf7 	bl	b5034 <spark_send_event>
   b5a46:	b9b8      	cbnz	r0, b5a78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5a48:	9b03      	ldr	r3, [sp, #12]
   b5a4a:	785b      	ldrb	r3, [r3, #1]
   b5a4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b5a50:	b993      	cbnz	r3, b5a78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b5a52:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b5a56:	a905      	add	r1, sp, #20
   b5a58:	a803      	add	r0, sp, #12
   b5a5a:	9205      	str	r2, [sp, #20]
   b5a5c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5a60:	f7ff ff18 	bl	b5894 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5a64:	a805      	add	r0, sp, #20
   b5a66:	f7ff fe5c 	bl	b5722 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b5a6a:	a805      	add	r0, sp, #20
   b5a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5a6e:	f7ff feb2 	bl	b57d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b5a72:	a806      	add	r0, sp, #24
   b5a74:	f7fe fdba 	bl	b45ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5a78:	a903      	add	r1, sp, #12
   b5a7a:	a805      	add	r0, sp, #20
   b5a7c:	f7ff fea2 	bl	b57c4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5a80:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5a82:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5a84:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b5a86:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b5a88:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5a8a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5a8c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b5a8e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b5a90:	f7fe fdac 	bl	b45ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5a94:	a804      	add	r0, sp, #16
   b5a96:	f7fe fda9 	bl	b45ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b5a9a:	e7ab      	b.n	b59f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5a9c:	000b5b1d 	.word	0x000b5b1d

000b5aa0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5aa0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5aa4:	4605      	mov	r5, r0
	switch (__op)
   b5aa6:	d103      	bne.n	b5ab0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5aa8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5aaa:	6003      	str	r3, [r0, #0]
      }
   b5aac:	2000      	movs	r0, #0
   b5aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5ab0:	2a02      	cmp	r2, #2
   b5ab2:	d010      	beq.n	b5ad6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5ab4:	2a03      	cmp	r2, #3
   b5ab6:	d1f9      	bne.n	b5aac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5ab8:	6804      	ldr	r4, [r0, #0]
   b5aba:	2c00      	cmp	r4, #0
   b5abc:	d0f6      	beq.n	b5aac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5abe:	f104 0010 	add.w	r0, r4, #16
   b5ac2:	f7ff fe2e 	bl	b5722 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5ac6:	4620      	mov	r0, r4
   b5ac8:	f7fe fb3e 	bl	b4148 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5acc:	2118      	movs	r1, #24
   b5ace:	4620      	mov	r0, r4
   b5ad0:	f7fe fae5 	bl	b409e <_ZdlPvj>
   b5ad4:	e7ea      	b.n	b5aac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5ad6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b5ad8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5ada:	f7fe fadc 	bl	b4096 <_Znwj>
   b5ade:	4604      	mov	r4, r0
   b5ae0:	b150      	cbz	r0, b5af8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b5ae2:	4631      	mov	r1, r6
   b5ae4:	f7ff fec6 	bl	b5874 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5ae8:	6930      	ldr	r0, [r6, #16]
   b5aea:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5aee:	b108      	cbz	r0, b5af4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b5af0:	f002 fa84 	bl	b7ffc <strdup>
        type_(type) {
   b5af4:	6120      	str	r0, [r4, #16]
   b5af6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b5af8:	602c      	str	r4, [r5, #0]
	}
   b5afa:	e7d7      	b.n	b5aac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5afc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5afc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5afe:	2300      	movs	r3, #0
   b5b00:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5b02:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5b04:	4604      	mov	r4, r0
   b5b06:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5b08:	b12b      	cbz	r3, b5b16 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5b0a:	2202      	movs	r2, #2
   b5b0c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5b0e:	68eb      	ldr	r3, [r5, #12]
   b5b10:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5b12:	68ab      	ldr	r3, [r5, #8]
   b5b14:	60a3      	str	r3, [r4, #8]
    }
   b5b16:	4620      	mov	r0, r4
   b5b18:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5b1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5b1e:	b089      	sub	sp, #36	; 0x24
   b5b20:	4604      	mov	r4, r0
   b5b22:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b5b24:	a801      	add	r0, sp, #4
   b5b26:	4611      	mov	r1, r2
   b5b28:	f7ff fe55 	bl	b57d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5b2c:	b1a4      	cbz	r4, b5b58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b5b2e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5b30:	b11d      	cbz	r5, b5b3a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b5b32:	4628      	mov	r0, r5
   b5b34:	f002 fa62 	bl	b7ffc <strdup>
   b5b38:	4605      	mov	r5, r0
   b5b3a:	a801      	add	r0, sp, #4
   b5b3c:	a903      	add	r1, sp, #12
        type_(type) {
   b5b3e:	9503      	str	r5, [sp, #12]
   b5b40:	f8ad 4010 	strh.w	r4, [sp, #16]
   b5b44:	f7ff fea6 	bl	b5894 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5b48:	a803      	add	r0, sp, #12
   b5b4a:	f7ff fdea 	bl	b5722 <_ZN8particle5ErrorD1Ev>
   b5b4e:	a802      	add	r0, sp, #8
   b5b50:	f7fe fd4c 	bl	b45ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5b54:	b009      	add	sp, #36	; 0x24
   b5b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b5b58:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5b5a:	2301      	movs	r3, #1
   b5b5c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b5b60:	2a00      	cmp	r2, #0
   b5b62:	d103      	bne.n	b5b6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b5b64:	e8c5 3f41 	strexb	r1, r3, [r5]
   b5b68:	2900      	cmp	r1, #0
   b5b6a:	d1f7      	bne.n	b5b5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5b6c:	d1ef      	bne.n	b5b4e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b5b6e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5b70:	f3bf 8f5b 	dmb	ish
   b5b74:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5b76:	1d2b      	adds	r3, r5, #4
   b5b78:	f3bf 8f5b 	dmb	ish
   b5b7c:	e853 6f00 	ldrex	r6, [r3]
   b5b80:	e843 4200 	strex	r2, r4, [r3]
   b5b84:	2a00      	cmp	r2, #0
   b5b86:	d1f9      	bne.n	b5b7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5b88:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5b8c:	2e00      	cmp	r6, #0
   b5b8e:	d0de      	beq.n	b5b4e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b5b90:	4620      	mov	r0, r4
   b5b92:	f7ff f9ab 	bl	b4eec <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5b96:	4607      	mov	r7, r0
   b5b98:	b160      	cbz	r0, b5bb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5b9a:	f105 010c 	add.w	r1, r5, #12
   b5b9e:	4630      	mov	r0, r6
   b5ba0:	f7ff fe44 	bl	b582c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5ba4:	4630      	mov	r0, r6
   b5ba6:	f7fe facf 	bl	b4148 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5baa:	2110      	movs	r1, #16
   b5bac:	4630      	mov	r0, r6
   b5bae:	f7fe fa76 	bl	b409e <_ZdlPvj>
   b5bb2:	e7cc      	b.n	b5b4e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5bb4:	4631      	mov	r1, r6
   b5bb6:	a803      	add	r0, sp, #12
   b5bb8:	f7ff ffa0 	bl	b5afc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5bbc:	7b2b      	ldrb	r3, [r5, #12]
   b5bbe:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5bc2:	2010      	movs	r0, #16
   b5bc4:	f7fe fa67 	bl	b4096 <_Znwj>
   b5bc8:	4605      	mov	r5, r0
   b5bca:	b1d0      	cbz	r0, b5c02 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b5bcc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5bce:	2014      	movs	r0, #20
   b5bd0:	f7fe fa61 	bl	b4096 <_Znwj>
   b5bd4:	4604      	mov	r4, r0
   b5bd6:	b178      	cbz	r0, b5bf8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b5bd8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5bda:	4601      	mov	r1, r0
   b5bdc:	a803      	add	r0, sp, #12
   b5bde:	f7ff fba7 	bl	b5330 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5be2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5be4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5be6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5be8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b5bea:	9205      	str	r2, [sp, #20]
   b5bec:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5bee:	60e3      	str	r3, [r4, #12]
   b5bf0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5bf4:	9206      	str	r2, [sp, #24]
   b5bf6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5bf8:	4b06      	ldr	r3, [pc, #24]	; (b5c14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b5bfa:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5bfc:	4b06      	ldr	r3, [pc, #24]	; (b5c18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5bfe:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5c00:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b5c02:	a803      	add	r0, sp, #12
   b5c04:	f7fe faa0 	bl	b4148 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5c08:	2200      	movs	r2, #0
   b5c0a:	4629      	mov	r1, r5
   b5c0c:	4803      	ldr	r0, [pc, #12]	; (b5c1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b5c0e:	f7ff f975 	bl	b4efc <application_thread_invoke>
   b5c12:	e7c7      	b.n	b5ba4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b5c14:	000b583f 	.word	0x000b583f
   b5c18:	000b5c21 	.word	0x000b5c21
   b5c1c:	000b5f05 	.word	0x000b5f05

000b5c20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5c20:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5c22:	b570      	push	{r4, r5, r6, lr}
   b5c24:	4604      	mov	r4, r0
	switch (__op)
   b5c26:	d103      	bne.n	b5c30 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5c28:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5c2a:	6003      	str	r3, [r0, #0]
      }
   b5c2c:	2000      	movs	r0, #0
   b5c2e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5c30:	2a02      	cmp	r2, #2
   b5c32:	d00c      	beq.n	b5c4e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5c34:	2a03      	cmp	r2, #3
   b5c36:	d1f9      	bne.n	b5c2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5c38:	6804      	ldr	r4, [r0, #0]
   b5c3a:	2c00      	cmp	r4, #0
   b5c3c:	d0f6      	beq.n	b5c2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5c3e:	4620      	mov	r0, r4
   b5c40:	f7fe fa82 	bl	b4148 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5c44:	2114      	movs	r1, #20
   b5c46:	4620      	mov	r0, r4
   b5c48:	f7fe fa29 	bl	b409e <_ZdlPvj>
   b5c4c:	e7ee      	b.n	b5c2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5c4e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5c50:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5c52:	f7fe fa20 	bl	b4096 <_Znwj>
   b5c56:	4605      	mov	r5, r0
   b5c58:	b120      	cbz	r0, b5c64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b5c5a:	4631      	mov	r1, r6
   b5c5c:	f7ff ff4e 	bl	b5afc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5c60:	7c33      	ldrb	r3, [r6, #16]
   b5c62:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5c64:	6025      	str	r5, [r4, #0]
	}
   b5c66:	e7e1      	b.n	b5c2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b5c68 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5c68:	4770      	bx	lr

000b5c6a <_ZN9IPAddressD0Ev>:
   b5c6a:	b510      	push	{r4, lr}
   b5c6c:	2118      	movs	r1, #24
   b5c6e:	4604      	mov	r4, r0
   b5c70:	f7fe fa15 	bl	b409e <_ZdlPvj>
   b5c74:	4620      	mov	r0, r4
   b5c76:	bd10      	pop	{r4, pc}

000b5c78 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5c78:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5c7a:	7d03      	ldrb	r3, [r0, #20]
   b5c7c:	2b06      	cmp	r3, #6
{
   b5c7e:	b08d      	sub	sp, #52	; 0x34
   b5c80:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5c82:	f100 0704 	add.w	r7, r0, #4
   b5c86:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5c8a:	d012      	beq.n	b5cb2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b5c8c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5c90:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5c94:	220a      	movs	r2, #10
   b5c96:	4630      	mov	r0, r6
   b5c98:	f7ff fb8f 	bl	b53ba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5c9c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5c9e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5ca0:	d019      	beq.n	b5cd6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5ca2:	2c00      	cmp	r4, #0
   b5ca4:	d0f4      	beq.n	b5c90 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5ca6:	212e      	movs	r1, #46	; 0x2e
   b5ca8:	4630      	mov	r0, r6
   b5caa:	f7ff fb83 	bl	b53b4 <_ZN5Print5printEc>
   b5cae:	4404      	add	r4, r0
   b5cb0:	e7ee      	b.n	b5c90 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5cb2:	232f      	movs	r3, #47	; 0x2f
   b5cb4:	466a      	mov	r2, sp
   b5cb6:	4639      	mov	r1, r7
   b5cb8:	200a      	movs	r0, #10
		buf[0] = 0;
   b5cba:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5cbe:	f7ff f815 	bl	b4cec <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5cc2:	4668      	mov	r0, sp
   b5cc4:	f002 f9b7 	bl	b8036 <strlen>
   b5cc8:	6833      	ldr	r3, [r6, #0]
   b5cca:	4602      	mov	r2, r0
   b5ccc:	68db      	ldr	r3, [r3, #12]
   b5cce:	4669      	mov	r1, sp
   b5cd0:	4630      	mov	r0, r6
   b5cd2:	4798      	blx	r3
   b5cd4:	4604      	mov	r4, r0
    }
    return n;
}
   b5cd6:	4620      	mov	r0, r4
   b5cd8:	b00d      	add	sp, #52	; 0x34
   b5cda:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5cdc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5cdc:	b510      	push	{r4, lr}
   b5cde:	4b05      	ldr	r3, [pc, #20]	; (b5cf4 <_ZN9IPAddressC1Ev+0x18>)
   b5ce0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5ce2:	2211      	movs	r2, #17
   b5ce4:	f840 3b04 	str.w	r3, [r0], #4
   b5ce8:	2100      	movs	r1, #0
   b5cea:	f002 f947 	bl	b7f7c <memset>
}
   b5cee:	4620      	mov	r0, r4
   b5cf0:	bd10      	pop	{r4, pc}
   b5cf2:	bf00      	nop
   b5cf4:	000b82f8 	.word	0x000b82f8

000b5cf8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5cf8:	4603      	mov	r3, r0
   b5cfa:	4a07      	ldr	r2, [pc, #28]	; (b5d18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5cfc:	b510      	push	{r4, lr}
   b5cfe:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5d02:	f101 0210 	add.w	r2, r1, #16
   b5d06:	f851 4b04 	ldr.w	r4, [r1], #4
   b5d0a:	f843 4b04 	str.w	r4, [r3], #4
   b5d0e:	4291      	cmp	r1, r2
   b5d10:	d1f9      	bne.n	b5d06 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5d12:	780a      	ldrb	r2, [r1, #0]
   b5d14:	701a      	strb	r2, [r3, #0]
}
   b5d16:	bd10      	pop	{r4, pc}
   b5d18:	000b82f8 	.word	0x000b82f8

000b5d1c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5d1c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5d1e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5d22:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5d26:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5d2a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5d2e:	2304      	movs	r3, #4
   b5d30:	6041      	str	r1, [r0, #4]
   b5d32:	7503      	strb	r3, [r0, #20]
}
   b5d34:	bd10      	pop	{r4, pc}
	...

000b5d38 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5d38:	b507      	push	{r0, r1, r2, lr}
   b5d3a:	4b06      	ldr	r3, [pc, #24]	; (b5d54 <_ZN9IPAddressC1EPKh+0x1c>)
   b5d3c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5d3e:	78cb      	ldrb	r3, [r1, #3]
   b5d40:	9300      	str	r3, [sp, #0]
   b5d42:	788b      	ldrb	r3, [r1, #2]
   b5d44:	784a      	ldrb	r2, [r1, #1]
   b5d46:	7809      	ldrb	r1, [r1, #0]
   b5d48:	f7ff ffe8 	bl	b5d1c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5d4c:	b003      	add	sp, #12
   b5d4e:	f85d fb04 	ldr.w	pc, [sp], #4
   b5d52:	bf00      	nop
   b5d54:	000b82f8 	.word	0x000b82f8

000b5d58 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5d58:	7441      	strb	r1, [r0, #17]
}
   b5d5a:	4770      	bx	lr

000b5d5c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5d5c:	4770      	bx	lr

000b5d5e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5d5e:	4770      	bx	lr

000b5d60 <_ZN9USBSerial4readEv>:
{
   b5d60:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5d62:	2100      	movs	r1, #0
   b5d64:	7c00      	ldrb	r0, [r0, #16]
   b5d66:	f7ff f891 	bl	b4e8c <HAL_USB_USART_Receive_Data>
}
   b5d6a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5d6e:	bd08      	pop	{r3, pc}

000b5d70 <_ZN9USBSerial4peekEv>:
{
   b5d70:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5d72:	2101      	movs	r1, #1
   b5d74:	7c00      	ldrb	r0, [r0, #16]
   b5d76:	f7ff f889 	bl	b4e8c <HAL_USB_USART_Receive_Data>
}
   b5d7a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5d7e:	bd08      	pop	{r3, pc}

000b5d80 <_ZN9USBSerial17availableForWriteEv>:
{
   b5d80:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5d82:	7c00      	ldrb	r0, [r0, #16]
   b5d84:	f7ff f87a 	bl	b4e7c <HAL_USB_USART_Available_Data_For_Write>
}
   b5d88:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5d8c:	bd08      	pop	{r3, pc}

000b5d8e <_ZN9USBSerial9availableEv>:
{
   b5d8e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5d90:	7c00      	ldrb	r0, [r0, #16]
   b5d92:	f7ff f86b 	bl	b4e6c <HAL_USB_USART_Available_Data>
}
   b5d96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5d9a:	bd08      	pop	{r3, pc}

000b5d9c <_ZN9USBSerial5writeEh>:
{
   b5d9c:	b513      	push	{r0, r1, r4, lr}
   b5d9e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5da0:	7c00      	ldrb	r0, [r0, #16]
{
   b5da2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5da4:	f7ff f86a 	bl	b4e7c <HAL_USB_USART_Available_Data_For_Write>
   b5da8:	2800      	cmp	r0, #0
   b5daa:	9901      	ldr	r1, [sp, #4]
   b5dac:	dc01      	bgt.n	b5db2 <_ZN9USBSerial5writeEh+0x16>
   b5dae:	7c60      	ldrb	r0, [r4, #17]
   b5db0:	b120      	cbz	r0, b5dbc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5db2:	7c20      	ldrb	r0, [r4, #16]
   b5db4:	f7ff f872 	bl	b4e9c <HAL_USB_USART_Send_Data>
   b5db8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5dbc:	b002      	add	sp, #8
   b5dbe:	bd10      	pop	{r4, pc}

000b5dc0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5dc0:	7c00      	ldrb	r0, [r0, #16]
   b5dc2:	f7ff b873 	b.w	b4eac <HAL_USB_USART_Flush_Data>

000b5dc6 <_ZN9USBSerialD0Ev>:
   b5dc6:	b510      	push	{r4, lr}
   b5dc8:	2114      	movs	r1, #20
   b5dca:	4604      	mov	r4, r0
   b5dcc:	f7fe f967 	bl	b409e <_ZdlPvj>
   b5dd0:	4620      	mov	r0, r4
   b5dd2:	bd10      	pop	{r4, pc}

000b5dd4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5dd4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5dda:	4604      	mov	r4, r0
   b5ddc:	4608      	mov	r0, r1
   b5dde:	2100      	movs	r1, #0
   b5de0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5de4:	4b04      	ldr	r3, [pc, #16]	; (b5df8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5de6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5de8:	2301      	movs	r3, #1
  _serial = serial;
   b5dea:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5dec:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5dee:	4611      	mov	r1, r2
   b5df0:	f7ff f82c 	bl	b4e4c <HAL_USB_USART_Init>
}
   b5df4:	4620      	mov	r0, r4
   b5df6:	bd10      	pop	{r4, pc}
   b5df8:	000b830c 	.word	0x000b830c

000b5dfc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5dfc:	7c00      	ldrb	r0, [r0, #16]
   b5dfe:	2200      	movs	r2, #0
   b5e00:	f7ff b82c 	b.w	b4e5c <HAL_USB_USART_Begin>

000b5e04 <_Z19acquireSerialBufferv>:
{
   b5e04:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5e06:	2214      	movs	r2, #20
{
   b5e08:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5e0a:	2100      	movs	r1, #0
   b5e0c:	f002 f8b6 	bl	b7f7c <memset>
}
   b5e10:	4620      	mov	r0, r4
   b5e12:	bd10      	pop	{r4, pc}

000b5e14 <_Z16_fetch_usbserialv>:
{
   b5e14:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5e16:	4c0f      	ldr	r4, [pc, #60]	; (b5e54 <_Z16_fetch_usbserialv+0x40>)
{
   b5e18:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5e1a:	a803      	add	r0, sp, #12
   b5e1c:	f7ff fff2 	bl	b5e04 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5e20:	7821      	ldrb	r1, [r4, #0]
   b5e22:	f3bf 8f5b 	dmb	ish
   b5e26:	f011 0101 	ands.w	r1, r1, #1
   b5e2a:	d10f      	bne.n	b5e4c <_Z16_fetch_usbserialv+0x38>
   b5e2c:	4620      	mov	r0, r4
   b5e2e:	9101      	str	r1, [sp, #4]
   b5e30:	f7fe f937 	bl	b40a2 <__cxa_guard_acquire>
   b5e34:	9901      	ldr	r1, [sp, #4]
   b5e36:	b148      	cbz	r0, b5e4c <_Z16_fetch_usbserialv+0x38>
   b5e38:	aa03      	add	r2, sp, #12
   b5e3a:	4807      	ldr	r0, [pc, #28]	; (b5e58 <_Z16_fetch_usbserialv+0x44>)
   b5e3c:	f7ff ffca 	bl	b5dd4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5e40:	4620      	mov	r0, r4
   b5e42:	f7fe f933 	bl	b40ac <__cxa_guard_release>
   b5e46:	4805      	ldr	r0, [pc, #20]	; (b5e5c <_Z16_fetch_usbserialv+0x48>)
   b5e48:	f002 f884 	bl	b7f54 <atexit>
	return _usbserial;
}
   b5e4c:	4802      	ldr	r0, [pc, #8]	; (b5e58 <_Z16_fetch_usbserialv+0x44>)
   b5e4e:	b008      	add	sp, #32
   b5e50:	bd10      	pop	{r4, pc}
   b5e52:	bf00      	nop
   b5e54:	2003e6f8 	.word	0x2003e6f8
   b5e58:	2003e6fc 	.word	0x2003e6fc
   b5e5c:	000b5d5d 	.word	0x000b5d5d

000b5e60 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5e60:	4770      	bx	lr

000b5e62 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5e62:	7441      	strb	r1, [r0, #17]
}
   b5e64:	4770      	bx	lr

000b5e66 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5e66:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5e68:	7c00      	ldrb	r0, [r0, #16]
   b5e6a:	f7fe ff77 	bl	b4d5c <hal_usart_available_data_for_write>
}
   b5e6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5e72:	bd08      	pop	{r3, pc}

000b5e74 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5e74:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5e76:	7c00      	ldrb	r0, [r0, #16]
   b5e78:	f7fe ff48 	bl	b4d0c <hal_usart_available>
}
   b5e7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5e80:	bd08      	pop	{r3, pc}

000b5e82 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5e82:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5e84:	7c00      	ldrb	r0, [r0, #16]
   b5e86:	f7fe ff51 	bl	b4d2c <hal_usart_peek>
}
   b5e8a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5e8e:	bd08      	pop	{r3, pc}

000b5e90 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5e90:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5e92:	7c00      	ldrb	r0, [r0, #16]
   b5e94:	f7fe ff42 	bl	b4d1c <hal_usart_read>
}
   b5e98:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5e9c:	bd08      	pop	{r3, pc}

000b5e9e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5e9e:	7c00      	ldrb	r0, [r0, #16]
   b5ea0:	f7fe bf4c 	b.w	b4d3c <hal_usart_flush>

000b5ea4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5ea6:	7c45      	ldrb	r5, [r0, #17]
{
   b5ea8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5eaa:	b12d      	cbz	r5, b5eb8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5eac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5eae:	b003      	add	sp, #12
   b5eb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5eb4:	f7fe bf22 	b.w	b4cfc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5eb8:	7c00      	ldrb	r0, [r0, #16]
   b5eba:	9101      	str	r1, [sp, #4]
   b5ebc:	f7fe ff4e 	bl	b4d5c <hal_usart_available_data_for_write>
   b5ec0:	2800      	cmp	r0, #0
   b5ec2:	9901      	ldr	r1, [sp, #4]
   b5ec4:	dcf2      	bgt.n	b5eac <_ZN11USARTSerial5writeEh+0x8>
}
   b5ec6:	4628      	mov	r0, r5
   b5ec8:	b003      	add	sp, #12
   b5eca:	bd30      	pop	{r4, r5, pc}

000b5ecc <_ZN11USARTSerialD0Ev>:
   b5ecc:	b510      	push	{r4, lr}
   b5ece:	2114      	movs	r1, #20
   b5ed0:	4604      	mov	r4, r0
   b5ed2:	f7fe f8e4 	bl	b409e <_ZdlPvj>
   b5ed6:	4620      	mov	r0, r4
   b5ed8:	bd10      	pop	{r4, pc}
	...

000b5edc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5edc:	b510      	push	{r4, lr}
   b5ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5ee2:	4604      	mov	r4, r0
   b5ee4:	4608      	mov	r0, r1
   b5ee6:	4611      	mov	r1, r2
   b5ee8:	2200      	movs	r2, #0
   b5eea:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5eee:	4b04      	ldr	r3, [pc, #16]	; (b5f00 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5ef0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5ef2:	2301      	movs	r3, #1
  _serial = serial;
   b5ef4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5ef6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5ef8:	f7fe ff38 	bl	b4d6c <hal_usart_init_ex>
}
   b5efc:	4620      	mov	r0, r4
   b5efe:	bd10      	pop	{r4, pc}
   b5f00:	000b833c 	.word	0x000b833c

000b5f04 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b5f04:	b510      	push	{r4, lr}
      if (_M_empty())
   b5f06:	6883      	ldr	r3, [r0, #8]
   b5f08:	4604      	mov	r4, r0
   b5f0a:	b90b      	cbnz	r3, b5f10 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b5f0c:	f000 fa86 	bl	b641c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5f10:	68c3      	ldr	r3, [r0, #12]
   b5f12:	4798      	blx	r3
      if (_M_manager)
   b5f14:	68a3      	ldr	r3, [r4, #8]
   b5f16:	b11b      	cbz	r3, b5f20 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5f18:	2203      	movs	r2, #3
   b5f1a:	4621      	mov	r1, r4
   b5f1c:	4620      	mov	r0, r4
   b5f1e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b5f20:	4620      	mov	r0, r4
   b5f22:	2110      	movs	r1, #16
}
   b5f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b5f28:	f7fe b8b9 	b.w	b409e <_ZdlPvj>

000b5f2c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5f2c:	4770      	bx	lr

000b5f2e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f30:	4606      	mov	r6, r0
   b5f32:	4615      	mov	r5, r2
   b5f34:	460c      	mov	r4, r1
   b5f36:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5f38:	42bc      	cmp	r4, r7
   b5f3a:	d006      	beq.n	b5f4a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5f3c:	6833      	ldr	r3, [r6, #0]
   b5f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5f42:	689b      	ldr	r3, [r3, #8]
   b5f44:	4630      	mov	r0, r6
   b5f46:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5f48:	e7f6      	b.n	b5f38 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5f4a:	4628      	mov	r0, r5
   b5f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5f4e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5f4e:	7c00      	ldrb	r0, [r0, #16]
   b5f50:	2200      	movs	r2, #0
   b5f52:	f7fe bf2b 	b.w	b4dac <hal_i2c_write>

000b5f56 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5f56:	7c00      	ldrb	r0, [r0, #16]
   b5f58:	2100      	movs	r1, #0
   b5f5a:	f7fe bf2f 	b.w	b4dbc <hal_i2c_available>

000b5f5e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5f5e:	7c00      	ldrb	r0, [r0, #16]
   b5f60:	2100      	movs	r1, #0
   b5f62:	f7fe bf33 	b.w	b4dcc <hal_i2c_read>

000b5f66 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5f66:	7c00      	ldrb	r0, [r0, #16]
   b5f68:	2100      	movs	r1, #0
   b5f6a:	f7fe bf37 	b.w	b4ddc <hal_i2c_peek>

000b5f6e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5f6e:	7c00      	ldrb	r0, [r0, #16]
   b5f70:	2100      	movs	r1, #0
   b5f72:	f7fe bf3b 	b.w	b4dec <hal_i2c_flush>

000b5f76 <_ZN7TwoWireD0Ev>:
   b5f76:	b510      	push	{r4, lr}
   b5f78:	2114      	movs	r1, #20
   b5f7a:	4604      	mov	r4, r0
   b5f7c:	f7fe f88f 	bl	b409e <_ZdlPvj>
   b5f80:	4620      	mov	r0, r4
   b5f82:	bd10      	pop	{r4, pc}

000b5f84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5f84:	b510      	push	{r4, lr}
   b5f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5f8a:	4604      	mov	r4, r0
   b5f8c:	4608      	mov	r0, r1
   b5f8e:	2100      	movs	r1, #0
   b5f90:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5f94:	4b03      	ldr	r3, [pc, #12]	; (b5fa4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b5f96:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b5f98:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b5f9a:	4611      	mov	r1, r2
   b5f9c:	f7fe ff36 	bl	b4e0c <hal_i2c_init>
}
   b5fa0:	4620      	mov	r0, r4
   b5fa2:	bd10      	pop	{r4, pc}
   b5fa4:	000b836c 	.word	0x000b836c

000b5fa8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5fa8:	2300      	movs	r3, #0
   b5faa:	7c00      	ldrb	r0, [r0, #16]
   b5fac:	461a      	mov	r2, r3
   b5fae:	4619      	mov	r1, r3
   b5fb0:	f7fe bee4 	b.w	b4d7c <hal_i2c_begin>

000b5fb4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b5fb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b5fb6:	2200      	movs	r2, #0
   b5fb8:	2314      	movs	r3, #20
   b5fba:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5fbe:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b5fc2:	780b      	ldrb	r3, [r1, #0]
   b5fc4:	f88d 3008 	strb.w	r3, [sp, #8]
   b5fc8:	684b      	ldr	r3, [r1, #4]
   b5fca:	9303      	str	r3, [sp, #12]
   b5fcc:	68cb      	ldr	r3, [r1, #12]
   b5fce:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b5fd0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b5fd2:	7a0b      	ldrb	r3, [r1, #8]
   b5fd4:	9305      	str	r3, [sp, #20]
   b5fd6:	a901      	add	r1, sp, #4
   b5fd8:	f7fe ff20 	bl	b4e1c <hal_i2c_request_ex>
}
   b5fdc:	b007      	add	sp, #28
   b5fde:	f85d fb04 	ldr.w	pc, [sp], #4

000b5fe2 <_ZN7TwoWire11requestFromEhjh>:
{
   b5fe2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b5fe4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b5fe6:	f88d 1000 	strb.w	r1, [sp]
   b5fea:	f04f 0164 	mov.w	r1, #100	; 0x64
   b5fee:	9103      	str	r1, [sp, #12]
   b5ff0:	bf18      	it	ne
   b5ff2:	2301      	movne	r3, #1
   b5ff4:	4669      	mov	r1, sp
    size_ = size;
   b5ff6:	9201      	str	r2, [sp, #4]
   b5ff8:	f88d 3008 	strb.w	r3, [sp, #8]
   b5ffc:	f7ff ffda 	bl	b5fb4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6000:	b005      	add	sp, #20
   b6002:	f85d fb04 	ldr.w	pc, [sp], #4

000b6006 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6006:	2301      	movs	r3, #1
   b6008:	f7ff bfeb 	b.w	b5fe2 <_ZN7TwoWire11requestFromEhjh>

000b600c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b600c:	7c00      	ldrb	r0, [r0, #16]
   b600e:	2200      	movs	r2, #0
   b6010:	f7fe bebc 	b.w	b4d8c <hal_i2c_begin_transmission>

000b6014 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6014:	7c00      	ldrb	r0, [r0, #16]
   b6016:	2200      	movs	r2, #0
   b6018:	f7fe bec0 	b.w	b4d9c <hal_i2c_end_transmission>

000b601c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b601c:	2200      	movs	r2, #0
   b601e:	6840      	ldr	r0, [r0, #4]
   b6020:	4611      	mov	r1, r2
   b6022:	f7fe bfa7 	b.w	b4f74 <network_ready>

000b6026 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6026:	2200      	movs	r2, #0
   b6028:	6840      	ldr	r0, [r0, #4]
   b602a:	4611      	mov	r1, r2
   b602c:	f7fe bfc2 	b.w	b4fb4 <network_listening>

000b6030 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6030:	2200      	movs	r2, #0
   b6032:	6840      	ldr	r0, [r0, #4]
   b6034:	4611      	mov	r1, r2
   b6036:	f7fe bfcd 	b.w	b4fd4 <network_get_listen_timeout>

000b603a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b603a:	6840      	ldr	r0, [r0, #4]
   b603c:	2200      	movs	r2, #0
   b603e:	f7fe bfc1 	b.w	b4fc4 <network_set_listen_timeout>

000b6042 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6042:	6840      	ldr	r0, [r0, #4]
   b6044:	2200      	movs	r2, #0
   b6046:	f081 0101 	eor.w	r1, r1, #1
   b604a:	f7fe bfab 	b.w	b4fa4 <network_listen>

000b604e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b604e:	2300      	movs	r3, #0
   b6050:	6840      	ldr	r0, [r0, #4]
   b6052:	461a      	mov	r2, r3
   b6054:	4619      	mov	r1, r3
   b6056:	f7fe bf9d 	b.w	b4f94 <network_off>

000b605a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b605a:	2300      	movs	r3, #0
   b605c:	6840      	ldr	r0, [r0, #4]
   b605e:	461a      	mov	r2, r3
   b6060:	4619      	mov	r1, r3
   b6062:	f7fe bf8f 	b.w	b4f84 <network_on>

000b6066 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6066:	2200      	movs	r2, #0
   b6068:	6840      	ldr	r0, [r0, #4]
   b606a:	4611      	mov	r1, r2
   b606c:	f7fe bf72 	b.w	b4f54 <network_connecting>

000b6070 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6070:	6840      	ldr	r0, [r0, #4]
   b6072:	2200      	movs	r2, #0
   b6074:	2102      	movs	r1, #2
   b6076:	f7fe bf75 	b.w	b4f64 <network_disconnect>

000b607a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b607a:	2300      	movs	r3, #0
   b607c:	6840      	ldr	r0, [r0, #4]
   b607e:	461a      	mov	r2, r3
   b6080:	f7fe bf60 	b.w	b4f44 <network_connect>

000b6084 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6084:	4b02      	ldr	r3, [pc, #8]	; (b6090 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6086:	2204      	movs	r2, #4
   b6088:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b608a:	4a02      	ldr	r2, [pc, #8]	; (b6094 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b608c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b608e:	4770      	bx	lr
   b6090:	2003e710 	.word	0x2003e710
   b6094:	000b8394 	.word	0x000b8394

000b6098 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6098:	2300      	movs	r3, #0
   b609a:	6840      	ldr	r0, [r0, #4]
   b609c:	461a      	mov	r2, r3
   b609e:	f7fe bf51 	b.w	b4f44 <network_connect>

000b60a2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b60a2:	6840      	ldr	r0, [r0, #4]
   b60a4:	2200      	movs	r2, #0
   b60a6:	2102      	movs	r1, #2
   b60a8:	f7fe bf5c 	b.w	b4f64 <network_disconnect>

000b60ac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b60ac:	2200      	movs	r2, #0
   b60ae:	6840      	ldr	r0, [r0, #4]
   b60b0:	4611      	mov	r1, r2
   b60b2:	f7fe bf4f 	b.w	b4f54 <network_connecting>

000b60b6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b60b6:	2200      	movs	r2, #0
   b60b8:	6840      	ldr	r0, [r0, #4]
   b60ba:	4611      	mov	r1, r2
   b60bc:	f7fe bf5a 	b.w	b4f74 <network_ready>

000b60c0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b60c0:	2300      	movs	r3, #0
   b60c2:	6840      	ldr	r0, [r0, #4]
   b60c4:	461a      	mov	r2, r3
   b60c6:	4619      	mov	r1, r3
   b60c8:	f7fe bf5c 	b.w	b4f84 <network_on>

000b60cc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b60cc:	2300      	movs	r3, #0
   b60ce:	6840      	ldr	r0, [r0, #4]
   b60d0:	461a      	mov	r2, r3
   b60d2:	4619      	mov	r1, r3
   b60d4:	f7fe bf5e 	b.w	b4f94 <network_off>

000b60d8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b60d8:	6840      	ldr	r0, [r0, #4]
   b60da:	2100      	movs	r1, #0
   b60dc:	f7fe bf82 	b.w	b4fe4 <network_is_on>

000b60e0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b60e0:	6840      	ldr	r0, [r0, #4]
   b60e2:	2100      	movs	r1, #0
   b60e4:	f7fe bf86 	b.w	b4ff4 <network_is_off>

000b60e8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b60e8:	6840      	ldr	r0, [r0, #4]
   b60ea:	2200      	movs	r2, #0
   b60ec:	f081 0101 	eor.w	r1, r1, #1
   b60f0:	f7fe bf58 	b.w	b4fa4 <network_listen>

000b60f4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b60f4:	6840      	ldr	r0, [r0, #4]
   b60f6:	2200      	movs	r2, #0
   b60f8:	f7fe bf64 	b.w	b4fc4 <network_set_listen_timeout>

000b60fc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b60fc:	2200      	movs	r2, #0
   b60fe:	6840      	ldr	r0, [r0, #4]
   b6100:	4611      	mov	r1, r2
   b6102:	f7fe bf67 	b.w	b4fd4 <network_get_listen_timeout>

000b6106 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6106:	2200      	movs	r2, #0
   b6108:	6840      	ldr	r0, [r0, #4]
   b610a:	4611      	mov	r1, r2
   b610c:	f7fe bf52 	b.w	b4fb4 <network_listening>

000b6110 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6114:	b095      	sub	sp, #84	; 0x54
   b6116:	4614      	mov	r4, r2
   b6118:	460d      	mov	r5, r1
   b611a:	4607      	mov	r7, r0
    IPAddress addr;
   b611c:	f7ff fdde 	bl	b5cdc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6120:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6122:	221c      	movs	r2, #28
   b6124:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6126:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6128:	f001 ff28 	bl	b7f7c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b612c:	2340      	movs	r3, #64	; 0x40
   b612e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6130:	4620      	mov	r0, r4
   b6132:	466b      	mov	r3, sp
   b6134:	aa0c      	add	r2, sp, #48	; 0x30
   b6136:	2100      	movs	r1, #0
   b6138:	f7fe fd38 	bl	b4bac <netdb_getaddrinfo>
    if (!r) {
   b613c:	4604      	mov	r4, r0
   b613e:	2800      	cmp	r0, #0
   b6140:	d14b      	bne.n	b61da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6142:	4602      	mov	r2, r0
   b6144:	2101      	movs	r1, #1
   b6146:	6868      	ldr	r0, [r5, #4]
   b6148:	f7fe ff14 	bl	b4f74 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b614c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b614e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6150:	4622      	mov	r2, r4
   b6152:	6868      	ldr	r0, [r5, #4]
   b6154:	f7fe ff0e 	bl	b4f74 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6158:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b615a:	4681      	mov	r9, r0
        bool ok = false;
   b615c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b615e:	2e00      	cmp	r6, #0
   b6160:	d03b      	beq.n	b61da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6162:	2900      	cmp	r1, #0
   b6164:	d139      	bne.n	b61da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6166:	6873      	ldr	r3, [r6, #4]
   b6168:	2b02      	cmp	r3, #2
   b616a:	d003      	beq.n	b6174 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b616c:	2b0a      	cmp	r3, #10
   b616e:	d011      	beq.n	b6194 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6170:	69f6      	ldr	r6, [r6, #28]
   b6172:	e7f4      	b.n	b615e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6174:	f1b8 0f00 	cmp.w	r8, #0
   b6178:	d0fa      	beq.n	b6170 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b617a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b617c:	a806      	add	r0, sp, #24
   b617e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6180:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6182:	f7ff fdd9 	bl	b5d38 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6188:	1d3c      	adds	r4, r7, #4
   b618a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b618c:	682b      	ldr	r3, [r5, #0]
   b618e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6190:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6192:	e7ed      	b.n	b6170 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6194:	f1b9 0f00 	cmp.w	r9, #0
   b6198:	d0ea      	beq.n	b6170 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b619a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b619c:	2210      	movs	r2, #16
   b619e:	a801      	add	r0, sp, #4
   b61a0:	f001 feec 	bl	b7f7c <memset>
                    a.v = 6;
   b61a4:	2306      	movs	r3, #6
   b61a6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b61aa:	ad01      	add	r5, sp, #4
   b61ac:	f104 0308 	add.w	r3, r4, #8
   b61b0:	3418      	adds	r4, #24
   b61b2:	6818      	ldr	r0, [r3, #0]
   b61b4:	6859      	ldr	r1, [r3, #4]
   b61b6:	462a      	mov	r2, r5
   b61b8:	c203      	stmia	r2!, {r0, r1}
   b61ba:	3308      	adds	r3, #8
   b61bc:	42a3      	cmp	r3, r4
   b61be:	4615      	mov	r5, r2
   b61c0:	d1f7      	bne.n	b61b2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b61c2:	a901      	add	r1, sp, #4
   b61c4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b61c6:	ad07      	add	r5, sp, #28
   b61c8:	f7ff fd96 	bl	b5cf8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b61cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b61ce:	1d3c      	adds	r4, r7, #4
   b61d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b61d2:	682b      	ldr	r3, [r5, #0]
   b61d4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b61d6:	4649      	mov	r1, r9
   b61d8:	e7ca      	b.n	b6170 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b61da:	9800      	ldr	r0, [sp, #0]
   b61dc:	f7fe fcde 	bl	b4b9c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b61e0:	4638      	mov	r0, r7
   b61e2:	b015      	add	sp, #84	; 0x54
   b61e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b61e8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b61e8:	4b02      	ldr	r3, [pc, #8]	; (b61f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b61ea:	4a03      	ldr	r2, [pc, #12]	; (b61f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b61ec:	601a      	str	r2, [r3, #0]
   b61ee:	2200      	movs	r2, #0
   b61f0:	605a      	str	r2, [r3, #4]

} // spark
   b61f2:	4770      	bx	lr
   b61f4:	2003e718 	.word	0x2003e718
   b61f8:	000b83d0 	.word	0x000b83d0

000b61fc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b61fc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b61fe:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6200:	d902      	bls.n	b6208 <pinAvailable+0xc>
    return false;
   b6202:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6204:	b002      	add	sp, #8
   b6206:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6208:	f1a0 030b 	sub.w	r3, r0, #11
   b620c:	2b02      	cmp	r3, #2
   b620e:	d81a      	bhi.n	b6246 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6210:	4c17      	ldr	r4, [pc, #92]	; (b6270 <pinAvailable+0x74>)
   b6212:	7821      	ldrb	r1, [r4, #0]
   b6214:	f3bf 8f5b 	dmb	ish
   b6218:	f011 0101 	ands.w	r1, r1, #1
   b621c:	d10b      	bne.n	b6236 <pinAvailable+0x3a>
   b621e:	4620      	mov	r0, r4
   b6220:	9101      	str	r1, [sp, #4]
   b6222:	f7fd ff3e 	bl	b40a2 <__cxa_guard_acquire>
   b6226:	9901      	ldr	r1, [sp, #4]
   b6228:	b128      	cbz	r0, b6236 <pinAvailable+0x3a>
   b622a:	4812      	ldr	r0, [pc, #72]	; (b6274 <pinAvailable+0x78>)
   b622c:	f7fe ffb0 	bl	b5190 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6230:	4620      	mov	r0, r4
   b6232:	f7fd ff3b 	bl	b40ac <__cxa_guard_release>
   b6236:	4b0f      	ldr	r3, [pc, #60]	; (b6274 <pinAvailable+0x78>)
   b6238:	7818      	ldrb	r0, [r3, #0]
   b623a:	f7fe fdff 	bl	b4e3c <hal_spi_is_enabled>
   b623e:	2800      	cmp	r0, #0
   b6240:	d1df      	bne.n	b6202 <pinAvailable+0x6>
  return true; // 'pin' is available
   b6242:	2001      	movs	r0, #1
   b6244:	e7de      	b.n	b6204 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6246:	2801      	cmp	r0, #1
   b6248:	d809      	bhi.n	b625e <pinAvailable+0x62>
   b624a:	f000 f8c1 	bl	b63d0 <_Z19__fetch_global_Wirev>
   b624e:	2100      	movs	r1, #0
   b6250:	7c00      	ldrb	r0, [r0, #16]
   b6252:	f7fe fdd3 	bl	b4dfc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6256:	f080 0001 	eor.w	r0, r0, #1
   b625a:	b2c0      	uxtb	r0, r0
   b625c:	e7d2      	b.n	b6204 <pinAvailable+0x8>
   b625e:	3809      	subs	r0, #9
   b6260:	2801      	cmp	r0, #1
   b6262:	d8ee      	bhi.n	b6242 <pinAvailable+0x46>
   b6264:	f000 f878 	bl	b6358 <_Z22__fetch_global_Serial1v>
   b6268:	7c00      	ldrb	r0, [r0, #16]
   b626a:	f7fe fd6f 	bl	b4d4c <hal_usart_is_enabled>
   b626e:	e7f2      	b.n	b6256 <pinAvailable+0x5a>
   b6270:	2003e720 	.word	0x2003e720
   b6274:	2003e724 	.word	0x2003e724

000b6278 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6278:	2823      	cmp	r0, #35	; 0x23
{
   b627a:	b538      	push	{r3, r4, r5, lr}
   b627c:	4604      	mov	r4, r0
   b627e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6280:	d80a      	bhi.n	b6298 <pinMode+0x20>
   b6282:	29ff      	cmp	r1, #255	; 0xff
   b6284:	d008      	beq.n	b6298 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6286:	f7ff ffb9 	bl	b61fc <pinAvailable>
   b628a:	b128      	cbz	r0, b6298 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b628c:	4629      	mov	r1, r5
   b628e:	4620      	mov	r0, r4
}
   b6290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6294:	f7fe bc9a 	b.w	b4bcc <HAL_Pin_Mode>
}
   b6298:	bd38      	pop	{r3, r4, r5, pc}

000b629a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b629a:	b538      	push	{r3, r4, r5, lr}
   b629c:	4604      	mov	r4, r0
   b629e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b62a0:	f7fe fc9c 	bl	b4bdc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b62a4:	28ff      	cmp	r0, #255	; 0xff
   b62a6:	d010      	beq.n	b62ca <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b62a8:	2806      	cmp	r0, #6
   b62aa:	d804      	bhi.n	b62b6 <digitalWrite+0x1c>
   b62ac:	234d      	movs	r3, #77	; 0x4d
   b62ae:	fa23 f000 	lsr.w	r0, r3, r0
   b62b2:	07c3      	lsls	r3, r0, #31
   b62b4:	d409      	bmi.n	b62ca <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b62b6:	4620      	mov	r0, r4
   b62b8:	f7ff ffa0 	bl	b61fc <pinAvailable>
   b62bc:	b128      	cbz	r0, b62ca <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b62be:	4629      	mov	r1, r5
   b62c0:	4620      	mov	r0, r4
}
   b62c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b62c6:	f7fe bc91 	b.w	b4bec <HAL_GPIO_Write>
}
   b62ca:	bd38      	pop	{r3, r4, r5, pc}

000b62cc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b62cc:	b510      	push	{r4, lr}
   b62ce:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b62d0:	f7fe fc84 	bl	b4bdc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b62d4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b62d6:	b2db      	uxtb	r3, r3
   b62d8:	2b01      	cmp	r3, #1
   b62da:	d908      	bls.n	b62ee <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b62dc:	4620      	mov	r0, r4
   b62de:	f7ff ff8d 	bl	b61fc <pinAvailable>
   b62e2:	b120      	cbz	r0, b62ee <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b62e4:	4620      	mov	r0, r4
}
   b62e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b62ea:	f7fe bc87 	b.w	b4bfc <HAL_GPIO_Read>
}
   b62ee:	2000      	movs	r0, #0
   b62f0:	bd10      	pop	{r4, pc}

000b62f2 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b62f2:	280d      	cmp	r0, #13
{
   b62f4:	b510      	push	{r4, lr}
   b62f6:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b62f8:	bf9c      	itt	ls
   b62fa:	340e      	addls	r4, #14
   b62fc:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b62fe:	4620      	mov	r0, r4
   b6300:	f7ff ff7c 	bl	b61fc <pinAvailable>
   b6304:	b150      	cbz	r0, b631c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b6306:	2103      	movs	r1, #3
   b6308:	4620      	mov	r0, r4
   b630a:	f7fe fc57 	bl	b4bbc <HAL_Validate_Pin_Function>
   b630e:	2803      	cmp	r0, #3
   b6310:	d104      	bne.n	b631c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b6312:	4620      	mov	r0, r4
}
   b6314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b6318:	f7fe bc78 	b.w	b4c0c <hal_adc_read>
}
   b631c:	2000      	movs	r0, #0
   b631e:	bd10      	pop	{r4, pc}

000b6320 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6320:	4770      	bx	lr
	...

000b6324 <_Z20acquireSerial1Bufferv>:
{
   b6324:	b538      	push	{r3, r4, r5, lr}
   b6326:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6328:	2514      	movs	r5, #20
   b632a:	462a      	mov	r2, r5
   b632c:	2100      	movs	r1, #0
   b632e:	f001 fe25 	bl	b7f7c <memset>
   b6332:	8025      	strh	r5, [r4, #0]
   b6334:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6336:	4907      	ldr	r1, [pc, #28]	; (b6354 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6338:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b633a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b633c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b633e:	f000 f86b 	bl	b6418 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6342:	4904      	ldr	r1, [pc, #16]	; (b6354 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6344:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6346:	4628      	mov	r0, r5
   b6348:	f000 f866 	bl	b6418 <_ZnajRKSt9nothrow_t>
    };
   b634c:	60e0      	str	r0, [r4, #12]
}
   b634e:	4620      	mov	r0, r4
   b6350:	bd38      	pop	{r3, r4, r5, pc}
   b6352:	bf00      	nop
   b6354:	000b8404 	.word	0x000b8404

000b6358 <_Z22__fetch_global_Serial1v>:
{
   b6358:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b635a:	4d0e      	ldr	r5, [pc, #56]	; (b6394 <_Z22__fetch_global_Serial1v+0x3c>)
   b635c:	7829      	ldrb	r1, [r5, #0]
   b635e:	f3bf 8f5b 	dmb	ish
   b6362:	f011 0401 	ands.w	r4, r1, #1
{
   b6366:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6368:	d111      	bne.n	b638e <_Z22__fetch_global_Serial1v+0x36>
   b636a:	4628      	mov	r0, r5
   b636c:	f7fd fe99 	bl	b40a2 <__cxa_guard_acquire>
   b6370:	b168      	cbz	r0, b638e <_Z22__fetch_global_Serial1v+0x36>
   b6372:	a801      	add	r0, sp, #4
   b6374:	f7ff ffd6 	bl	b6324 <_Z20acquireSerial1Bufferv>
   b6378:	aa01      	add	r2, sp, #4
   b637a:	4621      	mov	r1, r4
   b637c:	4806      	ldr	r0, [pc, #24]	; (b6398 <_Z22__fetch_global_Serial1v+0x40>)
   b637e:	f7ff fdad 	bl	b5edc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6382:	4628      	mov	r0, r5
   b6384:	f7fd fe92 	bl	b40ac <__cxa_guard_release>
   b6388:	4804      	ldr	r0, [pc, #16]	; (b639c <_Z22__fetch_global_Serial1v+0x44>)
   b638a:	f001 fde3 	bl	b7f54 <atexit>
    return serial1;
}
   b638e:	4802      	ldr	r0, [pc, #8]	; (b6398 <_Z22__fetch_global_Serial1v+0x40>)
   b6390:	b007      	add	sp, #28
   b6392:	bd30      	pop	{r4, r5, pc}
   b6394:	2003e72c 	.word	0x2003e72c
   b6398:	2003e730 	.word	0x2003e730
   b639c:	000b6321 	.word	0x000b6321

000b63a0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b63a0:	4770      	bx	lr
	...

000b63a4 <_Z17acquireWireBufferv>:
{
   b63a4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b63a6:	2520      	movs	r5, #32
   b63a8:	2314      	movs	r3, #20
{
   b63aa:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b63ac:	6003      	str	r3, [r0, #0]
   b63ae:	6085      	str	r5, [r0, #8]
   b63b0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b63b2:	4906      	ldr	r1, [pc, #24]	; (b63cc <_Z17acquireWireBufferv+0x28>)
   b63b4:	4628      	mov	r0, r5
   b63b6:	f000 f82f 	bl	b6418 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b63ba:	4904      	ldr	r1, [pc, #16]	; (b63cc <_Z17acquireWireBufferv+0x28>)
	};
   b63bc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b63be:	4628      	mov	r0, r5
   b63c0:	f000 f82a 	bl	b6418 <_ZnajRKSt9nothrow_t>
	};
   b63c4:	60e0      	str	r0, [r4, #12]
}
   b63c6:	4620      	mov	r0, r4
   b63c8:	bd38      	pop	{r3, r4, r5, pc}
   b63ca:	bf00      	nop
   b63cc:	000b8404 	.word	0x000b8404

000b63d0 <_Z19__fetch_global_Wirev>:
{
   b63d0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b63d2:	4d0e      	ldr	r5, [pc, #56]	; (b640c <_Z19__fetch_global_Wirev+0x3c>)
   b63d4:	7829      	ldrb	r1, [r5, #0]
   b63d6:	f3bf 8f5b 	dmb	ish
   b63da:	f011 0401 	ands.w	r4, r1, #1
{
   b63de:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b63e0:	d111      	bne.n	b6406 <_Z19__fetch_global_Wirev+0x36>
   b63e2:	4628      	mov	r0, r5
   b63e4:	f7fd fe5d 	bl	b40a2 <__cxa_guard_acquire>
   b63e8:	b168      	cbz	r0, b6406 <_Z19__fetch_global_Wirev+0x36>
   b63ea:	a801      	add	r0, sp, #4
   b63ec:	f7ff ffda 	bl	b63a4 <_Z17acquireWireBufferv>
   b63f0:	aa01      	add	r2, sp, #4
   b63f2:	4621      	mov	r1, r4
   b63f4:	4806      	ldr	r0, [pc, #24]	; (b6410 <_Z19__fetch_global_Wirev+0x40>)
   b63f6:	f7ff fdc5 	bl	b5f84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b63fa:	4628      	mov	r0, r5
   b63fc:	f7fd fe56 	bl	b40ac <__cxa_guard_release>
   b6400:	4804      	ldr	r0, [pc, #16]	; (b6414 <_Z19__fetch_global_Wirev+0x44>)
   b6402:	f001 fda7 	bl	b7f54 <atexit>
	return wire;
}
   b6406:	4802      	ldr	r0, [pc, #8]	; (b6410 <_Z19__fetch_global_Wirev+0x40>)
   b6408:	b007      	add	sp, #28
   b640a:	bd30      	pop	{r4, r5, pc}
   b640c:	2003e748 	.word	0x2003e748
   b6410:	2003e74c 	.word	0x2003e74c
   b6414:	000b63a1 	.word	0x000b63a1

000b6418 <_ZnajRKSt9nothrow_t>:
   b6418:	f7fd be3f 	b.w	b409a <_Znaj>

000b641c <_ZSt25__throw_bad_function_callv>:
   b641c:	b508      	push	{r3, lr}
   b641e:	f7fe fe49 	bl	b50b4 <abort>
   b6422:	0000      	movs	r0, r0
   b6424:	0000      	movs	r0, r0
	...

000b6428 <pow>:
   b6428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b642a:	ed2d 8b02 	vpush	{d8}
   b642e:	ec57 6b10 	vmov	r6, r7, d0
   b6432:	ec55 4b11 	vmov	r4, r5, d1
   b6436:	f000 f8cb 	bl	b65d0 <__ieee754_pow>
   b643a:	4b63      	ldr	r3, [pc, #396]	; (b65c8 <pow+0x1a0>)
   b643c:	eeb0 8a40 	vmov.f32	s16, s0
   b6440:	eef0 8a60 	vmov.f32	s17, s1
   b6444:	f993 3000 	ldrsb.w	r3, [r3]
   b6448:	3301      	adds	r3, #1
   b644a:	d02a      	beq.n	b64a2 <pow+0x7a>
   b644c:	4622      	mov	r2, r4
   b644e:	462b      	mov	r3, r5
   b6450:	4620      	mov	r0, r4
   b6452:	4629      	mov	r1, r5
   b6454:	f001 fcc4 	bl	b7de0 <__aeabi_dcmpun>
   b6458:	bb18      	cbnz	r0, b64a2 <pow+0x7a>
   b645a:	4632      	mov	r2, r6
   b645c:	463b      	mov	r3, r7
   b645e:	4630      	mov	r0, r6
   b6460:	4639      	mov	r1, r7
   b6462:	f001 fcbd 	bl	b7de0 <__aeabi_dcmpun>
   b6466:	2800      	cmp	r0, #0
   b6468:	d144      	bne.n	b64f4 <pow+0xcc>
   b646a:	2200      	movs	r2, #0
   b646c:	2300      	movs	r3, #0
   b646e:	4630      	mov	r0, r6
   b6470:	4639      	mov	r1, r7
   b6472:	f001 fc83 	bl	b7d7c <__aeabi_dcmpeq>
   b6476:	b1d8      	cbz	r0, b64b0 <pow+0x88>
   b6478:	2200      	movs	r2, #0
   b647a:	2300      	movs	r3, #0
   b647c:	4620      	mov	r0, r4
   b647e:	4629      	mov	r1, r5
   b6480:	f001 fc7c 	bl	b7d7c <__aeabi_dcmpeq>
   b6484:	2800      	cmp	r0, #0
   b6486:	d13d      	bne.n	b6504 <pow+0xdc>
   b6488:	ec45 4b10 	vmov	d0, r4, r5
   b648c:	f000 ff10 	bl	b72b0 <finite>
   b6490:	b138      	cbz	r0, b64a2 <pow+0x7a>
   b6492:	4620      	mov	r0, r4
   b6494:	4629      	mov	r1, r5
   b6496:	2200      	movs	r2, #0
   b6498:	2300      	movs	r3, #0
   b649a:	f001 fc79 	bl	b7d90 <__aeabi_dcmplt>
   b649e:	2800      	cmp	r0, #0
   b64a0:	d15c      	bne.n	b655c <pow+0x134>
   b64a2:	eeb0 0a48 	vmov.f32	s0, s16
   b64a6:	eef0 0a68 	vmov.f32	s1, s17
   b64aa:	ecbd 8b02 	vpop	{d8}
   b64ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b64b0:	eeb0 0a48 	vmov.f32	s0, s16
   b64b4:	eef0 0a68 	vmov.f32	s1, s17
   b64b8:	f000 fefa 	bl	b72b0 <finite>
   b64bc:	b358      	cbz	r0, b6516 <pow+0xee>
   b64be:	ec51 0b18 	vmov	r0, r1, d8
   b64c2:	2200      	movs	r2, #0
   b64c4:	2300      	movs	r3, #0
   b64c6:	f001 fc59 	bl	b7d7c <__aeabi_dcmpeq>
   b64ca:	2800      	cmp	r0, #0
   b64cc:	d0e9      	beq.n	b64a2 <pow+0x7a>
   b64ce:	ec47 6b10 	vmov	d0, r6, r7
   b64d2:	f000 feed 	bl	b72b0 <finite>
   b64d6:	2800      	cmp	r0, #0
   b64d8:	d0e3      	beq.n	b64a2 <pow+0x7a>
   b64da:	ec45 4b10 	vmov	d0, r4, r5
   b64de:	f000 fee7 	bl	b72b0 <finite>
   b64e2:	2800      	cmp	r0, #0
   b64e4:	d0dd      	beq.n	b64a2 <pow+0x7a>
   b64e6:	f7fe fdf5 	bl	b50d4 <__errno>
   b64ea:	2322      	movs	r3, #34	; 0x22
   b64ec:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b65a8 <pow+0x180>
   b64f0:	6003      	str	r3, [r0, #0]
   b64f2:	e7d6      	b.n	b64a2 <pow+0x7a>
   b64f4:	4620      	mov	r0, r4
   b64f6:	4629      	mov	r1, r5
   b64f8:	2200      	movs	r2, #0
   b64fa:	2300      	movs	r3, #0
   b64fc:	f001 fc3e 	bl	b7d7c <__aeabi_dcmpeq>
   b6500:	2800      	cmp	r0, #0
   b6502:	d0ce      	beq.n	b64a2 <pow+0x7a>
   b6504:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b65b0 <pow+0x188>
   b6508:	eeb0 0a48 	vmov.f32	s0, s16
   b650c:	eef0 0a68 	vmov.f32	s1, s17
   b6510:	ecbd 8b02 	vpop	{d8}
   b6514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6516:	ec47 6b10 	vmov	d0, r6, r7
   b651a:	f000 fec9 	bl	b72b0 <finite>
   b651e:	2800      	cmp	r0, #0
   b6520:	d0cd      	beq.n	b64be <pow+0x96>
   b6522:	ec45 4b10 	vmov	d0, r4, r5
   b6526:	f000 fec3 	bl	b72b0 <finite>
   b652a:	2800      	cmp	r0, #0
   b652c:	d0c7      	beq.n	b64be <pow+0x96>
   b652e:	ec53 2b18 	vmov	r2, r3, d8
   b6532:	ee18 0a10 	vmov	r0, s16
   b6536:	4619      	mov	r1, r3
   b6538:	f001 fc52 	bl	b7de0 <__aeabi_dcmpun>
   b653c:	bb20      	cbnz	r0, b6588 <pow+0x160>
   b653e:	f7fe fdc9 	bl	b50d4 <__errno>
   b6542:	4603      	mov	r3, r0
   b6544:	2222      	movs	r2, #34	; 0x22
   b6546:	601a      	str	r2, [r3, #0]
   b6548:	4630      	mov	r0, r6
   b654a:	4639      	mov	r1, r7
   b654c:	2200      	movs	r2, #0
   b654e:	2300      	movs	r3, #0
   b6550:	f001 fc1e 	bl	b7d90 <__aeabi_dcmplt>
   b6554:	b948      	cbnz	r0, b656a <pow+0x142>
   b6556:	ed9f 8b18 	vldr	d8, [pc, #96]	; b65b8 <pow+0x190>
   b655a:	e7a2      	b.n	b64a2 <pow+0x7a>
   b655c:	f7fe fdba 	bl	b50d4 <__errno>
   b6560:	2321      	movs	r3, #33	; 0x21
   b6562:	ed9f 8b17 	vldr	d8, [pc, #92]	; b65c0 <pow+0x198>
   b6566:	6003      	str	r3, [r0, #0]
   b6568:	e79b      	b.n	b64a2 <pow+0x7a>
   b656a:	ec45 4b10 	vmov	d0, r4, r5
   b656e:	f000 feb3 	bl	b72d8 <rint>
   b6572:	4622      	mov	r2, r4
   b6574:	ec51 0b10 	vmov	r0, r1, d0
   b6578:	462b      	mov	r3, r5
   b657a:	f001 fbff 	bl	b7d7c <__aeabi_dcmpeq>
   b657e:	2800      	cmp	r0, #0
   b6580:	d1e9      	bne.n	b6556 <pow+0x12e>
   b6582:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b65c0 <pow+0x198>
   b6586:	e78c      	b.n	b64a2 <pow+0x7a>
   b6588:	f7fe fda4 	bl	b50d4 <__errno>
   b658c:	2200      	movs	r2, #0
   b658e:	2300      	movs	r3, #0
   b6590:	2121      	movs	r1, #33	; 0x21
   b6592:	6001      	str	r1, [r0, #0]
   b6594:	4610      	mov	r0, r2
   b6596:	4619      	mov	r1, r3
   b6598:	f001 fab2 	bl	b7b00 <__aeabi_ddiv>
   b659c:	ec41 0b18 	vmov	d8, r0, r1
   b65a0:	e77f      	b.n	b64a2 <pow+0x7a>
   b65a2:	bf00      	nop
   b65a4:	f3af 8000 	nop.w
	...
   b65b4:	3ff00000 	.word	0x3ff00000
   b65b8:	00000000 	.word	0x00000000
   b65bc:	7ff00000 	.word	0x7ff00000
   b65c0:	00000000 	.word	0x00000000
   b65c4:	fff00000 	.word	0xfff00000
   b65c8:	2003e5d0 	.word	0x2003e5d0
   b65cc:	00000000 	.word	0x00000000

000b65d0 <__ieee754_pow>:
   b65d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b65d4:	ec57 6b11 	vmov	r6, r7, d1
   b65d8:	ed2d 8b0c 	vpush	{d8-d13}
   b65dc:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b65e0:	ea5a 0206 	orrs.w	r2, sl, r6
   b65e4:	b087      	sub	sp, #28
   b65e6:	d03d      	beq.n	b6664 <__ieee754_pow+0x94>
   b65e8:	ec55 4b10 	vmov	r4, r5, d0
   b65ec:	4972      	ldr	r1, [pc, #456]	; (b67b8 <__ieee754_pow+0x1e8>)
   b65ee:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b65f2:	4588      	cmp	r8, r1
   b65f4:	ee10 2a10 	vmov	r2, s0
   b65f8:	46a9      	mov	r9, r5
   b65fa:	dc2c      	bgt.n	b6656 <__ieee754_pow+0x86>
   b65fc:	ee11 3a10 	vmov	r3, s2
   b6600:	46bb      	mov	fp, r7
   b6602:	d036      	beq.n	b6672 <__ieee754_pow+0xa2>
   b6604:	458a      	cmp	sl, r1
   b6606:	dc26      	bgt.n	b6656 <__ieee754_pow+0x86>
   b6608:	496b      	ldr	r1, [pc, #428]	; (b67b8 <__ieee754_pow+0x1e8>)
   b660a:	458a      	cmp	sl, r1
   b660c:	d021      	beq.n	b6652 <__ieee754_pow+0x82>
   b660e:	f1b9 0f00 	cmp.w	r9, #0
   b6612:	db39      	blt.n	b6688 <__ieee754_pow+0xb8>
   b6614:	2100      	movs	r1, #0
   b6616:	9100      	str	r1, [sp, #0]
   b6618:	2b00      	cmp	r3, #0
   b661a:	d151      	bne.n	b66c0 <__ieee754_pow+0xf0>
   b661c:	4b66      	ldr	r3, [pc, #408]	; (b67b8 <__ieee754_pow+0x1e8>)
   b661e:	459a      	cmp	sl, r3
   b6620:	f000 80a2 	beq.w	b6768 <__ieee754_pow+0x198>
   b6624:	4b65      	ldr	r3, [pc, #404]	; (b67bc <__ieee754_pow+0x1ec>)
   b6626:	459a      	cmp	sl, r3
   b6628:	f000 80b0 	beq.w	b678c <__ieee754_pow+0x1bc>
   b662c:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b6630:	f000 84c0 	beq.w	b6fb4 <__ieee754_pow+0x9e4>
   b6634:	4b62      	ldr	r3, [pc, #392]	; (b67c0 <__ieee754_pow+0x1f0>)
   b6636:	459b      	cmp	fp, r3
   b6638:	d142      	bne.n	b66c0 <__ieee754_pow+0xf0>
   b663a:	f1b9 0f00 	cmp.w	r9, #0
   b663e:	db3f      	blt.n	b66c0 <__ieee754_pow+0xf0>
   b6640:	ec45 4b10 	vmov	d0, r4, r5
   b6644:	b007      	add	sp, #28
   b6646:	ecbd 8b0c 	vpop	{d8-d13}
   b664a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b664e:	f000 bd59 	b.w	b7104 <__ieee754_sqrt>
   b6652:	2b00      	cmp	r3, #0
   b6654:	d0db      	beq.n	b660e <__ieee754_pow+0x3e>
   b6656:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b665a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b665e:	ea58 0302 	orrs.w	r3, r8, r2
   b6662:	d109      	bne.n	b6678 <__ieee754_pow+0xa8>
   b6664:	ed9f 0b50 	vldr	d0, [pc, #320]	; b67a8 <__ieee754_pow+0x1d8>
   b6668:	b007      	add	sp, #28
   b666a:	ecbd 8b0c 	vpop	{d8-d13}
   b666e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6672:	b90c      	cbnz	r4, b6678 <__ieee754_pow+0xa8>
   b6674:	45c2      	cmp	sl, r8
   b6676:	ddc7      	ble.n	b6608 <__ieee754_pow+0x38>
   b6678:	4852      	ldr	r0, [pc, #328]	; (b67c4 <__ieee754_pow+0x1f4>)
   b667a:	b007      	add	sp, #28
   b667c:	ecbd 8b0c 	vpop	{d8-d13}
   b6680:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6684:	f000 be20 	b.w	b72c8 <nan>
   b6688:	494f      	ldr	r1, [pc, #316]	; (b67c8 <__ieee754_pow+0x1f8>)
   b668a:	458a      	cmp	sl, r1
   b668c:	f300 8085 	bgt.w	b679a <__ieee754_pow+0x1ca>
   b6690:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b6694:	458a      	cmp	sl, r1
   b6696:	dd0f      	ble.n	b66b8 <__ieee754_pow+0xe8>
   b6698:	ea4f 512a 	mov.w	r1, sl, asr #20
   b669c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b66a0:	2914      	cmp	r1, #20
   b66a2:	f340 849b 	ble.w	b6fdc <__ieee754_pow+0xa0c>
   b66a6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b66aa:	fa23 f001 	lsr.w	r0, r3, r1
   b66ae:	fa00 f101 	lsl.w	r1, r0, r1
   b66b2:	4299      	cmp	r1, r3
   b66b4:	f000 84ed 	beq.w	b7092 <__ieee754_pow+0xac2>
   b66b8:	2100      	movs	r1, #0
   b66ba:	9100      	str	r1, [sp, #0]
   b66bc:	2b00      	cmp	r3, #0
   b66be:	d0b1      	beq.n	b6624 <__ieee754_pow+0x54>
   b66c0:	ec45 4b10 	vmov	d0, r4, r5
   b66c4:	9202      	str	r2, [sp, #8]
   b66c6:	f000 fde9 	bl	b729c <fabs>
   b66ca:	9a02      	ldr	r2, [sp, #8]
   b66cc:	bb5a      	cbnz	r2, b6726 <__ieee754_pow+0x156>
   b66ce:	f1b8 0f00 	cmp.w	r8, #0
   b66d2:	d004      	beq.n	b66de <__ieee754_pow+0x10e>
   b66d4:	4b39      	ldr	r3, [pc, #228]	; (b67bc <__ieee754_pow+0x1ec>)
   b66d6:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b66da:	429a      	cmp	r2, r3
   b66dc:	d123      	bne.n	b6726 <__ieee754_pow+0x156>
   b66de:	f1bb 0f00 	cmp.w	fp, #0
   b66e2:	da07      	bge.n	b66f4 <__ieee754_pow+0x124>
   b66e4:	ec53 2b10 	vmov	r2, r3, d0
   b66e8:	4934      	ldr	r1, [pc, #208]	; (b67bc <__ieee754_pow+0x1ec>)
   b66ea:	2000      	movs	r0, #0
   b66ec:	f001 fa08 	bl	b7b00 <__aeabi_ddiv>
   b66f0:	ec41 0b10 	vmov	d0, r0, r1
   b66f4:	f1b9 0f00 	cmp.w	r9, #0
   b66f8:	dab6      	bge.n	b6668 <__ieee754_pow+0x98>
   b66fa:	9b00      	ldr	r3, [sp, #0]
   b66fc:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b6700:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b6704:	ea58 0303 	orrs.w	r3, r8, r3
   b6708:	f040 848d 	bne.w	b7026 <__ieee754_pow+0xa56>
   b670c:	ec53 2b10 	vmov	r2, r3, d0
   b6710:	4610      	mov	r0, r2
   b6712:	4619      	mov	r1, r3
   b6714:	f000 ff12 	bl	b753c <__aeabi_dsub>
   b6718:	4602      	mov	r2, r0
   b671a:	460b      	mov	r3, r1
   b671c:	f001 f9f0 	bl	b7b00 <__aeabi_ddiv>
   b6720:	ec41 0b10 	vmov	d0, r0, r1
   b6724:	e7a0      	b.n	b6668 <__ieee754_pow+0x98>
   b6726:	9a00      	ldr	r2, [sp, #0]
   b6728:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b672c:	3b01      	subs	r3, #1
   b672e:	9304      	str	r3, [sp, #16]
   b6730:	4313      	orrs	r3, r2
   b6732:	d035      	beq.n	b67a0 <__ieee754_pow+0x1d0>
   b6734:	4b25      	ldr	r3, [pc, #148]	; (b67cc <__ieee754_pow+0x1fc>)
   b6736:	459a      	cmp	sl, r3
   b6738:	dd4c      	ble.n	b67d4 <__ieee754_pow+0x204>
   b673a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b673e:	459a      	cmp	sl, r3
   b6740:	4b23      	ldr	r3, [pc, #140]	; (b67d0 <__ieee754_pow+0x200>)
   b6742:	f340 83db 	ble.w	b6efc <__ieee754_pow+0x92c>
   b6746:	4598      	cmp	r8, r3
   b6748:	f340 8360 	ble.w	b6e0c <__ieee754_pow+0x83c>
   b674c:	f1bb 0f00 	cmp.w	fp, #0
   b6750:	f340 8360 	ble.w	b6e14 <__ieee754_pow+0x844>
   b6754:	a316      	add	r3, pc, #88	; (adr r3, b67b0 <__ieee754_pow+0x1e0>)
   b6756:	e9d3 2300 	ldrd	r2, r3, [r3]
   b675a:	4610      	mov	r0, r2
   b675c:	4619      	mov	r1, r3
   b675e:	f001 f8a5 	bl	b78ac <__aeabi_dmul>
   b6762:	ec41 0b10 	vmov	d0, r0, r1
   b6766:	e77f      	b.n	b6668 <__ieee754_pow+0x98>
   b6768:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b676c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b6770:	4313      	orrs	r3, r2
   b6772:	f43f af77 	beq.w	b6664 <__ieee754_pow+0x94>
   b6776:	4b16      	ldr	r3, [pc, #88]	; (b67d0 <__ieee754_pow+0x200>)
   b6778:	4598      	cmp	r8, r3
   b677a:	f340 837a 	ble.w	b6e72 <__ieee754_pow+0x8a2>
   b677e:	f1bb 0f00 	cmp.w	fp, #0
   b6782:	f2c0 8347 	blt.w	b6e14 <__ieee754_pow+0x844>
   b6786:	ec47 6b10 	vmov	d0, r6, r7
   b678a:	e76d      	b.n	b6668 <__ieee754_pow+0x98>
   b678c:	f1bb 0f00 	cmp.w	fp, #0
   b6790:	f2c0 841a 	blt.w	b6fc8 <__ieee754_pow+0x9f8>
   b6794:	ec45 4b10 	vmov	d0, r4, r5
   b6798:	e766      	b.n	b6668 <__ieee754_pow+0x98>
   b679a:	2102      	movs	r1, #2
   b679c:	9100      	str	r1, [sp, #0]
   b679e:	e73b      	b.n	b6618 <__ieee754_pow+0x48>
   b67a0:	4622      	mov	r2, r4
   b67a2:	462b      	mov	r3, r5
   b67a4:	e7b4      	b.n	b6710 <__ieee754_pow+0x140>
   b67a6:	bf00      	nop
   b67a8:	00000000 	.word	0x00000000
   b67ac:	3ff00000 	.word	0x3ff00000
   b67b0:	8800759c 	.word	0x8800759c
   b67b4:	7e37e43c 	.word	0x7e37e43c
   b67b8:	7ff00000 	.word	0x7ff00000
   b67bc:	3ff00000 	.word	0x3ff00000
   b67c0:	3fe00000 	.word	0x3fe00000
   b67c4:	000b8408 	.word	0x000b8408
   b67c8:	433fffff 	.word	0x433fffff
   b67cc:	41e00000 	.word	0x41e00000
   b67d0:	3fefffff 	.word	0x3fefffff
   b67d4:	4be4      	ldr	r3, [pc, #912]	; (b6b68 <__ieee754_pow+0x598>)
   b67d6:	ea09 0303 	and.w	r3, r9, r3
   b67da:	2200      	movs	r2, #0
   b67dc:	b953      	cbnz	r3, b67f4 <__ieee754_pow+0x224>
   b67de:	ec51 0b10 	vmov	r0, r1, d0
   b67e2:	4be2      	ldr	r3, [pc, #904]	; (b6b6c <__ieee754_pow+0x59c>)
   b67e4:	f001 f862 	bl	b78ac <__aeabi_dmul>
   b67e8:	ec41 0b10 	vmov	d0, r0, r1
   b67ec:	ee10 8a90 	vmov	r8, s1
   b67f0:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b67f4:	ea4f 5328 	mov.w	r3, r8, asr #20
   b67f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b67fc:	189a      	adds	r2, r3, r2
   b67fe:	4bdc      	ldr	r3, [pc, #880]	; (b6b70 <__ieee754_pow+0x5a0>)
   b6800:	9205      	str	r2, [sp, #20]
   b6802:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b6806:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b680a:	4598      	cmp	r8, r3
   b680c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b6810:	dd07      	ble.n	b6822 <__ieee754_pow+0x252>
   b6812:	4bd8      	ldr	r3, [pc, #864]	; (b6b74 <__ieee754_pow+0x5a4>)
   b6814:	4598      	cmp	r8, r3
   b6816:	f340 8414 	ble.w	b7042 <__ieee754_pow+0xa72>
   b681a:	3201      	adds	r2, #1
   b681c:	9205      	str	r2, [sp, #20]
   b681e:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b6822:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b6b08 <__ieee754_pow+0x538>
   b6826:	ed9f 7bba 	vldr	d7, [pc, #744]	; b6b10 <__ieee754_pow+0x540>
   b682a:	ec53 2b16 	vmov	r2, r3, d6
   b682e:	eeb0 ca47 	vmov.f32	s24, s14
   b6832:	eef0 ca67 	vmov.f32	s25, s15
   b6836:	2500      	movs	r5, #0
   b6838:	eeb0 da47 	vmov.f32	s26, s14
   b683c:	eef0 da67 	vmov.f32	s27, s15
   b6840:	ec5b ab10 	vmov	sl, fp, d0
   b6844:	46a3      	mov	fp, r4
   b6846:	4650      	mov	r0, sl
   b6848:	4659      	mov	r1, fp
   b684a:	ec43 2b1a 	vmov	d10, r2, r3
   b684e:	f000 fe75 	bl	b753c <__aeabi_dsub>
   b6852:	ec53 2b1a 	vmov	r2, r3, d10
   b6856:	4680      	mov	r8, r0
   b6858:	4689      	mov	r9, r1
   b685a:	4650      	mov	r0, sl
   b685c:	4659      	mov	r1, fp
   b685e:	f000 fe6f 	bl	b7540 <__adddf3>
   b6862:	4602      	mov	r2, r0
   b6864:	460b      	mov	r3, r1
   b6866:	2000      	movs	r0, #0
   b6868:	49c3      	ldr	r1, [pc, #780]	; (b6b78 <__ieee754_pow+0x5a8>)
   b686a:	f001 f949 	bl	b7b00 <__aeabi_ddiv>
   b686e:	ec41 0b1b 	vmov	d11, r0, r1
   b6872:	4640      	mov	r0, r8
   b6874:	ec53 2b1b 	vmov	r2, r3, d11
   b6878:	4649      	mov	r1, r9
   b687a:	f001 f817 	bl	b78ac <__aeabi_dmul>
   b687e:	ec41 0b18 	vmov	d8, r0, r1
   b6882:	460a      	mov	r2, r1
   b6884:	4601      	mov	r1, r0
   b6886:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b688a:	2100      	movs	r1, #0
   b688c:	9102      	str	r1, [sp, #8]
   b688e:	1064      	asrs	r4, r4, #1
   b6890:	ec4b ab19 	vmov	d9, sl, fp
   b6894:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b6898:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b689c:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b68a0:	2000      	movs	r0, #0
   b68a2:	1959      	adds	r1, r3, r5
   b68a4:	4604      	mov	r4, r0
   b68a6:	460d      	mov	r5, r1
   b68a8:	4602      	mov	r2, r0
   b68aa:	460b      	mov	r3, r1
   b68ac:	4650      	mov	r0, sl
   b68ae:	4659      	mov	r1, fp
   b68b0:	f000 fffc 	bl	b78ac <__aeabi_dmul>
   b68b4:	4602      	mov	r2, r0
   b68b6:	460b      	mov	r3, r1
   b68b8:	4640      	mov	r0, r8
   b68ba:	4649      	mov	r1, r9
   b68bc:	f000 fe3e 	bl	b753c <__aeabi_dsub>
   b68c0:	ec53 2b1a 	vmov	r2, r3, d10
   b68c4:	4680      	mov	r8, r0
   b68c6:	4689      	mov	r9, r1
   b68c8:	4620      	mov	r0, r4
   b68ca:	4629      	mov	r1, r5
   b68cc:	f000 fe36 	bl	b753c <__aeabi_dsub>
   b68d0:	4602      	mov	r2, r0
   b68d2:	460b      	mov	r3, r1
   b68d4:	ec51 0b19 	vmov	r0, r1, d9
   b68d8:	f000 fe30 	bl	b753c <__aeabi_dsub>
   b68dc:	4652      	mov	r2, sl
   b68de:	465b      	mov	r3, fp
   b68e0:	f000 ffe4 	bl	b78ac <__aeabi_dmul>
   b68e4:	4602      	mov	r2, r0
   b68e6:	460b      	mov	r3, r1
   b68e8:	4640      	mov	r0, r8
   b68ea:	4649      	mov	r1, r9
   b68ec:	f000 fe26 	bl	b753c <__aeabi_dsub>
   b68f0:	ec53 2b1b 	vmov	r2, r3, d11
   b68f4:	f000 ffda 	bl	b78ac <__aeabi_dmul>
   b68f8:	ec53 2b18 	vmov	r2, r3, d8
   b68fc:	ec41 0b19 	vmov	d9, r0, r1
   b6900:	ec51 0b18 	vmov	r0, r1, d8
   b6904:	f000 ffd2 	bl	b78ac <__aeabi_dmul>
   b6908:	a383      	add	r3, pc, #524	; (adr r3, b6b18 <__ieee754_pow+0x548>)
   b690a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b690e:	4604      	mov	r4, r0
   b6910:	460d      	mov	r5, r1
   b6912:	f000 ffcb 	bl	b78ac <__aeabi_dmul>
   b6916:	a382      	add	r3, pc, #520	; (adr r3, b6b20 <__ieee754_pow+0x550>)
   b6918:	e9d3 2300 	ldrd	r2, r3, [r3]
   b691c:	f000 fe10 	bl	b7540 <__adddf3>
   b6920:	4622      	mov	r2, r4
   b6922:	462b      	mov	r3, r5
   b6924:	f000 ffc2 	bl	b78ac <__aeabi_dmul>
   b6928:	a37f      	add	r3, pc, #508	; (adr r3, b6b28 <__ieee754_pow+0x558>)
   b692a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b692e:	f000 fe07 	bl	b7540 <__adddf3>
   b6932:	4622      	mov	r2, r4
   b6934:	462b      	mov	r3, r5
   b6936:	f000 ffb9 	bl	b78ac <__aeabi_dmul>
   b693a:	a37d      	add	r3, pc, #500	; (adr r3, b6b30 <__ieee754_pow+0x560>)
   b693c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6940:	f000 fdfe 	bl	b7540 <__adddf3>
   b6944:	4622      	mov	r2, r4
   b6946:	462b      	mov	r3, r5
   b6948:	f000 ffb0 	bl	b78ac <__aeabi_dmul>
   b694c:	a37a      	add	r3, pc, #488	; (adr r3, b6b38 <__ieee754_pow+0x568>)
   b694e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6952:	f000 fdf5 	bl	b7540 <__adddf3>
   b6956:	4622      	mov	r2, r4
   b6958:	462b      	mov	r3, r5
   b695a:	f000 ffa7 	bl	b78ac <__aeabi_dmul>
   b695e:	a378      	add	r3, pc, #480	; (adr r3, b6b40 <__ieee754_pow+0x570>)
   b6960:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6964:	f000 fdec 	bl	b7540 <__adddf3>
   b6968:	4622      	mov	r2, r4
   b696a:	4680      	mov	r8, r0
   b696c:	4689      	mov	r9, r1
   b696e:	462b      	mov	r3, r5
   b6970:	4620      	mov	r0, r4
   b6972:	4629      	mov	r1, r5
   b6974:	f000 ff9a 	bl	b78ac <__aeabi_dmul>
   b6978:	4602      	mov	r2, r0
   b697a:	460b      	mov	r3, r1
   b697c:	4640      	mov	r0, r8
   b697e:	4649      	mov	r1, r9
   b6980:	f000 ff94 	bl	b78ac <__aeabi_dmul>
   b6984:	4652      	mov	r2, sl
   b6986:	4604      	mov	r4, r0
   b6988:	460d      	mov	r5, r1
   b698a:	465b      	mov	r3, fp
   b698c:	ec51 0b18 	vmov	r0, r1, d8
   b6990:	f000 fdd6 	bl	b7540 <__adddf3>
   b6994:	ec53 2b19 	vmov	r2, r3, d9
   b6998:	f000 ff88 	bl	b78ac <__aeabi_dmul>
   b699c:	4622      	mov	r2, r4
   b699e:	462b      	mov	r3, r5
   b69a0:	f000 fdce 	bl	b7540 <__adddf3>
   b69a4:	4652      	mov	r2, sl
   b69a6:	4680      	mov	r8, r0
   b69a8:	4689      	mov	r9, r1
   b69aa:	465b      	mov	r3, fp
   b69ac:	4650      	mov	r0, sl
   b69ae:	4659      	mov	r1, fp
   b69b0:	f000 ff7c 	bl	b78ac <__aeabi_dmul>
   b69b4:	4602      	mov	r2, r0
   b69b6:	460b      	mov	r3, r1
   b69b8:	ec43 2b1a 	vmov	d10, r2, r3
   b69bc:	4b6f      	ldr	r3, [pc, #444]	; (b6b7c <__ieee754_pow+0x5ac>)
   b69be:	2200      	movs	r2, #0
   b69c0:	f000 fdbe 	bl	b7540 <__adddf3>
   b69c4:	4642      	mov	r2, r8
   b69c6:	464b      	mov	r3, r9
   b69c8:	f000 fdba 	bl	b7540 <__adddf3>
   b69cc:	2400      	movs	r4, #0
   b69ce:	460d      	mov	r5, r1
   b69d0:	4622      	mov	r2, r4
   b69d2:	462b      	mov	r3, r5
   b69d4:	4650      	mov	r0, sl
   b69d6:	4659      	mov	r1, fp
   b69d8:	f000 ff68 	bl	b78ac <__aeabi_dmul>
   b69dc:	4b67      	ldr	r3, [pc, #412]	; (b6b7c <__ieee754_pow+0x5ac>)
   b69de:	4682      	mov	sl, r0
   b69e0:	468b      	mov	fp, r1
   b69e2:	2200      	movs	r2, #0
   b69e4:	4620      	mov	r0, r4
   b69e6:	4629      	mov	r1, r5
   b69e8:	f000 fda8 	bl	b753c <__aeabi_dsub>
   b69ec:	ec53 2b1a 	vmov	r2, r3, d10
   b69f0:	f000 fda4 	bl	b753c <__aeabi_dsub>
   b69f4:	4602      	mov	r2, r0
   b69f6:	460b      	mov	r3, r1
   b69f8:	4640      	mov	r0, r8
   b69fa:	4649      	mov	r1, r9
   b69fc:	f000 fd9e 	bl	b753c <__aeabi_dsub>
   b6a00:	ec53 2b18 	vmov	r2, r3, d8
   b6a04:	f000 ff52 	bl	b78ac <__aeabi_dmul>
   b6a08:	4622      	mov	r2, r4
   b6a0a:	462b      	mov	r3, r5
   b6a0c:	4604      	mov	r4, r0
   b6a0e:	460d      	mov	r5, r1
   b6a10:	ec51 0b19 	vmov	r0, r1, d9
   b6a14:	f000 ff4a 	bl	b78ac <__aeabi_dmul>
   b6a18:	4602      	mov	r2, r0
   b6a1a:	460b      	mov	r3, r1
   b6a1c:	4620      	mov	r0, r4
   b6a1e:	4629      	mov	r1, r5
   b6a20:	f000 fd8e 	bl	b7540 <__adddf3>
   b6a24:	4680      	mov	r8, r0
   b6a26:	4689      	mov	r9, r1
   b6a28:	4642      	mov	r2, r8
   b6a2a:	464b      	mov	r3, r9
   b6a2c:	4650      	mov	r0, sl
   b6a2e:	4659      	mov	r1, fp
   b6a30:	f000 fd86 	bl	b7540 <__adddf3>
   b6a34:	a344      	add	r3, pc, #272	; (adr r3, b6b48 <__ieee754_pow+0x578>)
   b6a36:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6a3a:	2000      	movs	r0, #0
   b6a3c:	4604      	mov	r4, r0
   b6a3e:	460d      	mov	r5, r1
   b6a40:	f000 ff34 	bl	b78ac <__aeabi_dmul>
   b6a44:	4652      	mov	r2, sl
   b6a46:	ec41 0b19 	vmov	d9, r0, r1
   b6a4a:	465b      	mov	r3, fp
   b6a4c:	4620      	mov	r0, r4
   b6a4e:	4629      	mov	r1, r5
   b6a50:	f000 fd74 	bl	b753c <__aeabi_dsub>
   b6a54:	4602      	mov	r2, r0
   b6a56:	460b      	mov	r3, r1
   b6a58:	4640      	mov	r0, r8
   b6a5a:	4649      	mov	r1, r9
   b6a5c:	f000 fd6e 	bl	b753c <__aeabi_dsub>
   b6a60:	a33b      	add	r3, pc, #236	; (adr r3, b6b50 <__ieee754_pow+0x580>)
   b6a62:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6a66:	f000 ff21 	bl	b78ac <__aeabi_dmul>
   b6a6a:	4602      	mov	r2, r0
   b6a6c:	460b      	mov	r3, r1
   b6a6e:	4620      	mov	r0, r4
   b6a70:	4629      	mov	r1, r5
   b6a72:	4614      	mov	r4, r2
   b6a74:	461d      	mov	r5, r3
   b6a76:	a338      	add	r3, pc, #224	; (adr r3, b6b58 <__ieee754_pow+0x588>)
   b6a78:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6a7c:	f000 ff16 	bl	b78ac <__aeabi_dmul>
   b6a80:	4602      	mov	r2, r0
   b6a82:	460b      	mov	r3, r1
   b6a84:	4620      	mov	r0, r4
   b6a86:	4629      	mov	r1, r5
   b6a88:	f000 fd5a 	bl	b7540 <__adddf3>
   b6a8c:	ec53 2b1d 	vmov	r2, r3, d13
   b6a90:	f000 fd56 	bl	b7540 <__adddf3>
   b6a94:	4680      	mov	r8, r0
   b6a96:	9805      	ldr	r0, [sp, #20]
   b6a98:	4689      	mov	r9, r1
   b6a9a:	f000 fe9d 	bl	b77d8 <__aeabi_i2d>
   b6a9e:	4642      	mov	r2, r8
   b6aa0:	4682      	mov	sl, r0
   b6aa2:	468b      	mov	fp, r1
   b6aa4:	464b      	mov	r3, r9
   b6aa6:	ec51 0b19 	vmov	r0, r1, d9
   b6aaa:	f000 fd49 	bl	b7540 <__adddf3>
   b6aae:	ec53 2b1c 	vmov	r2, r3, d12
   b6ab2:	f000 fd45 	bl	b7540 <__adddf3>
   b6ab6:	4652      	mov	r2, sl
   b6ab8:	465b      	mov	r3, fp
   b6aba:	f000 fd41 	bl	b7540 <__adddf3>
   b6abe:	4652      	mov	r2, sl
   b6ac0:	465b      	mov	r3, fp
   b6ac2:	2000      	movs	r0, #0
   b6ac4:	4604      	mov	r4, r0
   b6ac6:	460d      	mov	r5, r1
   b6ac8:	f000 fd38 	bl	b753c <__aeabi_dsub>
   b6acc:	ec53 2b1c 	vmov	r2, r3, d12
   b6ad0:	f000 fd34 	bl	b753c <__aeabi_dsub>
   b6ad4:	ec53 2b19 	vmov	r2, r3, d9
   b6ad8:	f000 fd30 	bl	b753c <__aeabi_dsub>
   b6adc:	4602      	mov	r2, r0
   b6ade:	460b      	mov	r3, r1
   b6ae0:	4640      	mov	r0, r8
   b6ae2:	4649      	mov	r1, r9
   b6ae4:	f000 fd2a 	bl	b753c <__aeabi_dsub>
   b6ae8:	9b00      	ldr	r3, [sp, #0]
   b6aea:	9a04      	ldr	r2, [sp, #16]
   b6aec:	3b01      	subs	r3, #1
   b6aee:	4313      	orrs	r3, r2
   b6af0:	4682      	mov	sl, r0
   b6af2:	468b      	mov	fp, r1
   b6af4:	f040 81b6 	bne.w	b6e64 <__ieee754_pow+0x894>
   b6af8:	ed9f 7b19 	vldr	d7, [pc, #100]	; b6b60 <__ieee754_pow+0x590>
   b6afc:	eeb0 8a47 	vmov.f32	s16, s14
   b6b00:	eef0 8a67 	vmov.f32	s17, s15
   b6b04:	e03c      	b.n	b6b80 <__ieee754_pow+0x5b0>
   b6b06:	bf00      	nop
   b6b08:	00000000 	.word	0x00000000
   b6b0c:	3ff00000 	.word	0x3ff00000
	...
   b6b18:	4a454eef 	.word	0x4a454eef
   b6b1c:	3fca7e28 	.word	0x3fca7e28
   b6b20:	93c9db65 	.word	0x93c9db65
   b6b24:	3fcd864a 	.word	0x3fcd864a
   b6b28:	a91d4101 	.word	0xa91d4101
   b6b2c:	3fd17460 	.word	0x3fd17460
   b6b30:	518f264d 	.word	0x518f264d
   b6b34:	3fd55555 	.word	0x3fd55555
   b6b38:	db6fabff 	.word	0xdb6fabff
   b6b3c:	3fdb6db6 	.word	0x3fdb6db6
   b6b40:	33333303 	.word	0x33333303
   b6b44:	3fe33333 	.word	0x3fe33333
   b6b48:	e0000000 	.word	0xe0000000
   b6b4c:	3feec709 	.word	0x3feec709
   b6b50:	dc3a03fd 	.word	0xdc3a03fd
   b6b54:	3feec709 	.word	0x3feec709
   b6b58:	145b01f5 	.word	0x145b01f5
   b6b5c:	be3e2fe0 	.word	0xbe3e2fe0
   b6b60:	00000000 	.word	0x00000000
   b6b64:	bff00000 	.word	0xbff00000
   b6b68:	7ff00000 	.word	0x7ff00000
   b6b6c:	43400000 	.word	0x43400000
   b6b70:	0003988e 	.word	0x0003988e
   b6b74:	000bb679 	.word	0x000bb679
   b6b78:	3ff00000 	.word	0x3ff00000
   b6b7c:	40080000 	.word	0x40080000
   b6b80:	2300      	movs	r3, #0
   b6b82:	e9cd 6700 	strd	r6, r7, [sp]
   b6b86:	9300      	str	r3, [sp, #0]
   b6b88:	e9dd 8900 	ldrd	r8, r9, [sp]
   b6b8c:	4630      	mov	r0, r6
   b6b8e:	4642      	mov	r2, r8
   b6b90:	464b      	mov	r3, r9
   b6b92:	4639      	mov	r1, r7
   b6b94:	f000 fcd2 	bl	b753c <__aeabi_dsub>
   b6b98:	4622      	mov	r2, r4
   b6b9a:	462b      	mov	r3, r5
   b6b9c:	f000 fe86 	bl	b78ac <__aeabi_dmul>
   b6ba0:	4632      	mov	r2, r6
   b6ba2:	463b      	mov	r3, r7
   b6ba4:	4606      	mov	r6, r0
   b6ba6:	460f      	mov	r7, r1
   b6ba8:	4650      	mov	r0, sl
   b6baa:	4659      	mov	r1, fp
   b6bac:	f000 fe7e 	bl	b78ac <__aeabi_dmul>
   b6bb0:	4602      	mov	r2, r0
   b6bb2:	460b      	mov	r3, r1
   b6bb4:	4630      	mov	r0, r6
   b6bb6:	4639      	mov	r1, r7
   b6bb8:	f000 fcc2 	bl	b7540 <__adddf3>
   b6bbc:	4642      	mov	r2, r8
   b6bbe:	464b      	mov	r3, r9
   b6bc0:	4606      	mov	r6, r0
   b6bc2:	460f      	mov	r7, r1
   b6bc4:	4620      	mov	r0, r4
   b6bc6:	4629      	mov	r1, r5
   b6bc8:	f000 fe70 	bl	b78ac <__aeabi_dmul>
   b6bcc:	4604      	mov	r4, r0
   b6bce:	460d      	mov	r5, r1
   b6bd0:	462b      	mov	r3, r5
   b6bd2:	4630      	mov	r0, r6
   b6bd4:	4639      	mov	r1, r7
   b6bd6:	4622      	mov	r2, r4
   b6bd8:	f000 fcb2 	bl	b7540 <__adddf3>
   b6bdc:	4bc2      	ldr	r3, [pc, #776]	; (b6ee8 <__ieee754_pow+0x918>)
   b6bde:	4299      	cmp	r1, r3
   b6be0:	4680      	mov	r8, r0
   b6be2:	4689      	mov	r9, r1
   b6be4:	468a      	mov	sl, r1
   b6be6:	f340 8118 	ble.w	b6e1a <__ieee754_pow+0x84a>
   b6bea:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b6bee:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b6bf2:	4303      	orrs	r3, r0
   b6bf4:	f040 8207 	bne.w	b7006 <__ieee754_pow+0xa36>
   b6bf8:	a3a3      	add	r3, pc, #652	; (adr r3, b6e88 <__ieee754_pow+0x8b8>)
   b6bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6bfe:	4630      	mov	r0, r6
   b6c00:	4639      	mov	r1, r7
   b6c02:	f000 fc9d 	bl	b7540 <__adddf3>
   b6c06:	4602      	mov	r2, r0
   b6c08:	460b      	mov	r3, r1
   b6c0a:	4640      	mov	r0, r8
   b6c0c:	4649      	mov	r1, r9
   b6c0e:	4690      	mov	r8, r2
   b6c10:	4699      	mov	r9, r3
   b6c12:	4622      	mov	r2, r4
   b6c14:	462b      	mov	r3, r5
   b6c16:	f000 fc91 	bl	b753c <__aeabi_dsub>
   b6c1a:	4602      	mov	r2, r0
   b6c1c:	460b      	mov	r3, r1
   b6c1e:	4640      	mov	r0, r8
   b6c20:	4649      	mov	r1, r9
   b6c22:	f001 f8d3 	bl	b7dcc <__aeabi_dcmpgt>
   b6c26:	2800      	cmp	r0, #0
   b6c28:	f040 81ed 	bne.w	b7006 <__ieee754_pow+0xa36>
   b6c2c:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b6c30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b6c34:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b6c38:	fa42 f303 	asr.w	r3, r2, r3
   b6c3c:	4453      	add	r3, sl
   b6c3e:	49ab      	ldr	r1, [pc, #684]	; (b6eec <__ieee754_pow+0x91c>)
   b6c40:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b6c44:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b6c48:	fa41 fc02 	asr.w	ip, r1, r2
   b6c4c:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b6c50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6c54:	f1c2 0214 	rsb	r2, r2, #20
   b6c58:	fa41 f202 	asr.w	r2, r1, r2
   b6c5c:	2000      	movs	r0, #0
   b6c5e:	ea23 010c 	bic.w	r1, r3, ip
   b6c62:	f1ba 0f00 	cmp.w	sl, #0
   b6c66:	9200      	str	r2, [sp, #0]
   b6c68:	460b      	mov	r3, r1
   b6c6a:	4602      	mov	r2, r0
   b6c6c:	da02      	bge.n	b6c74 <__ieee754_pow+0x6a4>
   b6c6e:	9900      	ldr	r1, [sp, #0]
   b6c70:	4249      	negs	r1, r1
   b6c72:	9100      	str	r1, [sp, #0]
   b6c74:	4620      	mov	r0, r4
   b6c76:	4629      	mov	r1, r5
   b6c78:	f000 fc60 	bl	b753c <__aeabi_dsub>
   b6c7c:	9b00      	ldr	r3, [sp, #0]
   b6c7e:	051b      	lsls	r3, r3, #20
   b6c80:	9302      	str	r3, [sp, #8]
   b6c82:	4602      	mov	r2, r0
   b6c84:	460b      	mov	r3, r1
   b6c86:	4604      	mov	r4, r0
   b6c88:	460d      	mov	r5, r1
   b6c8a:	4630      	mov	r0, r6
   b6c8c:	4639      	mov	r1, r7
   b6c8e:	f000 fc57 	bl	b7540 <__adddf3>
   b6c92:	4689      	mov	r9, r1
   b6c94:	f04f 0800 	mov.w	r8, #0
   b6c98:	a37d      	add	r3, pc, #500	; (adr r3, b6e90 <__ieee754_pow+0x8c0>)
   b6c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6c9e:	4640      	mov	r0, r8
   b6ca0:	4649      	mov	r1, r9
   b6ca2:	f000 fe03 	bl	b78ac <__aeabi_dmul>
   b6ca6:	4622      	mov	r2, r4
   b6ca8:	462b      	mov	r3, r5
   b6caa:	4682      	mov	sl, r0
   b6cac:	468b      	mov	fp, r1
   b6cae:	4640      	mov	r0, r8
   b6cb0:	4649      	mov	r1, r9
   b6cb2:	f000 fc43 	bl	b753c <__aeabi_dsub>
   b6cb6:	4602      	mov	r2, r0
   b6cb8:	460b      	mov	r3, r1
   b6cba:	4630      	mov	r0, r6
   b6cbc:	4639      	mov	r1, r7
   b6cbe:	f000 fc3d 	bl	b753c <__aeabi_dsub>
   b6cc2:	a375      	add	r3, pc, #468	; (adr r3, b6e98 <__ieee754_pow+0x8c8>)
   b6cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6cc8:	f000 fdf0 	bl	b78ac <__aeabi_dmul>
   b6ccc:	a374      	add	r3, pc, #464	; (adr r3, b6ea0 <__ieee754_pow+0x8d0>)
   b6cce:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6cd2:	4604      	mov	r4, r0
   b6cd4:	460d      	mov	r5, r1
   b6cd6:	4640      	mov	r0, r8
   b6cd8:	4649      	mov	r1, r9
   b6cda:	f000 fde7 	bl	b78ac <__aeabi_dmul>
   b6cde:	4602      	mov	r2, r0
   b6ce0:	460b      	mov	r3, r1
   b6ce2:	4620      	mov	r0, r4
   b6ce4:	4629      	mov	r1, r5
   b6ce6:	f000 fc2b 	bl	b7540 <__adddf3>
   b6cea:	4606      	mov	r6, r0
   b6cec:	460f      	mov	r7, r1
   b6cee:	4632      	mov	r2, r6
   b6cf0:	463b      	mov	r3, r7
   b6cf2:	4650      	mov	r0, sl
   b6cf4:	4659      	mov	r1, fp
   b6cf6:	f000 fc23 	bl	b7540 <__adddf3>
   b6cfa:	4652      	mov	r2, sl
   b6cfc:	465b      	mov	r3, fp
   b6cfe:	4604      	mov	r4, r0
   b6d00:	460d      	mov	r5, r1
   b6d02:	f000 fc1b 	bl	b753c <__aeabi_dsub>
   b6d06:	4602      	mov	r2, r0
   b6d08:	460b      	mov	r3, r1
   b6d0a:	4630      	mov	r0, r6
   b6d0c:	4639      	mov	r1, r7
   b6d0e:	f000 fc15 	bl	b753c <__aeabi_dsub>
   b6d12:	4622      	mov	r2, r4
   b6d14:	4680      	mov	r8, r0
   b6d16:	4689      	mov	r9, r1
   b6d18:	462b      	mov	r3, r5
   b6d1a:	4620      	mov	r0, r4
   b6d1c:	4629      	mov	r1, r5
   b6d1e:	f000 fdc5 	bl	b78ac <__aeabi_dmul>
   b6d22:	a361      	add	r3, pc, #388	; (adr r3, b6ea8 <__ieee754_pow+0x8d8>)
   b6d24:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6d28:	4606      	mov	r6, r0
   b6d2a:	460f      	mov	r7, r1
   b6d2c:	f000 fdbe 	bl	b78ac <__aeabi_dmul>
   b6d30:	a35f      	add	r3, pc, #380	; (adr r3, b6eb0 <__ieee754_pow+0x8e0>)
   b6d32:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6d36:	f000 fc01 	bl	b753c <__aeabi_dsub>
   b6d3a:	4632      	mov	r2, r6
   b6d3c:	463b      	mov	r3, r7
   b6d3e:	f000 fdb5 	bl	b78ac <__aeabi_dmul>
   b6d42:	a35d      	add	r3, pc, #372	; (adr r3, b6eb8 <__ieee754_pow+0x8e8>)
   b6d44:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6d48:	f000 fbfa 	bl	b7540 <__adddf3>
   b6d4c:	4632      	mov	r2, r6
   b6d4e:	463b      	mov	r3, r7
   b6d50:	f000 fdac 	bl	b78ac <__aeabi_dmul>
   b6d54:	a35a      	add	r3, pc, #360	; (adr r3, b6ec0 <__ieee754_pow+0x8f0>)
   b6d56:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6d5a:	f000 fbef 	bl	b753c <__aeabi_dsub>
   b6d5e:	4632      	mov	r2, r6
   b6d60:	463b      	mov	r3, r7
   b6d62:	f000 fda3 	bl	b78ac <__aeabi_dmul>
   b6d66:	a358      	add	r3, pc, #352	; (adr r3, b6ec8 <__ieee754_pow+0x8f8>)
   b6d68:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6d6c:	f000 fbe8 	bl	b7540 <__adddf3>
   b6d70:	4632      	mov	r2, r6
   b6d72:	463b      	mov	r3, r7
   b6d74:	f000 fd9a 	bl	b78ac <__aeabi_dmul>
   b6d78:	4602      	mov	r2, r0
   b6d7a:	460b      	mov	r3, r1
   b6d7c:	4620      	mov	r0, r4
   b6d7e:	4629      	mov	r1, r5
   b6d80:	f000 fbdc 	bl	b753c <__aeabi_dsub>
   b6d84:	4606      	mov	r6, r0
   b6d86:	460f      	mov	r7, r1
   b6d88:	4632      	mov	r2, r6
   b6d8a:	463b      	mov	r3, r7
   b6d8c:	4620      	mov	r0, r4
   b6d8e:	4629      	mov	r1, r5
   b6d90:	f000 fd8c 	bl	b78ac <__aeabi_dmul>
   b6d94:	4602      	mov	r2, r0
   b6d96:	460b      	mov	r3, r1
   b6d98:	4630      	mov	r0, r6
   b6d9a:	4639      	mov	r1, r7
   b6d9c:	4616      	mov	r6, r2
   b6d9e:	461f      	mov	r7, r3
   b6da0:	2200      	movs	r2, #0
   b6da2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b6da6:	f000 fbc9 	bl	b753c <__aeabi_dsub>
   b6daa:	4602      	mov	r2, r0
   b6dac:	460b      	mov	r3, r1
   b6dae:	4630      	mov	r0, r6
   b6db0:	4639      	mov	r1, r7
   b6db2:	f000 fea5 	bl	b7b00 <__aeabi_ddiv>
   b6db6:	4642      	mov	r2, r8
   b6db8:	4606      	mov	r6, r0
   b6dba:	460f      	mov	r7, r1
   b6dbc:	464b      	mov	r3, r9
   b6dbe:	4620      	mov	r0, r4
   b6dc0:	4629      	mov	r1, r5
   b6dc2:	f000 fd73 	bl	b78ac <__aeabi_dmul>
   b6dc6:	4642      	mov	r2, r8
   b6dc8:	464b      	mov	r3, r9
   b6dca:	f000 fbb9 	bl	b7540 <__adddf3>
   b6dce:	4602      	mov	r2, r0
   b6dd0:	460b      	mov	r3, r1
   b6dd2:	4630      	mov	r0, r6
   b6dd4:	4639      	mov	r1, r7
   b6dd6:	f000 fbb1 	bl	b753c <__aeabi_dsub>
   b6dda:	4622      	mov	r2, r4
   b6ddc:	462b      	mov	r3, r5
   b6dde:	f000 fbad 	bl	b753c <__aeabi_dsub>
   b6de2:	4602      	mov	r2, r0
   b6de4:	460b      	mov	r3, r1
   b6de6:	2000      	movs	r0, #0
   b6de8:	4941      	ldr	r1, [pc, #260]	; (b6ef0 <__ieee754_pow+0x920>)
   b6dea:	f000 fba7 	bl	b753c <__aeabi_dsub>
   b6dee:	9a02      	ldr	r2, [sp, #8]
   b6df0:	460b      	mov	r3, r1
   b6df2:	4413      	add	r3, r2
   b6df4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b6df8:	f2c0 8143 	blt.w	b7082 <__ieee754_pow+0xab2>
   b6dfc:	4619      	mov	r1, r3
   b6dfe:	ec53 2b18 	vmov	r2, r3, d8
   b6e02:	f000 fd53 	bl	b78ac <__aeabi_dmul>
   b6e06:	ec41 0b10 	vmov	d0, r0, r1
   b6e0a:	e42d      	b.n	b6668 <__ieee754_pow+0x98>
   b6e0c:	f1bb 0f00 	cmp.w	fp, #0
   b6e10:	f6ff aca0 	blt.w	b6754 <__ieee754_pow+0x184>
   b6e14:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b6ed0 <__ieee754_pow+0x900>
   b6e18:	e426      	b.n	b6668 <__ieee754_pow+0x98>
   b6e1a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b6ef8 <__ieee754_pow+0x928>
   b6e1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b6e22:	4563      	cmp	r3, ip
   b6e24:	f340 80e7 	ble.w	b6ff6 <__ieee754_pow+0xa26>
   b6e28:	4b32      	ldr	r3, [pc, #200]	; (b6ef4 <__ieee754_pow+0x924>)
   b6e2a:	440b      	add	r3, r1
   b6e2c:	4303      	orrs	r3, r0
   b6e2e:	d10a      	bne.n	b6e46 <__ieee754_pow+0x876>
   b6e30:	4622      	mov	r2, r4
   b6e32:	462b      	mov	r3, r5
   b6e34:	f000 fb82 	bl	b753c <__aeabi_dsub>
   b6e38:	4632      	mov	r2, r6
   b6e3a:	463b      	mov	r3, r7
   b6e3c:	f000 ffbc 	bl	b7db8 <__aeabi_dcmpge>
   b6e40:	2800      	cmp	r0, #0
   b6e42:	f43f aef3 	beq.w	b6c2c <__ieee754_pow+0x65c>
   b6e46:	a324      	add	r3, pc, #144	; (adr r3, b6ed8 <__ieee754_pow+0x908>)
   b6e48:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6e4c:	ec51 0b18 	vmov	r0, r1, d8
   b6e50:	f000 fd2c 	bl	b78ac <__aeabi_dmul>
   b6e54:	a320      	add	r3, pc, #128	; (adr r3, b6ed8 <__ieee754_pow+0x908>)
   b6e56:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6e5a:	f000 fd27 	bl	b78ac <__aeabi_dmul>
   b6e5e:	ec41 0b10 	vmov	d0, r0, r1
   b6e62:	e401      	b.n	b6668 <__ieee754_pow+0x98>
   b6e64:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b6ee0 <__ieee754_pow+0x910>
   b6e68:	eeb0 8a47 	vmov.f32	s16, s14
   b6e6c:	eef0 8a67 	vmov.f32	s17, s15
   b6e70:	e686      	b.n	b6b80 <__ieee754_pow+0x5b0>
   b6e72:	f1bb 0f00 	cmp.w	fp, #0
   b6e76:	dacd      	bge.n	b6e14 <__ieee754_pow+0x844>
   b6e78:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b6e7c:	ee00 6a10 	vmov	s0, r6
   b6e80:	ee00 3a90 	vmov	s1, r3
   b6e84:	f7ff bbf0 	b.w	b6668 <__ieee754_pow+0x98>
   b6e88:	652b82fe 	.word	0x652b82fe
   b6e8c:	3c971547 	.word	0x3c971547
   b6e90:	00000000 	.word	0x00000000
   b6e94:	3fe62e43 	.word	0x3fe62e43
   b6e98:	fefa39ef 	.word	0xfefa39ef
   b6e9c:	3fe62e42 	.word	0x3fe62e42
   b6ea0:	0ca86c39 	.word	0x0ca86c39
   b6ea4:	be205c61 	.word	0xbe205c61
   b6ea8:	72bea4d0 	.word	0x72bea4d0
   b6eac:	3e663769 	.word	0x3e663769
   b6eb0:	c5d26bf1 	.word	0xc5d26bf1
   b6eb4:	3ebbbd41 	.word	0x3ebbbd41
   b6eb8:	af25de2c 	.word	0xaf25de2c
   b6ebc:	3f11566a 	.word	0x3f11566a
   b6ec0:	16bebd93 	.word	0x16bebd93
   b6ec4:	3f66c16c 	.word	0x3f66c16c
   b6ec8:	5555553e 	.word	0x5555553e
   b6ecc:	3fc55555 	.word	0x3fc55555
	...
   b6ed8:	c2f8f359 	.word	0xc2f8f359
   b6edc:	01a56e1f 	.word	0x01a56e1f
   b6ee0:	00000000 	.word	0x00000000
   b6ee4:	3ff00000 	.word	0x3ff00000
   b6ee8:	408fffff 	.word	0x408fffff
   b6eec:	000fffff 	.word	0x000fffff
   b6ef0:	3ff00000 	.word	0x3ff00000
   b6ef4:	3f6f3400 	.word	0x3f6f3400
   b6ef8:	4090cbff 	.word	0x4090cbff
   b6efc:	4598      	cmp	r8, r3
   b6efe:	db85      	blt.n	b6e0c <__ieee754_pow+0x83c>
   b6f00:	4b7d      	ldr	r3, [pc, #500]	; (b70f8 <__ieee754_pow+0xb28>)
   b6f02:	4598      	cmp	r8, r3
   b6f04:	f73f ac22 	bgt.w	b674c <__ieee754_pow+0x17c>
   b6f08:	ec51 0b10 	vmov	r0, r1, d0
   b6f0c:	4b7a      	ldr	r3, [pc, #488]	; (b70f8 <__ieee754_pow+0xb28>)
   b6f0e:	2200      	movs	r2, #0
   b6f10:	f000 fb14 	bl	b753c <__aeabi_dsub>
   b6f14:	a368      	add	r3, pc, #416	; (adr r3, b70b8 <__ieee754_pow+0xae8>)
   b6f16:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6f1a:	4604      	mov	r4, r0
   b6f1c:	460d      	mov	r5, r1
   b6f1e:	f000 fcc5 	bl	b78ac <__aeabi_dmul>
   b6f22:	a367      	add	r3, pc, #412	; (adr r3, b70c0 <__ieee754_pow+0xaf0>)
   b6f24:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6f28:	4682      	mov	sl, r0
   b6f2a:	468b      	mov	fp, r1
   b6f2c:	4620      	mov	r0, r4
   b6f2e:	4629      	mov	r1, r5
   b6f30:	f000 fcbc 	bl	b78ac <__aeabi_dmul>
   b6f34:	4b71      	ldr	r3, [pc, #452]	; (b70fc <__ieee754_pow+0xb2c>)
   b6f36:	ec41 0b18 	vmov	d8, r0, r1
   b6f3a:	2200      	movs	r2, #0
   b6f3c:	4620      	mov	r0, r4
   b6f3e:	4629      	mov	r1, r5
   b6f40:	f000 fcb4 	bl	b78ac <__aeabi_dmul>
   b6f44:	4602      	mov	r2, r0
   b6f46:	460b      	mov	r3, r1
   b6f48:	a15f      	add	r1, pc, #380	; (adr r1, b70c8 <__ieee754_pow+0xaf8>)
   b6f4a:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6f4e:	f000 faf5 	bl	b753c <__aeabi_dsub>
   b6f52:	4622      	mov	r2, r4
   b6f54:	462b      	mov	r3, r5
   b6f56:	f000 fca9 	bl	b78ac <__aeabi_dmul>
   b6f5a:	4602      	mov	r2, r0
   b6f5c:	460b      	mov	r3, r1
   b6f5e:	2000      	movs	r0, #0
   b6f60:	4967      	ldr	r1, [pc, #412]	; (b7100 <__ieee754_pow+0xb30>)
   b6f62:	f000 faeb 	bl	b753c <__aeabi_dsub>
   b6f66:	4622      	mov	r2, r4
   b6f68:	4680      	mov	r8, r0
   b6f6a:	4689      	mov	r9, r1
   b6f6c:	462b      	mov	r3, r5
   b6f6e:	4620      	mov	r0, r4
   b6f70:	4629      	mov	r1, r5
   b6f72:	f000 fc9b 	bl	b78ac <__aeabi_dmul>
   b6f76:	4602      	mov	r2, r0
   b6f78:	460b      	mov	r3, r1
   b6f7a:	4640      	mov	r0, r8
   b6f7c:	4649      	mov	r1, r9
   b6f7e:	f000 fc95 	bl	b78ac <__aeabi_dmul>
   b6f82:	a353      	add	r3, pc, #332	; (adr r3, b70d0 <__ieee754_pow+0xb00>)
   b6f84:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6f88:	f000 fc90 	bl	b78ac <__aeabi_dmul>
   b6f8c:	4602      	mov	r2, r0
   b6f8e:	460b      	mov	r3, r1
   b6f90:	ec51 0b18 	vmov	r0, r1, d8
   b6f94:	f000 fad2 	bl	b753c <__aeabi_dsub>
   b6f98:	4680      	mov	r8, r0
   b6f9a:	4689      	mov	r9, r1
   b6f9c:	4642      	mov	r2, r8
   b6f9e:	464b      	mov	r3, r9
   b6fa0:	4650      	mov	r0, sl
   b6fa2:	4659      	mov	r1, fp
   b6fa4:	f000 facc 	bl	b7540 <__adddf3>
   b6fa8:	2000      	movs	r0, #0
   b6faa:	4652      	mov	r2, sl
   b6fac:	465b      	mov	r3, fp
   b6fae:	4604      	mov	r4, r0
   b6fb0:	460d      	mov	r5, r1
   b6fb2:	e591      	b.n	b6ad8 <__ieee754_pow+0x508>
   b6fb4:	4622      	mov	r2, r4
   b6fb6:	462b      	mov	r3, r5
   b6fb8:	4620      	mov	r0, r4
   b6fba:	4629      	mov	r1, r5
   b6fbc:	f000 fc76 	bl	b78ac <__aeabi_dmul>
   b6fc0:	ec41 0b10 	vmov	d0, r0, r1
   b6fc4:	f7ff bb50 	b.w	b6668 <__ieee754_pow+0x98>
   b6fc8:	494b      	ldr	r1, [pc, #300]	; (b70f8 <__ieee754_pow+0xb28>)
   b6fca:	2000      	movs	r0, #0
   b6fcc:	4622      	mov	r2, r4
   b6fce:	462b      	mov	r3, r5
   b6fd0:	f000 fd96 	bl	b7b00 <__aeabi_ddiv>
   b6fd4:	ec41 0b10 	vmov	d0, r0, r1
   b6fd8:	f7ff bb46 	b.w	b6668 <__ieee754_pow+0x98>
   b6fdc:	2b00      	cmp	r3, #0
   b6fde:	d144      	bne.n	b706a <__ieee754_pow+0xa9a>
   b6fe0:	f1c1 0114 	rsb	r1, r1, #20
   b6fe4:	fa4a f001 	asr.w	r0, sl, r1
   b6fe8:	fa00 f101 	lsl.w	r1, r0, r1
   b6fec:	4551      	cmp	r1, sl
   b6fee:	d05a      	beq.n	b70a6 <__ieee754_pow+0xad6>
   b6ff0:	9300      	str	r3, [sp, #0]
   b6ff2:	f7ff bb17 	b.w	b6624 <__ieee754_pow+0x54>
   b6ff6:	4a42      	ldr	r2, [pc, #264]	; (b7100 <__ieee754_pow+0xb30>)
   b6ff8:	4293      	cmp	r3, r2
   b6ffa:	dc5b      	bgt.n	b70b4 <__ieee754_pow+0xae4>
   b6ffc:	e9dd 1200 	ldrd	r1, r2, [sp]
   b7000:	9102      	str	r1, [sp, #8]
   b7002:	9100      	str	r1, [sp, #0]
   b7004:	e646      	b.n	b6c94 <__ieee754_pow+0x6c4>
   b7006:	a334      	add	r3, pc, #208	; (adr r3, b70d8 <__ieee754_pow+0xb08>)
   b7008:	e9d3 2300 	ldrd	r2, r3, [r3]
   b700c:	ec51 0b18 	vmov	r0, r1, d8
   b7010:	f000 fc4c 	bl	b78ac <__aeabi_dmul>
   b7014:	a330      	add	r3, pc, #192	; (adr r3, b70d8 <__ieee754_pow+0xb08>)
   b7016:	e9d3 2300 	ldrd	r2, r3, [r3]
   b701a:	f000 fc47 	bl	b78ac <__aeabi_dmul>
   b701e:	ec41 0b10 	vmov	d0, r0, r1
   b7022:	f7ff bb21 	b.w	b6668 <__ieee754_pow+0x98>
   b7026:	9b00      	ldr	r3, [sp, #0]
   b7028:	2b01      	cmp	r3, #1
   b702a:	f47f ab1d 	bne.w	b6668 <__ieee754_pow+0x98>
   b702e:	ee10 1a90 	vmov	r1, s1
   b7032:	ee10 2a10 	vmov	r2, s0
   b7036:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b703a:	ec43 2b10 	vmov	d0, r2, r3
   b703e:	f7ff bb13 	b.w	b6668 <__ieee754_pow+0x98>
   b7042:	ed9f 7b27 	vldr	d7, [pc, #156]	; b70e0 <__ieee754_pow+0xb10>
   b7046:	eeb0 ca47 	vmov.f32	s24, s14
   b704a:	eef0 ca67 	vmov.f32	s25, s15
   b704e:	ed9f 7b26 	vldr	d7, [pc, #152]	; b70e8 <__ieee754_pow+0xb18>
   b7052:	eeb0 da47 	vmov.f32	s26, s14
   b7056:	eef0 da67 	vmov.f32	s27, s15
   b705a:	ed9f 7b25 	vldr	d7, [pc, #148]	; b70f0 <__ieee754_pow+0xb20>
   b705e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b7062:	ec53 2b17 	vmov	r2, r3, d7
   b7066:	f7ff bbeb 	b.w	b6840 <__ieee754_pow+0x270>
   b706a:	ec45 4b10 	vmov	d0, r4, r5
   b706e:	9200      	str	r2, [sp, #0]
   b7070:	f000 f914 	bl	b729c <fabs>
   b7074:	9a00      	ldr	r2, [sp, #0]
   b7076:	2a00      	cmp	r2, #0
   b7078:	f47f ab92 	bne.w	b67a0 <__ieee754_pow+0x1d0>
   b707c:	9200      	str	r2, [sp, #0]
   b707e:	f7ff bb26 	b.w	b66ce <__ieee754_pow+0xfe>
   b7082:	ec41 0b10 	vmov	d0, r0, r1
   b7086:	9800      	ldr	r0, [sp, #0]
   b7088:	f000 f9c2 	bl	b7410 <scalbn>
   b708c:	ec51 0b10 	vmov	r0, r1, d0
   b7090:	e6b5      	b.n	b6dfe <__ieee754_pow+0x82e>
   b7092:	f000 0001 	and.w	r0, r0, #1
   b7096:	f1c0 0102 	rsb	r1, r0, #2
   b709a:	9100      	str	r1, [sp, #0]
   b709c:	2b00      	cmp	r3, #0
   b709e:	f43f aac1 	beq.w	b6624 <__ieee754_pow+0x54>
   b70a2:	f7ff bb0d 	b.w	b66c0 <__ieee754_pow+0xf0>
   b70a6:	f000 0001 	and.w	r0, r0, #1
   b70aa:	f1c0 0302 	rsb	r3, r0, #2
   b70ae:	9300      	str	r3, [sp, #0]
   b70b0:	f7ff bab8 	b.w	b6624 <__ieee754_pow+0x54>
   b70b4:	151b      	asrs	r3, r3, #20
   b70b6:	e5bb      	b.n	b6c30 <__ieee754_pow+0x660>
   b70b8:	60000000 	.word	0x60000000
   b70bc:	3ff71547 	.word	0x3ff71547
   b70c0:	f85ddf44 	.word	0xf85ddf44
   b70c4:	3e54ae0b 	.word	0x3e54ae0b
   b70c8:	55555555 	.word	0x55555555
   b70cc:	3fd55555 	.word	0x3fd55555
   b70d0:	652b82fe 	.word	0x652b82fe
   b70d4:	3ff71547 	.word	0x3ff71547
   b70d8:	8800759c 	.word	0x8800759c
   b70dc:	7e37e43c 	.word	0x7e37e43c
   b70e0:	40000000 	.word	0x40000000
   b70e4:	3fe2b803 	.word	0x3fe2b803
   b70e8:	43cfd006 	.word	0x43cfd006
   b70ec:	3e4cfdeb 	.word	0x3e4cfdeb
   b70f0:	00000000 	.word	0x00000000
   b70f4:	3ff80000 	.word	0x3ff80000
   b70f8:	3ff00000 	.word	0x3ff00000
   b70fc:	3fd00000 	.word	0x3fd00000
   b7100:	3fe00000 	.word	0x3fe00000

000b7104 <__ieee754_sqrt>:
   b7104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7108:	4a63      	ldr	r2, [pc, #396]	; (b7298 <__ieee754_sqrt+0x194>)
   b710a:	ec55 4b10 	vmov	r4, r5, d0
   b710e:	43aa      	bics	r2, r5
   b7110:	f000 809f 	beq.w	b7252 <__ieee754_sqrt+0x14e>
   b7114:	2d00      	cmp	r5, #0
   b7116:	ee10 ca10 	vmov	ip, s0
   b711a:	462b      	mov	r3, r5
   b711c:	dd54      	ble.n	b71c8 <__ieee754_sqrt+0xc4>
   b711e:	1529      	asrs	r1, r5, #20
   b7120:	d063      	beq.n	b71ea <__ieee754_sqrt+0xe6>
   b7122:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b7126:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b712a:	07c9      	lsls	r1, r1, #31
   b712c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7130:	d404      	bmi.n	b713c <__ieee754_sqrt+0x38>
   b7132:	005b      	lsls	r3, r3, #1
   b7134:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b7138:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b713c:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b7140:	2600      	movs	r6, #0
   b7142:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b7146:	107f      	asrs	r7, r7, #1
   b7148:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b714c:	f04f 0e16 	mov.w	lr, #22
   b7150:	4634      	mov	r4, r6
   b7152:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b7156:	18a1      	adds	r1, r4, r2
   b7158:	4299      	cmp	r1, r3
   b715a:	dc02      	bgt.n	b7162 <__ieee754_sqrt+0x5e>
   b715c:	1a5b      	subs	r3, r3, r1
   b715e:	188c      	adds	r4, r1, r2
   b7160:	4416      	add	r6, r2
   b7162:	005b      	lsls	r3, r3, #1
   b7164:	f1be 0e01 	subs.w	lr, lr, #1
   b7168:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b716c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b7170:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b7174:	d1ef      	bne.n	b7156 <__ieee754_sqrt+0x52>
   b7176:	4675      	mov	r5, lr
   b7178:	2020      	movs	r0, #32
   b717a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b717e:	e00a      	b.n	b7196 <__ieee754_sqrt+0x92>
   b7180:	d044      	beq.n	b720c <__ieee754_sqrt+0x108>
   b7182:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b7186:	3801      	subs	r0, #1
   b7188:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b718c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b7190:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b7194:	d043      	beq.n	b721e <__ieee754_sqrt+0x11a>
   b7196:	42a3      	cmp	r3, r4
   b7198:	eb02 010e 	add.w	r1, r2, lr
   b719c:	ddf0      	ble.n	b7180 <__ieee754_sqrt+0x7c>
   b719e:	2900      	cmp	r1, #0
   b71a0:	eb01 0e02 	add.w	lr, r1, r2
   b71a4:	db0a      	blt.n	b71bc <__ieee754_sqrt+0xb8>
   b71a6:	46a0      	mov	r8, r4
   b71a8:	1b1b      	subs	r3, r3, r4
   b71aa:	4561      	cmp	r1, ip
   b71ac:	bf88      	it	hi
   b71ae:	f103 33ff 	addhi.w	r3, r3, #4294967295
   b71b2:	ebac 0c01 	sub.w	ip, ip, r1
   b71b6:	4415      	add	r5, r2
   b71b8:	4644      	mov	r4, r8
   b71ba:	e7e2      	b.n	b7182 <__ieee754_sqrt+0x7e>
   b71bc:	f1be 0f00 	cmp.w	lr, #0
   b71c0:	dbf1      	blt.n	b71a6 <__ieee754_sqrt+0xa2>
   b71c2:	f104 0801 	add.w	r8, r4, #1
   b71c6:	e7ef      	b.n	b71a8 <__ieee754_sqrt+0xa4>
   b71c8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b71cc:	4322      	orrs	r2, r4
   b71ce:	d038      	beq.n	b7242 <__ieee754_sqrt+0x13e>
   b71d0:	2d00      	cmp	r5, #0
   b71d2:	d14e      	bne.n	b7272 <__ieee754_sqrt+0x16e>
   b71d4:	4629      	mov	r1, r5
   b71d6:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b71da:	3915      	subs	r1, #21
   b71dc:	4613      	mov	r3, r2
   b71de:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b71e2:	2a00      	cmp	r2, #0
   b71e4:	d0f7      	beq.n	b71d6 <__ieee754_sqrt+0xd2>
   b71e6:	02d6      	lsls	r6, r2, #11
   b71e8:	d450      	bmi.n	b728c <__ieee754_sqrt+0x188>
   b71ea:	2000      	movs	r0, #0
   b71ec:	005b      	lsls	r3, r3, #1
   b71ee:	02dd      	lsls	r5, r3, #11
   b71f0:	4604      	mov	r4, r0
   b71f2:	f100 0001 	add.w	r0, r0, #1
   b71f6:	d5f9      	bpl.n	b71ec <__ieee754_sqrt+0xe8>
   b71f8:	461a      	mov	r2, r3
   b71fa:	4663      	mov	r3, ip
   b71fc:	fa0c fc00 	lsl.w	ip, ip, r0
   b7200:	f1c0 0020 	rsb	r0, r0, #32
   b7204:	40c3      	lsrs	r3, r0
   b7206:	1b09      	subs	r1, r1, r4
   b7208:	4313      	orrs	r3, r2
   b720a:	e78a      	b.n	b7122 <__ieee754_sqrt+0x1e>
   b720c:	4561      	cmp	r1, ip
   b720e:	d8b8      	bhi.n	b7182 <__ieee754_sqrt+0x7e>
   b7210:	2900      	cmp	r1, #0
   b7212:	eb01 0e02 	add.w	lr, r1, r2
   b7216:	dbd1      	blt.n	b71bc <__ieee754_sqrt+0xb8>
   b7218:	4698      	mov	r8, r3
   b721a:	2300      	movs	r3, #0
   b721c:	e7c9      	b.n	b71b2 <__ieee754_sqrt+0xae>
   b721e:	ea53 030c 	orrs.w	r3, r3, ip
   b7222:	d110      	bne.n	b7246 <__ieee754_sqrt+0x142>
   b7224:	0868      	lsrs	r0, r5, #1
   b7226:	1071      	asrs	r1, r6, #1
   b7228:	07f3      	lsls	r3, r6, #31
   b722a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b722e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b7232:	bf48      	it	mi
   b7234:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b7238:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b723c:	4602      	mov	r2, r0
   b723e:	ec43 2b10 	vmov	d0, r2, r3
   b7242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7246:	1c6a      	adds	r2, r5, #1
   b7248:	bf16      	itet	ne
   b724a:	1c68      	addne	r0, r5, #1
   b724c:	3601      	addeq	r6, #1
   b724e:	0840      	lsrne	r0, r0, #1
   b7250:	e7e9      	b.n	b7226 <__ieee754_sqrt+0x122>
   b7252:	ee10 2a10 	vmov	r2, s0
   b7256:	ee10 0a10 	vmov	r0, s0
   b725a:	462b      	mov	r3, r5
   b725c:	4629      	mov	r1, r5
   b725e:	f000 fb25 	bl	b78ac <__aeabi_dmul>
   b7262:	4622      	mov	r2, r4
   b7264:	462b      	mov	r3, r5
   b7266:	f000 f96b 	bl	b7540 <__adddf3>
   b726a:	ec41 0b10 	vmov	d0, r0, r1
   b726e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7272:	ee10 2a10 	vmov	r2, s0
   b7276:	4620      	mov	r0, r4
   b7278:	4629      	mov	r1, r5
   b727a:	f000 f95f 	bl	b753c <__aeabi_dsub>
   b727e:	4602      	mov	r2, r0
   b7280:	460b      	mov	r3, r1
   b7282:	f000 fc3d 	bl	b7b00 <__aeabi_ddiv>
   b7286:	ec41 0b10 	vmov	d0, r0, r1
   b728a:	e7da      	b.n	b7242 <__ieee754_sqrt+0x13e>
   b728c:	4663      	mov	r3, ip
   b728e:	2020      	movs	r0, #32
   b7290:	f04f 34ff 	mov.w	r4, #4294967295
   b7294:	e7b6      	b.n	b7204 <__ieee754_sqrt+0x100>
   b7296:	bf00      	nop
   b7298:	7ff00000 	.word	0x7ff00000

000b729c <fabs>:
   b729c:	ec51 0b10 	vmov	r0, r1, d0
   b72a0:	ee10 2a10 	vmov	r2, s0
   b72a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b72a8:	ec43 2b10 	vmov	d0, r2, r3
   b72ac:	4770      	bx	lr
   b72ae:	bf00      	nop

000b72b0 <finite>:
   b72b0:	b082      	sub	sp, #8
   b72b2:	ed8d 0b00 	vstr	d0, [sp]
   b72b6:	9801      	ldr	r0, [sp, #4]
   b72b8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b72bc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b72c0:	0fc0      	lsrs	r0, r0, #31
   b72c2:	b002      	add	sp, #8
   b72c4:	4770      	bx	lr
   b72c6:	bf00      	nop

000b72c8 <nan>:
   b72c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; b72d0 <nan+0x8>
   b72cc:	4770      	bx	lr
   b72ce:	bf00      	nop
   b72d0:	00000000 	.word	0x00000000
   b72d4:	7ff80000 	.word	0x7ff80000

000b72d8 <rint>:
   b72d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b72da:	ec53 2b10 	vmov	r2, r3, d0
   b72de:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b72e2:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b72e6:	2913      	cmp	r1, #19
   b72e8:	ee10 0a10 	vmov	r0, s0
   b72ec:	b083      	sub	sp, #12
   b72ee:	461c      	mov	r4, r3
   b72f0:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b72f4:	dc3a      	bgt.n	b736c <rint+0x94>
   b72f6:	2900      	cmp	r1, #0
   b72f8:	db30      	blt.n	b735c <rint+0x84>
   b72fa:	4d42      	ldr	r5, [pc, #264]	; (b7404 <rint+0x12c>)
   b72fc:	fa45 fc01 	asr.w	ip, r5, r1
   b7300:	ea03 050c 	and.w	r5, r3, ip
   b7304:	4315      	orrs	r5, r2
   b7306:	d02d      	beq.n	b7364 <rint+0x8c>
   b7308:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b730c:	4318      	orrs	r0, r3
   b730e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b7312:	d00c      	beq.n	b732e <rint+0x56>
   b7314:	ea24 0c0c 	bic.w	ip, r4, ip
   b7318:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b731c:	2913      	cmp	r1, #19
   b731e:	fa44 f101 	asr.w	r1, r4, r1
   b7322:	bf0c      	ite	eq
   b7324:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b7328:	2000      	movne	r0, #0
   b732a:	ea4c 0401 	orr.w	r4, ip, r1
   b732e:	4936      	ldr	r1, [pc, #216]	; (b7408 <rint+0x130>)
   b7330:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b7334:	4623      	mov	r3, r4
   b7336:	e9de 4500 	ldrd	r4, r5, [lr]
   b733a:	4602      	mov	r2, r0
   b733c:	4629      	mov	r1, r5
   b733e:	4620      	mov	r0, r4
   b7340:	f000 f8fe 	bl	b7540 <__adddf3>
   b7344:	e9cd 0100 	strd	r0, r1, [sp]
   b7348:	e9dd 0100 	ldrd	r0, r1, [sp]
   b734c:	4622      	mov	r2, r4
   b734e:	462b      	mov	r3, r5
   b7350:	f000 f8f4 	bl	b753c <__aeabi_dsub>
   b7354:	ec41 0b10 	vmov	d0, r0, r1
   b7358:	b003      	add	sp, #12
   b735a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b735c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b7360:	4311      	orrs	r1, r2
   b7362:	d124      	bne.n	b73ae <rint+0xd6>
   b7364:	ec43 2b10 	vmov	d0, r2, r3
   b7368:	b003      	add	sp, #12
   b736a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b736c:	2933      	cmp	r1, #51	; 0x33
   b736e:	dd08      	ble.n	b7382 <rint+0xaa>
   b7370:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b7374:	d1f6      	bne.n	b7364 <rint+0x8c>
   b7376:	4619      	mov	r1, r3
   b7378:	f000 f8e2 	bl	b7540 <__adddf3>
   b737c:	ec41 0b10 	vmov	d0, r0, r1
   b7380:	e7f2      	b.n	b7368 <rint+0x90>
   b7382:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b7386:	f04f 31ff 	mov.w	r1, #4294967295
   b738a:	fa21 f10c 	lsr.w	r1, r1, ip
   b738e:	420a      	tst	r2, r1
   b7390:	d0e8      	beq.n	b7364 <rint+0x8c>
   b7392:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b7396:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b739a:	d0c8      	beq.n	b732e <rint+0x56>
   b739c:	ea20 0303 	bic.w	r3, r0, r3
   b73a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b73a4:	fa40 fc0c 	asr.w	ip, r0, ip
   b73a8:	ea43 000c 	orr.w	r0, r3, ip
   b73ac:	e7bf      	b.n	b732e <rint+0x56>
   b73ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b73b2:	4318      	orrs	r0, r3
   b73b4:	4a14      	ldr	r2, [pc, #80]	; (b7408 <rint+0x130>)
   b73b6:	4243      	negs	r3, r0
   b73b8:	4303      	orrs	r3, r0
   b73ba:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b73be:	0b1b      	lsrs	r3, r3, #12
   b73c0:	0c62      	lsrs	r2, r4, #17
   b73c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b73c6:	0452      	lsls	r2, r2, #17
   b73c8:	ea43 0702 	orr.w	r7, r3, r2
   b73cc:	463b      	mov	r3, r7
   b73ce:	e9de 6700 	ldrd	r6, r7, [lr]
   b73d2:	ee10 2a10 	vmov	r2, s0
   b73d6:	4630      	mov	r0, r6
   b73d8:	4639      	mov	r1, r7
   b73da:	f000 f8b1 	bl	b7540 <__adddf3>
   b73de:	e9cd 0100 	strd	r0, r1, [sp]
   b73e2:	4632      	mov	r2, r6
   b73e4:	463b      	mov	r3, r7
   b73e6:	e9dd 0100 	ldrd	r0, r1, [sp]
   b73ea:	f000 f8a7 	bl	b753c <__aeabi_dsub>
   b73ee:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b73f2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b73f6:	4602      	mov	r2, r0
   b73f8:	ea41 0304 	orr.w	r3, r1, r4
   b73fc:	ec43 2b10 	vmov	d0, r2, r3
   b7400:	b003      	add	sp, #12
   b7402:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7404:	000fffff 	.word	0x000fffff
   b7408:	000b8410 	.word	0x000b8410
   b740c:	00000000 	.word	0x00000000

000b7410 <scalbn>:
   b7410:	b538      	push	{r3, r4, r5, lr}
   b7412:	ec53 2b10 	vmov	r2, r3, d0
   b7416:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b741a:	4604      	mov	r4, r0
   b741c:	469c      	mov	ip, r3
   b741e:	bb89      	cbnz	r1, b7484 <scalbn+0x74>
   b7420:	ee10 1a10 	vmov	r1, s0
   b7424:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b7428:	ea5c 0101 	orrs.w	r1, ip, r1
   b742c:	d029      	beq.n	b7482 <scalbn+0x72>
   b742e:	4619      	mov	r1, r3
   b7430:	2200      	movs	r2, #0
   b7432:	4b3d      	ldr	r3, [pc, #244]	; (b7528 <scalbn+0x118>)
   b7434:	4d3d      	ldr	r5, [pc, #244]	; (b752c <scalbn+0x11c>)
   b7436:	ee10 0a10 	vmov	r0, s0
   b743a:	f000 fa37 	bl	b78ac <__aeabi_dmul>
   b743e:	42ac      	cmp	r4, r5
   b7440:	4602      	mov	r2, r0
   b7442:	460b      	mov	r3, r1
   b7444:	db16      	blt.n	b7474 <scalbn+0x64>
   b7446:	468c      	mov	ip, r1
   b7448:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b744c:	3936      	subs	r1, #54	; 0x36
   b744e:	4421      	add	r1, r4
   b7450:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b7454:	4281      	cmp	r1, r0
   b7456:	dc21      	bgt.n	b749c <scalbn+0x8c>
   b7458:	2900      	cmp	r1, #0
   b745a:	dc47      	bgt.n	b74ec <scalbn+0xdc>
   b745c:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b7460:	da34      	bge.n	b74cc <scalbn+0xbc>
   b7462:	f24c 3150 	movw	r1, #50000	; 0xc350
   b7466:	428c      	cmp	r4, r1
   b7468:	dc18      	bgt.n	b749c <scalbn+0x8c>
   b746a:	2b00      	cmp	r3, #0
   b746c:	a126      	add	r1, pc, #152	; (adr r1, b7508 <scalbn+0xf8>)
   b746e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7472:	db44      	blt.n	b74fe <scalbn+0xee>
   b7474:	a324      	add	r3, pc, #144	; (adr r3, b7508 <scalbn+0xf8>)
   b7476:	e9d3 2300 	ldrd	r2, r3, [r3]
   b747a:	f000 fa17 	bl	b78ac <__aeabi_dmul>
   b747e:	ec41 0b10 	vmov	d0, r0, r1
   b7482:	bd38      	pop	{r3, r4, r5, pc}
   b7484:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b7488:	4281      	cmp	r1, r0
   b748a:	d1e0      	bne.n	b744e <scalbn+0x3e>
   b748c:	ee10 0a10 	vmov	r0, s0
   b7490:	4619      	mov	r1, r3
   b7492:	f000 f855 	bl	b7540 <__adddf3>
   b7496:	ec41 0b10 	vmov	d0, r0, r1
   b749a:	bd38      	pop	{r3, r4, r5, pc}
   b749c:	2b00      	cmp	r3, #0
   b749e:	a11c      	add	r1, pc, #112	; (adr r1, b7510 <scalbn+0x100>)
   b74a0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b74a4:	db07      	blt.n	b74b6 <scalbn+0xa6>
   b74a6:	a31a      	add	r3, pc, #104	; (adr r3, b7510 <scalbn+0x100>)
   b74a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b74ac:	f000 f9fe 	bl	b78ac <__aeabi_dmul>
   b74b0:	ec41 0b10 	vmov	d0, r0, r1
   b74b4:	bd38      	pop	{r3, r4, r5, pc}
   b74b6:	a118      	add	r1, pc, #96	; (adr r1, b7518 <scalbn+0x108>)
   b74b8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b74bc:	a314      	add	r3, pc, #80	; (adr r3, b7510 <scalbn+0x100>)
   b74be:	e9d3 2300 	ldrd	r2, r3, [r3]
   b74c2:	f000 f9f3 	bl	b78ac <__aeabi_dmul>
   b74c6:	ec41 0b10 	vmov	d0, r0, r1
   b74ca:	e7f3      	b.n	b74b4 <scalbn+0xa4>
   b74cc:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b74d0:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b74d4:	3136      	adds	r1, #54	; 0x36
   b74d6:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b74da:	4610      	mov	r0, r2
   b74dc:	4619      	mov	r1, r3
   b74de:	2200      	movs	r2, #0
   b74e0:	4b13      	ldr	r3, [pc, #76]	; (b7530 <scalbn+0x120>)
   b74e2:	f000 f9e3 	bl	b78ac <__aeabi_dmul>
   b74e6:	ec41 0b10 	vmov	d0, r0, r1
   b74ea:	bd38      	pop	{r3, r4, r5, pc}
   b74ec:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b74f0:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b74f4:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b74f8:	ec43 2b10 	vmov	d0, r2, r3
   b74fc:	bd38      	pop	{r3, r4, r5, pc}
   b74fe:	a108      	add	r1, pc, #32	; (adr r1, b7520 <scalbn+0x110>)
   b7500:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7504:	e7b6      	b.n	b7474 <scalbn+0x64>
   b7506:	bf00      	nop
   b7508:	c2f8f359 	.word	0xc2f8f359
   b750c:	01a56e1f 	.word	0x01a56e1f
   b7510:	8800759c 	.word	0x8800759c
   b7514:	7e37e43c 	.word	0x7e37e43c
   b7518:	8800759c 	.word	0x8800759c
   b751c:	fe37e43c 	.word	0xfe37e43c
   b7520:	c2f8f359 	.word	0xc2f8f359
   b7524:	81a56e1f 	.word	0x81a56e1f
   b7528:	43500000 	.word	0x43500000
   b752c:	ffff3cb0 	.word	0xffff3cb0
   b7530:	3c900000 	.word	0x3c900000

000b7534 <__aeabi_drsub>:
   b7534:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7538:	e002      	b.n	b7540 <__adddf3>
   b753a:	bf00      	nop

000b753c <__aeabi_dsub>:
   b753c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7540 <__adddf3>:
   b7540:	b530      	push	{r4, r5, lr}
   b7542:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7546:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b754a:	ea94 0f05 	teq	r4, r5
   b754e:	bf08      	it	eq
   b7550:	ea90 0f02 	teqeq	r0, r2
   b7554:	bf1f      	itttt	ne
   b7556:	ea54 0c00 	orrsne.w	ip, r4, r0
   b755a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b755e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7562:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7566:	f000 80e2 	beq.w	b772e <__adddf3+0x1ee>
   b756a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b756e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7572:	bfb8      	it	lt
   b7574:	426d      	neglt	r5, r5
   b7576:	dd0c      	ble.n	b7592 <__adddf3+0x52>
   b7578:	442c      	add	r4, r5
   b757a:	ea80 0202 	eor.w	r2, r0, r2
   b757e:	ea81 0303 	eor.w	r3, r1, r3
   b7582:	ea82 0000 	eor.w	r0, r2, r0
   b7586:	ea83 0101 	eor.w	r1, r3, r1
   b758a:	ea80 0202 	eor.w	r2, r0, r2
   b758e:	ea81 0303 	eor.w	r3, r1, r3
   b7592:	2d36      	cmp	r5, #54	; 0x36
   b7594:	bf88      	it	hi
   b7596:	bd30      	pophi	{r4, r5, pc}
   b7598:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b759c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b75a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b75a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b75a8:	d002      	beq.n	b75b0 <__adddf3+0x70>
   b75aa:	4240      	negs	r0, r0
   b75ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b75b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b75b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b75b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b75bc:	d002      	beq.n	b75c4 <__adddf3+0x84>
   b75be:	4252      	negs	r2, r2
   b75c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b75c4:	ea94 0f05 	teq	r4, r5
   b75c8:	f000 80a7 	beq.w	b771a <__adddf3+0x1da>
   b75cc:	f1a4 0401 	sub.w	r4, r4, #1
   b75d0:	f1d5 0e20 	rsbs	lr, r5, #32
   b75d4:	db0d      	blt.n	b75f2 <__adddf3+0xb2>
   b75d6:	fa02 fc0e 	lsl.w	ip, r2, lr
   b75da:	fa22 f205 	lsr.w	r2, r2, r5
   b75de:	1880      	adds	r0, r0, r2
   b75e0:	f141 0100 	adc.w	r1, r1, #0
   b75e4:	fa03 f20e 	lsl.w	r2, r3, lr
   b75e8:	1880      	adds	r0, r0, r2
   b75ea:	fa43 f305 	asr.w	r3, r3, r5
   b75ee:	4159      	adcs	r1, r3
   b75f0:	e00e      	b.n	b7610 <__adddf3+0xd0>
   b75f2:	f1a5 0520 	sub.w	r5, r5, #32
   b75f6:	f10e 0e20 	add.w	lr, lr, #32
   b75fa:	2a01      	cmp	r2, #1
   b75fc:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7600:	bf28      	it	cs
   b7602:	f04c 0c02 	orrcs.w	ip, ip, #2
   b7606:	fa43 f305 	asr.w	r3, r3, r5
   b760a:	18c0      	adds	r0, r0, r3
   b760c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7614:	d507      	bpl.n	b7626 <__adddf3+0xe6>
   b7616:	f04f 0e00 	mov.w	lr, #0
   b761a:	f1dc 0c00 	rsbs	ip, ip, #0
   b761e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b7622:	eb6e 0101 	sbc.w	r1, lr, r1
   b7626:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b762a:	d31b      	bcc.n	b7664 <__adddf3+0x124>
   b762c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7630:	d30c      	bcc.n	b764c <__adddf3+0x10c>
   b7632:	0849      	lsrs	r1, r1, #1
   b7634:	ea5f 0030 	movs.w	r0, r0, rrx
   b7638:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b763c:	f104 0401 	add.w	r4, r4, #1
   b7640:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7644:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7648:	f080 809a 	bcs.w	b7780 <__adddf3+0x240>
   b764c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7650:	bf08      	it	eq
   b7652:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7656:	f150 0000 	adcs.w	r0, r0, #0
   b765a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b765e:	ea41 0105 	orr.w	r1, r1, r5
   b7662:	bd30      	pop	{r4, r5, pc}
   b7664:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7668:	4140      	adcs	r0, r0
   b766a:	eb41 0101 	adc.w	r1, r1, r1
   b766e:	3c01      	subs	r4, #1
   b7670:	bf28      	it	cs
   b7672:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7676:	d2e9      	bcs.n	b764c <__adddf3+0x10c>
   b7678:	f091 0f00 	teq	r1, #0
   b767c:	bf04      	itt	eq
   b767e:	4601      	moveq	r1, r0
   b7680:	2000      	moveq	r0, #0
   b7682:	fab1 f381 	clz	r3, r1
   b7686:	bf08      	it	eq
   b7688:	3320      	addeq	r3, #32
   b768a:	f1a3 030b 	sub.w	r3, r3, #11
   b768e:	f1b3 0220 	subs.w	r2, r3, #32
   b7692:	da0c      	bge.n	b76ae <__adddf3+0x16e>
   b7694:	320c      	adds	r2, #12
   b7696:	dd08      	ble.n	b76aa <__adddf3+0x16a>
   b7698:	f102 0c14 	add.w	ip, r2, #20
   b769c:	f1c2 020c 	rsb	r2, r2, #12
   b76a0:	fa01 f00c 	lsl.w	r0, r1, ip
   b76a4:	fa21 f102 	lsr.w	r1, r1, r2
   b76a8:	e00c      	b.n	b76c4 <__adddf3+0x184>
   b76aa:	f102 0214 	add.w	r2, r2, #20
   b76ae:	bfd8      	it	le
   b76b0:	f1c2 0c20 	rsble	ip, r2, #32
   b76b4:	fa01 f102 	lsl.w	r1, r1, r2
   b76b8:	fa20 fc0c 	lsr.w	ip, r0, ip
   b76bc:	bfdc      	itt	le
   b76be:	ea41 010c 	orrle.w	r1, r1, ip
   b76c2:	4090      	lslle	r0, r2
   b76c4:	1ae4      	subs	r4, r4, r3
   b76c6:	bfa2      	ittt	ge
   b76c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b76cc:	4329      	orrge	r1, r5
   b76ce:	bd30      	popge	{r4, r5, pc}
   b76d0:	ea6f 0404 	mvn.w	r4, r4
   b76d4:	3c1f      	subs	r4, #31
   b76d6:	da1c      	bge.n	b7712 <__adddf3+0x1d2>
   b76d8:	340c      	adds	r4, #12
   b76da:	dc0e      	bgt.n	b76fa <__adddf3+0x1ba>
   b76dc:	f104 0414 	add.w	r4, r4, #20
   b76e0:	f1c4 0220 	rsb	r2, r4, #32
   b76e4:	fa20 f004 	lsr.w	r0, r0, r4
   b76e8:	fa01 f302 	lsl.w	r3, r1, r2
   b76ec:	ea40 0003 	orr.w	r0, r0, r3
   b76f0:	fa21 f304 	lsr.w	r3, r1, r4
   b76f4:	ea45 0103 	orr.w	r1, r5, r3
   b76f8:	bd30      	pop	{r4, r5, pc}
   b76fa:	f1c4 040c 	rsb	r4, r4, #12
   b76fe:	f1c4 0220 	rsb	r2, r4, #32
   b7702:	fa20 f002 	lsr.w	r0, r0, r2
   b7706:	fa01 f304 	lsl.w	r3, r1, r4
   b770a:	ea40 0003 	orr.w	r0, r0, r3
   b770e:	4629      	mov	r1, r5
   b7710:	bd30      	pop	{r4, r5, pc}
   b7712:	fa21 f004 	lsr.w	r0, r1, r4
   b7716:	4629      	mov	r1, r5
   b7718:	bd30      	pop	{r4, r5, pc}
   b771a:	f094 0f00 	teq	r4, #0
   b771e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b7722:	bf06      	itte	eq
   b7724:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7728:	3401      	addeq	r4, #1
   b772a:	3d01      	subne	r5, #1
   b772c:	e74e      	b.n	b75cc <__adddf3+0x8c>
   b772e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7732:	bf18      	it	ne
   b7734:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7738:	d029      	beq.n	b778e <__adddf3+0x24e>
   b773a:	ea94 0f05 	teq	r4, r5
   b773e:	bf08      	it	eq
   b7740:	ea90 0f02 	teqeq	r0, r2
   b7744:	d005      	beq.n	b7752 <__adddf3+0x212>
   b7746:	ea54 0c00 	orrs.w	ip, r4, r0
   b774a:	bf04      	itt	eq
   b774c:	4619      	moveq	r1, r3
   b774e:	4610      	moveq	r0, r2
   b7750:	bd30      	pop	{r4, r5, pc}
   b7752:	ea91 0f03 	teq	r1, r3
   b7756:	bf1e      	ittt	ne
   b7758:	2100      	movne	r1, #0
   b775a:	2000      	movne	r0, #0
   b775c:	bd30      	popne	{r4, r5, pc}
   b775e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7762:	d105      	bne.n	b7770 <__adddf3+0x230>
   b7764:	0040      	lsls	r0, r0, #1
   b7766:	4149      	adcs	r1, r1
   b7768:	bf28      	it	cs
   b776a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b776e:	bd30      	pop	{r4, r5, pc}
   b7770:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7774:	bf3c      	itt	cc
   b7776:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b777a:	bd30      	popcc	{r4, r5, pc}
   b777c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7780:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7784:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7788:	f04f 0000 	mov.w	r0, #0
   b778c:	bd30      	pop	{r4, r5, pc}
   b778e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7792:	bf1a      	itte	ne
   b7794:	4619      	movne	r1, r3
   b7796:	4610      	movne	r0, r2
   b7798:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b779c:	bf1c      	itt	ne
   b779e:	460b      	movne	r3, r1
   b77a0:	4602      	movne	r2, r0
   b77a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b77a6:	bf06      	itte	eq
   b77a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b77ac:	ea91 0f03 	teqeq	r1, r3
   b77b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b77b4:	bd30      	pop	{r4, r5, pc}
   b77b6:	bf00      	nop

000b77b8 <__aeabi_ui2d>:
   b77b8:	f090 0f00 	teq	r0, #0
   b77bc:	bf04      	itt	eq
   b77be:	2100      	moveq	r1, #0
   b77c0:	4770      	bxeq	lr
   b77c2:	b530      	push	{r4, r5, lr}
   b77c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b77c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b77cc:	f04f 0500 	mov.w	r5, #0
   b77d0:	f04f 0100 	mov.w	r1, #0
   b77d4:	e750      	b.n	b7678 <__adddf3+0x138>
   b77d6:	bf00      	nop

000b77d8 <__aeabi_i2d>:
   b77d8:	f090 0f00 	teq	r0, #0
   b77dc:	bf04      	itt	eq
   b77de:	2100      	moveq	r1, #0
   b77e0:	4770      	bxeq	lr
   b77e2:	b530      	push	{r4, r5, lr}
   b77e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b77e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b77ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b77f0:	bf48      	it	mi
   b77f2:	4240      	negmi	r0, r0
   b77f4:	f04f 0100 	mov.w	r1, #0
   b77f8:	e73e      	b.n	b7678 <__adddf3+0x138>
   b77fa:	bf00      	nop

000b77fc <__aeabi_f2d>:
   b77fc:	0042      	lsls	r2, r0, #1
   b77fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b7802:	ea4f 0131 	mov.w	r1, r1, rrx
   b7806:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b780a:	bf1f      	itttt	ne
   b780c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7810:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b7814:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7818:	4770      	bxne	lr
   b781a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b781e:	bf08      	it	eq
   b7820:	4770      	bxeq	lr
   b7822:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7826:	bf04      	itt	eq
   b7828:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b782c:	4770      	bxeq	lr
   b782e:	b530      	push	{r4, r5, lr}
   b7830:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7834:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7838:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b783c:	e71c      	b.n	b7678 <__adddf3+0x138>
   b783e:	bf00      	nop

000b7840 <__aeabi_ul2d>:
   b7840:	ea50 0201 	orrs.w	r2, r0, r1
   b7844:	bf08      	it	eq
   b7846:	4770      	bxeq	lr
   b7848:	b530      	push	{r4, r5, lr}
   b784a:	f04f 0500 	mov.w	r5, #0
   b784e:	e00a      	b.n	b7866 <__aeabi_l2d+0x16>

000b7850 <__aeabi_l2d>:
   b7850:	ea50 0201 	orrs.w	r2, r0, r1
   b7854:	bf08      	it	eq
   b7856:	4770      	bxeq	lr
   b7858:	b530      	push	{r4, r5, lr}
   b785a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b785e:	d502      	bpl.n	b7866 <__aeabi_l2d+0x16>
   b7860:	4240      	negs	r0, r0
   b7862:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7866:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b786a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b786e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7872:	f43f aed8 	beq.w	b7626 <__adddf3+0xe6>
   b7876:	f04f 0203 	mov.w	r2, #3
   b787a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b787e:	bf18      	it	ne
   b7880:	3203      	addne	r2, #3
   b7882:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7886:	bf18      	it	ne
   b7888:	3203      	addne	r2, #3
   b788a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b788e:	f1c2 0320 	rsb	r3, r2, #32
   b7892:	fa00 fc03 	lsl.w	ip, r0, r3
   b7896:	fa20 f002 	lsr.w	r0, r0, r2
   b789a:	fa01 fe03 	lsl.w	lr, r1, r3
   b789e:	ea40 000e 	orr.w	r0, r0, lr
   b78a2:	fa21 f102 	lsr.w	r1, r1, r2
   b78a6:	4414      	add	r4, r2
   b78a8:	e6bd      	b.n	b7626 <__adddf3+0xe6>
   b78aa:	bf00      	nop

000b78ac <__aeabi_dmul>:
   b78ac:	b570      	push	{r4, r5, r6, lr}
   b78ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b78b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b78b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b78ba:	bf1d      	ittte	ne
   b78bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b78c0:	ea94 0f0c 	teqne	r4, ip
   b78c4:	ea95 0f0c 	teqne	r5, ip
   b78c8:	f000 f8de 	bleq	b7a88 <__aeabi_dmul+0x1dc>
   b78cc:	442c      	add	r4, r5
   b78ce:	ea81 0603 	eor.w	r6, r1, r3
   b78d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b78d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b78da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b78de:	bf18      	it	ne
   b78e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b78e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b78e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b78ec:	d038      	beq.n	b7960 <__aeabi_dmul+0xb4>
   b78ee:	fba0 ce02 	umull	ip, lr, r0, r2
   b78f2:	f04f 0500 	mov.w	r5, #0
   b78f6:	fbe1 e502 	umlal	lr, r5, r1, r2
   b78fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b78fe:	fbe0 e503 	umlal	lr, r5, r0, r3
   b7902:	f04f 0600 	mov.w	r6, #0
   b7906:	fbe1 5603 	umlal	r5, r6, r1, r3
   b790a:	f09c 0f00 	teq	ip, #0
   b790e:	bf18      	it	ne
   b7910:	f04e 0e01 	orrne.w	lr, lr, #1
   b7914:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7918:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b791c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7920:	d204      	bcs.n	b792c <__aeabi_dmul+0x80>
   b7922:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7926:	416d      	adcs	r5, r5
   b7928:	eb46 0606 	adc.w	r6, r6, r6
   b792c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b7930:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7934:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7938:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b793c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7940:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7944:	bf88      	it	hi
   b7946:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b794a:	d81e      	bhi.n	b798a <__aeabi_dmul+0xde>
   b794c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7950:	bf08      	it	eq
   b7952:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7956:	f150 0000 	adcs.w	r0, r0, #0
   b795a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b795e:	bd70      	pop	{r4, r5, r6, pc}
   b7960:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7964:	ea46 0101 	orr.w	r1, r6, r1
   b7968:	ea40 0002 	orr.w	r0, r0, r2
   b796c:	ea81 0103 	eor.w	r1, r1, r3
   b7970:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b7974:	bfc2      	ittt	gt
   b7976:	ebd4 050c 	rsbsgt	r5, r4, ip
   b797a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b797e:	bd70      	popgt	{r4, r5, r6, pc}
   b7980:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7984:	f04f 0e00 	mov.w	lr, #0
   b7988:	3c01      	subs	r4, #1
   b798a:	f300 80ab 	bgt.w	b7ae4 <__aeabi_dmul+0x238>
   b798e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b7992:	bfde      	ittt	le
   b7994:	2000      	movle	r0, #0
   b7996:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b799a:	bd70      	pople	{r4, r5, r6, pc}
   b799c:	f1c4 0400 	rsb	r4, r4, #0
   b79a0:	3c20      	subs	r4, #32
   b79a2:	da35      	bge.n	b7a10 <__aeabi_dmul+0x164>
   b79a4:	340c      	adds	r4, #12
   b79a6:	dc1b      	bgt.n	b79e0 <__aeabi_dmul+0x134>
   b79a8:	f104 0414 	add.w	r4, r4, #20
   b79ac:	f1c4 0520 	rsb	r5, r4, #32
   b79b0:	fa00 f305 	lsl.w	r3, r0, r5
   b79b4:	fa20 f004 	lsr.w	r0, r0, r4
   b79b8:	fa01 f205 	lsl.w	r2, r1, r5
   b79bc:	ea40 0002 	orr.w	r0, r0, r2
   b79c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b79c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b79c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b79cc:	fa21 f604 	lsr.w	r6, r1, r4
   b79d0:	eb42 0106 	adc.w	r1, r2, r6
   b79d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b79d8:	bf08      	it	eq
   b79da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b79de:	bd70      	pop	{r4, r5, r6, pc}
   b79e0:	f1c4 040c 	rsb	r4, r4, #12
   b79e4:	f1c4 0520 	rsb	r5, r4, #32
   b79e8:	fa00 f304 	lsl.w	r3, r0, r4
   b79ec:	fa20 f005 	lsr.w	r0, r0, r5
   b79f0:	fa01 f204 	lsl.w	r2, r1, r4
   b79f4:	ea40 0002 	orr.w	r0, r0, r2
   b79f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b79fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7a00:	f141 0100 	adc.w	r1, r1, #0
   b7a04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7a08:	bf08      	it	eq
   b7a0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7a0e:	bd70      	pop	{r4, r5, r6, pc}
   b7a10:	f1c4 0520 	rsb	r5, r4, #32
   b7a14:	fa00 f205 	lsl.w	r2, r0, r5
   b7a18:	ea4e 0e02 	orr.w	lr, lr, r2
   b7a1c:	fa20 f304 	lsr.w	r3, r0, r4
   b7a20:	fa01 f205 	lsl.w	r2, r1, r5
   b7a24:	ea43 0302 	orr.w	r3, r3, r2
   b7a28:	fa21 f004 	lsr.w	r0, r1, r4
   b7a2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7a30:	fa21 f204 	lsr.w	r2, r1, r4
   b7a34:	ea20 0002 	bic.w	r0, r0, r2
   b7a38:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7a3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7a40:	bf08      	it	eq
   b7a42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7a46:	bd70      	pop	{r4, r5, r6, pc}
   b7a48:	f094 0f00 	teq	r4, #0
   b7a4c:	d10f      	bne.n	b7a6e <__aeabi_dmul+0x1c2>
   b7a4e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b7a52:	0040      	lsls	r0, r0, #1
   b7a54:	eb41 0101 	adc.w	r1, r1, r1
   b7a58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7a5c:	bf08      	it	eq
   b7a5e:	3c01      	subeq	r4, #1
   b7a60:	d0f7      	beq.n	b7a52 <__aeabi_dmul+0x1a6>
   b7a62:	ea41 0106 	orr.w	r1, r1, r6
   b7a66:	f095 0f00 	teq	r5, #0
   b7a6a:	bf18      	it	ne
   b7a6c:	4770      	bxne	lr
   b7a6e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b7a72:	0052      	lsls	r2, r2, #1
   b7a74:	eb43 0303 	adc.w	r3, r3, r3
   b7a78:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7a7c:	bf08      	it	eq
   b7a7e:	3d01      	subeq	r5, #1
   b7a80:	d0f7      	beq.n	b7a72 <__aeabi_dmul+0x1c6>
   b7a82:	ea43 0306 	orr.w	r3, r3, r6
   b7a86:	4770      	bx	lr
   b7a88:	ea94 0f0c 	teq	r4, ip
   b7a8c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7a90:	bf18      	it	ne
   b7a92:	ea95 0f0c 	teqne	r5, ip
   b7a96:	d00c      	beq.n	b7ab2 <__aeabi_dmul+0x206>
   b7a98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7a9c:	bf18      	it	ne
   b7a9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7aa2:	d1d1      	bne.n	b7a48 <__aeabi_dmul+0x19c>
   b7aa4:	ea81 0103 	eor.w	r1, r1, r3
   b7aa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7aac:	f04f 0000 	mov.w	r0, #0
   b7ab0:	bd70      	pop	{r4, r5, r6, pc}
   b7ab2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7ab6:	bf06      	itte	eq
   b7ab8:	4610      	moveq	r0, r2
   b7aba:	4619      	moveq	r1, r3
   b7abc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7ac0:	d019      	beq.n	b7af6 <__aeabi_dmul+0x24a>
   b7ac2:	ea94 0f0c 	teq	r4, ip
   b7ac6:	d102      	bne.n	b7ace <__aeabi_dmul+0x222>
   b7ac8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b7acc:	d113      	bne.n	b7af6 <__aeabi_dmul+0x24a>
   b7ace:	ea95 0f0c 	teq	r5, ip
   b7ad2:	d105      	bne.n	b7ae0 <__aeabi_dmul+0x234>
   b7ad4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7ad8:	bf1c      	itt	ne
   b7ada:	4610      	movne	r0, r2
   b7adc:	4619      	movne	r1, r3
   b7ade:	d10a      	bne.n	b7af6 <__aeabi_dmul+0x24a>
   b7ae0:	ea81 0103 	eor.w	r1, r1, r3
   b7ae4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7ae8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7aec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7af0:	f04f 0000 	mov.w	r0, #0
   b7af4:	bd70      	pop	{r4, r5, r6, pc}
   b7af6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7afa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b7afe:	bd70      	pop	{r4, r5, r6, pc}

000b7b00 <__aeabi_ddiv>:
   b7b00:	b570      	push	{r4, r5, r6, lr}
   b7b02:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7b06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7b0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7b0e:	bf1d      	ittte	ne
   b7b10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7b14:	ea94 0f0c 	teqne	r4, ip
   b7b18:	ea95 0f0c 	teqne	r5, ip
   b7b1c:	f000 f8a7 	bleq	b7c6e <__aeabi_ddiv+0x16e>
   b7b20:	eba4 0405 	sub.w	r4, r4, r5
   b7b24:	ea81 0e03 	eor.w	lr, r1, r3
   b7b28:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7b2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7b30:	f000 8088 	beq.w	b7c44 <__aeabi_ddiv+0x144>
   b7b34:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7b38:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b7b3c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b7b40:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b7b44:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7b48:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7b4c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7b50:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b7b54:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7b58:	429d      	cmp	r5, r3
   b7b5a:	bf08      	it	eq
   b7b5c:	4296      	cmpeq	r6, r2
   b7b5e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b7b62:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b7b66:	d202      	bcs.n	b7b6e <__aeabi_ddiv+0x6e>
   b7b68:	085b      	lsrs	r3, r3, #1
   b7b6a:	ea4f 0232 	mov.w	r2, r2, rrx
   b7b6e:	1ab6      	subs	r6, r6, r2
   b7b70:	eb65 0503 	sbc.w	r5, r5, r3
   b7b74:	085b      	lsrs	r3, r3, #1
   b7b76:	ea4f 0232 	mov.w	r2, r2, rrx
   b7b7a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b7b7e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b7b82:	ebb6 0e02 	subs.w	lr, r6, r2
   b7b86:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7b8a:	bf22      	ittt	cs
   b7b8c:	1ab6      	subcs	r6, r6, r2
   b7b8e:	4675      	movcs	r5, lr
   b7b90:	ea40 000c 	orrcs.w	r0, r0, ip
   b7b94:	085b      	lsrs	r3, r3, #1
   b7b96:	ea4f 0232 	mov.w	r2, r2, rrx
   b7b9a:	ebb6 0e02 	subs.w	lr, r6, r2
   b7b9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7ba2:	bf22      	ittt	cs
   b7ba4:	1ab6      	subcs	r6, r6, r2
   b7ba6:	4675      	movcs	r5, lr
   b7ba8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7bac:	085b      	lsrs	r3, r3, #1
   b7bae:	ea4f 0232 	mov.w	r2, r2, rrx
   b7bb2:	ebb6 0e02 	subs.w	lr, r6, r2
   b7bb6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7bba:	bf22      	ittt	cs
   b7bbc:	1ab6      	subcs	r6, r6, r2
   b7bbe:	4675      	movcs	r5, lr
   b7bc0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b7bc4:	085b      	lsrs	r3, r3, #1
   b7bc6:	ea4f 0232 	mov.w	r2, r2, rrx
   b7bca:	ebb6 0e02 	subs.w	lr, r6, r2
   b7bce:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7bd2:	bf22      	ittt	cs
   b7bd4:	1ab6      	subcs	r6, r6, r2
   b7bd6:	4675      	movcs	r5, lr
   b7bd8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b7bdc:	ea55 0e06 	orrs.w	lr, r5, r6
   b7be0:	d018      	beq.n	b7c14 <__aeabi_ddiv+0x114>
   b7be2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b7be6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b7bea:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b7bee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b7bf2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b7bf6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b7bfa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b7bfe:	d1c0      	bne.n	b7b82 <__aeabi_ddiv+0x82>
   b7c00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7c04:	d10b      	bne.n	b7c1e <__aeabi_ddiv+0x11e>
   b7c06:	ea41 0100 	orr.w	r1, r1, r0
   b7c0a:	f04f 0000 	mov.w	r0, #0
   b7c0e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b7c12:	e7b6      	b.n	b7b82 <__aeabi_ddiv+0x82>
   b7c14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7c18:	bf04      	itt	eq
   b7c1a:	4301      	orreq	r1, r0
   b7c1c:	2000      	moveq	r0, #0
   b7c1e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7c22:	bf88      	it	hi
   b7c24:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7c28:	f63f aeaf 	bhi.w	b798a <__aeabi_dmul+0xde>
   b7c2c:	ebb5 0c03 	subs.w	ip, r5, r3
   b7c30:	bf04      	itt	eq
   b7c32:	ebb6 0c02 	subseq.w	ip, r6, r2
   b7c36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7c3a:	f150 0000 	adcs.w	r0, r0, #0
   b7c3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7c42:	bd70      	pop	{r4, r5, r6, pc}
   b7c44:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7c48:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7c4c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7c50:	bfc2      	ittt	gt
   b7c52:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7c56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7c5a:	bd70      	popgt	{r4, r5, r6, pc}
   b7c5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7c60:	f04f 0e00 	mov.w	lr, #0
   b7c64:	3c01      	subs	r4, #1
   b7c66:	e690      	b.n	b798a <__aeabi_dmul+0xde>
   b7c68:	ea45 0e06 	orr.w	lr, r5, r6
   b7c6c:	e68d      	b.n	b798a <__aeabi_dmul+0xde>
   b7c6e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7c72:	ea94 0f0c 	teq	r4, ip
   b7c76:	bf08      	it	eq
   b7c78:	ea95 0f0c 	teqeq	r5, ip
   b7c7c:	f43f af3b 	beq.w	b7af6 <__aeabi_dmul+0x24a>
   b7c80:	ea94 0f0c 	teq	r4, ip
   b7c84:	d10a      	bne.n	b7c9c <__aeabi_ddiv+0x19c>
   b7c86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7c8a:	f47f af34 	bne.w	b7af6 <__aeabi_dmul+0x24a>
   b7c8e:	ea95 0f0c 	teq	r5, ip
   b7c92:	f47f af25 	bne.w	b7ae0 <__aeabi_dmul+0x234>
   b7c96:	4610      	mov	r0, r2
   b7c98:	4619      	mov	r1, r3
   b7c9a:	e72c      	b.n	b7af6 <__aeabi_dmul+0x24a>
   b7c9c:	ea95 0f0c 	teq	r5, ip
   b7ca0:	d106      	bne.n	b7cb0 <__aeabi_ddiv+0x1b0>
   b7ca2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7ca6:	f43f aefd 	beq.w	b7aa4 <__aeabi_dmul+0x1f8>
   b7caa:	4610      	mov	r0, r2
   b7cac:	4619      	mov	r1, r3
   b7cae:	e722      	b.n	b7af6 <__aeabi_dmul+0x24a>
   b7cb0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7cb4:	bf18      	it	ne
   b7cb6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7cba:	f47f aec5 	bne.w	b7a48 <__aeabi_dmul+0x19c>
   b7cbe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b7cc2:	f47f af0d 	bne.w	b7ae0 <__aeabi_dmul+0x234>
   b7cc6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b7cca:	f47f aeeb 	bne.w	b7aa4 <__aeabi_dmul+0x1f8>
   b7cce:	e712      	b.n	b7af6 <__aeabi_dmul+0x24a>

000b7cd0 <__gedf2>:
   b7cd0:	f04f 3cff 	mov.w	ip, #4294967295
   b7cd4:	e006      	b.n	b7ce4 <__cmpdf2+0x4>
   b7cd6:	bf00      	nop

000b7cd8 <__ledf2>:
   b7cd8:	f04f 0c01 	mov.w	ip, #1
   b7cdc:	e002      	b.n	b7ce4 <__cmpdf2+0x4>
   b7cde:	bf00      	nop

000b7ce0 <__cmpdf2>:
   b7ce0:	f04f 0c01 	mov.w	ip, #1
   b7ce4:	f84d cd04 	str.w	ip, [sp, #-4]!
   b7ce8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7cec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7cf0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7cf4:	bf18      	it	ne
   b7cf6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b7cfa:	d01b      	beq.n	b7d34 <__cmpdf2+0x54>
   b7cfc:	b001      	add	sp, #4
   b7cfe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b7d02:	bf0c      	ite	eq
   b7d04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b7d08:	ea91 0f03 	teqne	r1, r3
   b7d0c:	bf02      	ittt	eq
   b7d0e:	ea90 0f02 	teqeq	r0, r2
   b7d12:	2000      	moveq	r0, #0
   b7d14:	4770      	bxeq	lr
   b7d16:	f110 0f00 	cmn.w	r0, #0
   b7d1a:	ea91 0f03 	teq	r1, r3
   b7d1e:	bf58      	it	pl
   b7d20:	4299      	cmppl	r1, r3
   b7d22:	bf08      	it	eq
   b7d24:	4290      	cmpeq	r0, r2
   b7d26:	bf2c      	ite	cs
   b7d28:	17d8      	asrcs	r0, r3, #31
   b7d2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b7d2e:	f040 0001 	orr.w	r0, r0, #1
   b7d32:	4770      	bx	lr
   b7d34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7d38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7d3c:	d102      	bne.n	b7d44 <__cmpdf2+0x64>
   b7d3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b7d42:	d107      	bne.n	b7d54 <__cmpdf2+0x74>
   b7d44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7d48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7d4c:	d1d6      	bne.n	b7cfc <__cmpdf2+0x1c>
   b7d4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b7d52:	d0d3      	beq.n	b7cfc <__cmpdf2+0x1c>
   b7d54:	f85d 0b04 	ldr.w	r0, [sp], #4
   b7d58:	4770      	bx	lr
   b7d5a:	bf00      	nop

000b7d5c <__aeabi_cdrcmple>:
   b7d5c:	4684      	mov	ip, r0
   b7d5e:	4610      	mov	r0, r2
   b7d60:	4662      	mov	r2, ip
   b7d62:	468c      	mov	ip, r1
   b7d64:	4619      	mov	r1, r3
   b7d66:	4663      	mov	r3, ip
   b7d68:	e000      	b.n	b7d6c <__aeabi_cdcmpeq>
   b7d6a:	bf00      	nop

000b7d6c <__aeabi_cdcmpeq>:
   b7d6c:	b501      	push	{r0, lr}
   b7d6e:	f7ff ffb7 	bl	b7ce0 <__cmpdf2>
   b7d72:	2800      	cmp	r0, #0
   b7d74:	bf48      	it	mi
   b7d76:	f110 0f00 	cmnmi.w	r0, #0
   b7d7a:	bd01      	pop	{r0, pc}

000b7d7c <__aeabi_dcmpeq>:
   b7d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7d80:	f7ff fff4 	bl	b7d6c <__aeabi_cdcmpeq>
   b7d84:	bf0c      	ite	eq
   b7d86:	2001      	moveq	r0, #1
   b7d88:	2000      	movne	r0, #0
   b7d8a:	f85d fb08 	ldr.w	pc, [sp], #8
   b7d8e:	bf00      	nop

000b7d90 <__aeabi_dcmplt>:
   b7d90:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7d94:	f7ff ffea 	bl	b7d6c <__aeabi_cdcmpeq>
   b7d98:	bf34      	ite	cc
   b7d9a:	2001      	movcc	r0, #1
   b7d9c:	2000      	movcs	r0, #0
   b7d9e:	f85d fb08 	ldr.w	pc, [sp], #8
   b7da2:	bf00      	nop

000b7da4 <__aeabi_dcmple>:
   b7da4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7da8:	f7ff ffe0 	bl	b7d6c <__aeabi_cdcmpeq>
   b7dac:	bf94      	ite	ls
   b7dae:	2001      	movls	r0, #1
   b7db0:	2000      	movhi	r0, #0
   b7db2:	f85d fb08 	ldr.w	pc, [sp], #8
   b7db6:	bf00      	nop

000b7db8 <__aeabi_dcmpge>:
   b7db8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7dbc:	f7ff ffce 	bl	b7d5c <__aeabi_cdrcmple>
   b7dc0:	bf94      	ite	ls
   b7dc2:	2001      	movls	r0, #1
   b7dc4:	2000      	movhi	r0, #0
   b7dc6:	f85d fb08 	ldr.w	pc, [sp], #8
   b7dca:	bf00      	nop

000b7dcc <__aeabi_dcmpgt>:
   b7dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7dd0:	f7ff ffc4 	bl	b7d5c <__aeabi_cdrcmple>
   b7dd4:	bf34      	ite	cc
   b7dd6:	2001      	movcc	r0, #1
   b7dd8:	2000      	movcs	r0, #0
   b7dda:	f85d fb08 	ldr.w	pc, [sp], #8
   b7dde:	bf00      	nop

000b7de0 <__aeabi_dcmpun>:
   b7de0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7de4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7de8:	d102      	bne.n	b7df0 <__aeabi_dcmpun+0x10>
   b7dea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b7dee:	d10a      	bne.n	b7e06 <__aeabi_dcmpun+0x26>
   b7df0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7df4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7df8:	d102      	bne.n	b7e00 <__aeabi_dcmpun+0x20>
   b7dfa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b7dfe:	d102      	bne.n	b7e06 <__aeabi_dcmpun+0x26>
   b7e00:	f04f 0000 	mov.w	r0, #0
   b7e04:	4770      	bx	lr
   b7e06:	f04f 0001 	mov.w	r0, #1
   b7e0a:	4770      	bx	lr

000b7e0c <__aeabi_d2uiz>:
   b7e0c:	004a      	lsls	r2, r1, #1
   b7e0e:	d211      	bcs.n	b7e34 <__aeabi_d2uiz+0x28>
   b7e10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7e14:	d211      	bcs.n	b7e3a <__aeabi_d2uiz+0x2e>
   b7e16:	d50d      	bpl.n	b7e34 <__aeabi_d2uiz+0x28>
   b7e18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b7e1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7e20:	d40e      	bmi.n	b7e40 <__aeabi_d2uiz+0x34>
   b7e22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7e26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b7e2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b7e2e:	fa23 f002 	lsr.w	r0, r3, r2
   b7e32:	4770      	bx	lr
   b7e34:	f04f 0000 	mov.w	r0, #0
   b7e38:	4770      	bx	lr
   b7e3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b7e3e:	d102      	bne.n	b7e46 <__aeabi_d2uiz+0x3a>
   b7e40:	f04f 30ff 	mov.w	r0, #4294967295
   b7e44:	4770      	bx	lr
   b7e46:	f04f 0000 	mov.w	r0, #0
   b7e4a:	4770      	bx	lr

000b7e4c <__aeabi_d2f>:
   b7e4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7e50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b7e54:	bf24      	itt	cs
   b7e56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b7e5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b7e5e:	d90d      	bls.n	b7e7c <__aeabi_d2f+0x30>
   b7e60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b7e64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b7e68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b7e6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b7e70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b7e74:	bf08      	it	eq
   b7e76:	f020 0001 	biceq.w	r0, r0, #1
   b7e7a:	4770      	bx	lr
   b7e7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b7e80:	d121      	bne.n	b7ec6 <__aeabi_d2f+0x7a>
   b7e82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b7e86:	bfbc      	itt	lt
   b7e88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b7e8c:	4770      	bxlt	lr
   b7e8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7e92:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b7e96:	f1c2 0218 	rsb	r2, r2, #24
   b7e9a:	f1c2 0c20 	rsb	ip, r2, #32
   b7e9e:	fa10 f30c 	lsls.w	r3, r0, ip
   b7ea2:	fa20 f002 	lsr.w	r0, r0, r2
   b7ea6:	bf18      	it	ne
   b7ea8:	f040 0001 	orrne.w	r0, r0, #1
   b7eac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7eb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7eb4:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7eb8:	ea40 000c 	orr.w	r0, r0, ip
   b7ebc:	fa23 f302 	lsr.w	r3, r3, r2
   b7ec0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7ec4:	e7cc      	b.n	b7e60 <__aeabi_d2f+0x14>
   b7ec6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b7eca:	d107      	bne.n	b7edc <__aeabi_d2f+0x90>
   b7ecc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7ed0:	bf1e      	ittt	ne
   b7ed2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7ed6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b7eda:	4770      	bxne	lr
   b7edc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b7ee0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7ee8:	4770      	bx	lr
   b7eea:	bf00      	nop

000b7eec <__aeabi_f2lz>:
   b7eec:	ee07 0a90 	vmov	s15, r0
   b7ef0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b7ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7ef8:	d401      	bmi.n	b7efe <__aeabi_f2lz+0x12>
   b7efa:	f000 b80b 	b.w	b7f14 <__aeabi_f2ulz>
   b7efe:	eef1 7a67 	vneg.f32	s15, s15
   b7f02:	b508      	push	{r3, lr}
   b7f04:	ee17 0a90 	vmov	r0, s15
   b7f08:	f000 f804 	bl	b7f14 <__aeabi_f2ulz>
   b7f0c:	4240      	negs	r0, r0
   b7f0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7f12:	bd08      	pop	{r3, pc}

000b7f14 <__aeabi_f2ulz>:
   b7f14:	b5d0      	push	{r4, r6, r7, lr}
   b7f16:	f7ff fc71 	bl	b77fc <__aeabi_f2d>
   b7f1a:	4b0c      	ldr	r3, [pc, #48]	; (b7f4c <__aeabi_f2ulz+0x38>)
   b7f1c:	2200      	movs	r2, #0
   b7f1e:	4606      	mov	r6, r0
   b7f20:	460f      	mov	r7, r1
   b7f22:	f7ff fcc3 	bl	b78ac <__aeabi_dmul>
   b7f26:	f7ff ff71 	bl	b7e0c <__aeabi_d2uiz>
   b7f2a:	4604      	mov	r4, r0
   b7f2c:	f7ff fc44 	bl	b77b8 <__aeabi_ui2d>
   b7f30:	4b07      	ldr	r3, [pc, #28]	; (b7f50 <__aeabi_f2ulz+0x3c>)
   b7f32:	2200      	movs	r2, #0
   b7f34:	f7ff fcba 	bl	b78ac <__aeabi_dmul>
   b7f38:	4602      	mov	r2, r0
   b7f3a:	460b      	mov	r3, r1
   b7f3c:	4630      	mov	r0, r6
   b7f3e:	4639      	mov	r1, r7
   b7f40:	f7ff fafc 	bl	b753c <__aeabi_dsub>
   b7f44:	f7ff ff62 	bl	b7e0c <__aeabi_d2uiz>
   b7f48:	4621      	mov	r1, r4
   b7f4a:	bdd0      	pop	{r4, r6, r7, pc}
   b7f4c:	3df00000 	.word	0x3df00000
   b7f50:	41f00000 	.word	0x41f00000

000b7f54 <atexit>:
   b7f54:	2300      	movs	r3, #0
   b7f56:	4601      	mov	r1, r0
   b7f58:	461a      	mov	r2, r3
   b7f5a:	4618      	mov	r0, r3
   b7f5c:	f000 b874 	b.w	b8048 <__register_exitproc>

000b7f60 <memcpy>:
   b7f60:	440a      	add	r2, r1
   b7f62:	4291      	cmp	r1, r2
   b7f64:	f100 33ff 	add.w	r3, r0, #4294967295
   b7f68:	d100      	bne.n	b7f6c <memcpy+0xc>
   b7f6a:	4770      	bx	lr
   b7f6c:	b510      	push	{r4, lr}
   b7f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7f72:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7f76:	4291      	cmp	r1, r2
   b7f78:	d1f9      	bne.n	b7f6e <memcpy+0xe>
   b7f7a:	bd10      	pop	{r4, pc}

000b7f7c <memset>:
   b7f7c:	4402      	add	r2, r0
   b7f7e:	4603      	mov	r3, r0
   b7f80:	4293      	cmp	r3, r2
   b7f82:	d100      	bne.n	b7f86 <memset+0xa>
   b7f84:	4770      	bx	lr
   b7f86:	f803 1b01 	strb.w	r1, [r3], #1
   b7f8a:	e7f9      	b.n	b7f80 <memset+0x4>

000b7f8c <srand>:
   b7f8c:	b538      	push	{r3, r4, r5, lr}
   b7f8e:	4b10      	ldr	r3, [pc, #64]	; (b7fd0 <srand+0x44>)
   b7f90:	681d      	ldr	r5, [r3, #0]
   b7f92:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7f94:	4604      	mov	r4, r0
   b7f96:	b9b3      	cbnz	r3, b7fc6 <srand+0x3a>
   b7f98:	2018      	movs	r0, #24
   b7f9a:	f7fd f86b 	bl	b5074 <malloc>
   b7f9e:	4602      	mov	r2, r0
   b7fa0:	63a8      	str	r0, [r5, #56]	; 0x38
   b7fa2:	b920      	cbnz	r0, b7fae <srand+0x22>
   b7fa4:	4b0b      	ldr	r3, [pc, #44]	; (b7fd4 <srand+0x48>)
   b7fa6:	480c      	ldr	r0, [pc, #48]	; (b7fd8 <srand+0x4c>)
   b7fa8:	2142      	movs	r1, #66	; 0x42
   b7faa:	f7fd f89b 	bl	b50e4 <__assert_func>
   b7fae:	490b      	ldr	r1, [pc, #44]	; (b7fdc <srand+0x50>)
   b7fb0:	4b0b      	ldr	r3, [pc, #44]	; (b7fe0 <srand+0x54>)
   b7fb2:	e9c0 1300 	strd	r1, r3, [r0]
   b7fb6:	4b0b      	ldr	r3, [pc, #44]	; (b7fe4 <srand+0x58>)
   b7fb8:	6083      	str	r3, [r0, #8]
   b7fba:	230b      	movs	r3, #11
   b7fbc:	8183      	strh	r3, [r0, #12]
   b7fbe:	2100      	movs	r1, #0
   b7fc0:	2001      	movs	r0, #1
   b7fc2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7fc6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7fc8:	2200      	movs	r2, #0
   b7fca:	611c      	str	r4, [r3, #16]
   b7fcc:	615a      	str	r2, [r3, #20]
   b7fce:	bd38      	pop	{r3, r4, r5, pc}
   b7fd0:	2003e5d4 	.word	0x2003e5d4
   b7fd4:	000b8420 	.word	0x000b8420
   b7fd8:	000b8437 	.word	0x000b8437
   b7fdc:	abcd330e 	.word	0xabcd330e
   b7fe0:	e66d1234 	.word	0xe66d1234
   b7fe4:	0005deec 	.word	0x0005deec

000b7fe8 <strcmp>:
   b7fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7fec:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7ff0:	2a01      	cmp	r2, #1
   b7ff2:	bf28      	it	cs
   b7ff4:	429a      	cmpcs	r2, r3
   b7ff6:	d0f7      	beq.n	b7fe8 <strcmp>
   b7ff8:	1ad0      	subs	r0, r2, r3
   b7ffa:	4770      	bx	lr

000b7ffc <strdup>:
   b7ffc:	4b02      	ldr	r3, [pc, #8]	; (b8008 <strdup+0xc>)
   b7ffe:	4601      	mov	r1, r0
   b8000:	6818      	ldr	r0, [r3, #0]
   b8002:	f000 b803 	b.w	b800c <_strdup_r>
   b8006:	bf00      	nop
   b8008:	2003e5d4 	.word	0x2003e5d4

000b800c <_strdup_r>:
   b800c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b800e:	4604      	mov	r4, r0
   b8010:	4608      	mov	r0, r1
   b8012:	460d      	mov	r5, r1
   b8014:	f000 f80f 	bl	b8036 <strlen>
   b8018:	1c42      	adds	r2, r0, #1
   b801a:	4611      	mov	r1, r2
   b801c:	4620      	mov	r0, r4
   b801e:	9201      	str	r2, [sp, #4]
   b8020:	f7fd f850 	bl	b50c4 <_malloc_r>
   b8024:	4604      	mov	r4, r0
   b8026:	b118      	cbz	r0, b8030 <_strdup_r+0x24>
   b8028:	9a01      	ldr	r2, [sp, #4]
   b802a:	4629      	mov	r1, r5
   b802c:	f7ff ff98 	bl	b7f60 <memcpy>
   b8030:	4620      	mov	r0, r4
   b8032:	b003      	add	sp, #12
   b8034:	bd30      	pop	{r4, r5, pc}

000b8036 <strlen>:
   b8036:	4603      	mov	r3, r0
   b8038:	f813 2b01 	ldrb.w	r2, [r3], #1
   b803c:	2a00      	cmp	r2, #0
   b803e:	d1fb      	bne.n	b8038 <strlen+0x2>
   b8040:	1a18      	subs	r0, r3, r0
   b8042:	3801      	subs	r0, #1
   b8044:	4770      	bx	lr
	...

000b8048 <__register_exitproc>:
   b8048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b804c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8108 <__register_exitproc+0xc0>
   b8050:	4606      	mov	r6, r0
   b8052:	f8d8 0000 	ldr.w	r0, [r8]
   b8056:	461f      	mov	r7, r3
   b8058:	460d      	mov	r5, r1
   b805a:	4691      	mov	r9, r2
   b805c:	f000 f856 	bl	b810c <__retarget_lock_acquire_recursive>
   b8060:	4b25      	ldr	r3, [pc, #148]	; (b80f8 <__register_exitproc+0xb0>)
   b8062:	681c      	ldr	r4, [r3, #0]
   b8064:	b934      	cbnz	r4, b8074 <__register_exitproc+0x2c>
   b8066:	4c25      	ldr	r4, [pc, #148]	; (b80fc <__register_exitproc+0xb4>)
   b8068:	601c      	str	r4, [r3, #0]
   b806a:	4b25      	ldr	r3, [pc, #148]	; (b8100 <__register_exitproc+0xb8>)
   b806c:	b113      	cbz	r3, b8074 <__register_exitproc+0x2c>
   b806e:	681b      	ldr	r3, [r3, #0]
   b8070:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8074:	6863      	ldr	r3, [r4, #4]
   b8076:	2b1f      	cmp	r3, #31
   b8078:	dd07      	ble.n	b808a <__register_exitproc+0x42>
   b807a:	f8d8 0000 	ldr.w	r0, [r8]
   b807e:	f000 f847 	bl	b8110 <__retarget_lock_release_recursive>
   b8082:	f04f 30ff 	mov.w	r0, #4294967295
   b8086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b808a:	b34e      	cbz	r6, b80e0 <__register_exitproc+0x98>
   b808c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8090:	b988      	cbnz	r0, b80b6 <__register_exitproc+0x6e>
   b8092:	4b1c      	ldr	r3, [pc, #112]	; (b8104 <__register_exitproc+0xbc>)
   b8094:	b923      	cbnz	r3, b80a0 <__register_exitproc+0x58>
   b8096:	f8d8 0000 	ldr.w	r0, [r8]
   b809a:	f000 f838 	bl	b810e <__retarget_lock_release>
   b809e:	e7f0      	b.n	b8082 <__register_exitproc+0x3a>
   b80a0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b80a4:	f7fc ffe6 	bl	b5074 <malloc>
   b80a8:	2800      	cmp	r0, #0
   b80aa:	d0f4      	beq.n	b8096 <__register_exitproc+0x4e>
   b80ac:	2300      	movs	r3, #0
   b80ae:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b80b2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b80b6:	6863      	ldr	r3, [r4, #4]
   b80b8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b80bc:	2201      	movs	r2, #1
   b80be:	409a      	lsls	r2, r3
   b80c0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b80c4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b80c8:	4313      	orrs	r3, r2
   b80ca:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b80ce:	2e02      	cmp	r6, #2
   b80d0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b80d4:	bf02      	ittt	eq
   b80d6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b80da:	4313      	orreq	r3, r2
   b80dc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b80e0:	6863      	ldr	r3, [r4, #4]
   b80e2:	f8d8 0000 	ldr.w	r0, [r8]
   b80e6:	1c5a      	adds	r2, r3, #1
   b80e8:	3302      	adds	r3, #2
   b80ea:	6062      	str	r2, [r4, #4]
   b80ec:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b80f0:	f000 f80e 	bl	b8110 <__retarget_lock_release_recursive>
   b80f4:	2000      	movs	r0, #0
   b80f6:	e7c6      	b.n	b8086 <__register_exitproc+0x3e>
   b80f8:	2003e7ec 	.word	0x2003e7ec
   b80fc:	2003e760 	.word	0x2003e760
   b8100:	00000000 	.word	0x00000000
   b8104:	000b5075 	.word	0x000b5075
   b8108:	2003e638 	.word	0x2003e638

000b810c <__retarget_lock_acquire_recursive>:
   b810c:	4770      	bx	lr

000b810e <__retarget_lock_release>:
   b810e:	4770      	bx	lr

000b8110 <__retarget_lock_release_recursive>:
   b8110:	4770      	bx	lr

000b8112 <link_code_end>:
	...

000b8114 <dynalib_user>:
   b8114:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b8124:	0000 0000 6144 6174 6200 7461 6574 7972     ....Data.battery
   b8134:	2500 322e 2066 0056 6142 7474 7265 2079     .%.2f V.Battery 
   b8144:	6f56 746c 6761 0065 6f6d 7369 7574 6572     Voltage.moisture
   b8154:	4d00 2031 6425 2525 203b 324d 2520 2564     .M1 %d%%; M2 %d%
   b8164:	3b25 4d20 2033 6425 2525 203b 344d 2520     %; M3 %d%%; M4 %
   b8174:	2564 0025 6f4d 7369 7574 6572 7700 7461     d%%.Moisture.wat
   b8184:	7265 2500 2064 4420 3d38 6425 4420 3d37     er.%d  D8=%d D7=
   b8194:	6425 4420 3d36 6425 5700 7461 7265 4c20     %d D6=%d.Water L
   b81a4:	7665 6c65 7700 6165 6874 7265 5400 6d65     evel.weather.Tem
   b81b4:	2070 2e25 6632 4320 202c 6c41 2074 2e25     p %.2f C, Alt %.
   b81c4:	6632 6d20 202c 7250 2065 2e25 6630 5020     2f m, Pre %.0f P
   b81d4:	2c61 5420 6d69 2065 6425 253a 0064 6557     a, Time %d:%d.We
   b81e4:	7461 6568 0072 6572 6573 3474 7200 7365     ather.reset4.res
   b81f4:	7465 0033 6572 6573 3274 7200 7365 7465     et3.reset2.reset
   b8204:	0031 6157 6574 6972 676e 3120 252d 2064     1.Watering 1-%d 
   b8214:	2d32 6425 3320 252d 2064 2d34 6425 0020     2-%d 3-%d 4-%d .
   b8224:	7453 7461 7375 6200 7461 6574 7972 6d3b     Status.battery;m
   b8234:	696f 7473 7275 3b65 6177 6574 3b72 6577     oisture;water;we
   b8244:	7461 6568 2c72 7473 7461 7375 4c00 7369     ather,status.Lis
   b8254:	2074 4d43 3a44 0000                         t CMD:..

000b825c <_ZTV5Timer>:
	...
   b8264:	415d 000b 41b1 000b 40b3 000b               ]A...A...@..

000b8270 <CSWTCH.84>:
   b8270:	1900 4100 0000 6400                         ...A...d

000b8278 <_ZTVN5spark13EthernetClassE>:
	...
   b8280:	5173 000b 5169 000b 515f 000b 5155 000b     sQ..iQ.._Q..UQ..
   b8290:	5149 000b 513d 000b 60d9 000b 60e1 000b     IQ..=Q...`...`..
   b82a0:	5131 000b 5129 000b 511f 000b 5115 000b     1Q..)Q...Q...Q..
   b82b0:	6111 000b 7061 0070 5925 252d 2d6d 6425     .a..app.%Y-%m-%d
   b82c0:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b82d0:	6d69 0065                                   ime.

000b82d4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b82dc:	56ed 000b 56f3 000b 5731 000b 5701 000b     .V...V..1W...W..
   b82ec:	56ef 000b                                   .V..

000b82f0 <_ZTV9IPAddress>:
	...
   b82f8:	5c79 000b 5c69 000b 5c6b 000b               y\..i\..k\..

000b8304 <_ZTV9USBSerial>:
	...
   b830c:	5d5f 000b 5dc7 000b 5d9d 000b 5365 000b     _]...]...]..eS..
   b831c:	5d8f 000b 5d61 000b 5d71 000b 5dc1 000b     .]..a]..q]...]..
   b832c:	5d81 000b 5d59 000b                         .]..Y]..

000b8334 <_ZTV11USARTSerial>:
	...
   b833c:	5e61 000b 5ecd 000b 5ea5 000b 5365 000b     a^...^...^..eS..
   b834c:	5e75 000b 5e91 000b 5e83 000b 5e9f 000b     u^...^...^...^..
   b835c:	5e63 000b 5e67 000b                         c^..g^..

000b8364 <_ZTV7TwoWire>:
	...
   b836c:	5f2d 000b 5f77 000b 5f4f 000b 5f2f 000b     -_..w_..O_../_..
   b837c:	5f57 000b 5f5f 000b 5f67 000b 5f6f 000b     W_..__..g_..o_..

000b838c <_ZTVN5spark9WiFiClassE>:
	...
   b8394:	607b 000b 6071 000b 6067 000b 601d 000b     {`..q`..g`...`..
   b83a4:	605b 000b 604f 000b 60d9 000b 60e1 000b     [`..O`...`...`..
   b83b4:	6043 000b 603b 000b 6031 000b 6027 000b     C`..;`..1`..'`..
   b83c4:	6111 000b                                   .a..

000b83c8 <_ZTVN5spark12NetworkClassE>:
	...
   b83d0:	6099 000b 60a3 000b 60ad 000b 60b7 000b     .`...`...`...`..
   b83e0:	60c1 000b 60cd 000b 60d9 000b 60e1 000b     .`...`...`...`..
   b83f0:	60e9 000b 60f5 000b 60fd 000b 6107 000b     .`...`...`...a..
   b8400:	6111 000b                                   .a..

000b8404 <_ZSt7nothrow>:
	...

000b8410 <TWO52>:
   b8410:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   b8420:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b8430:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
   b8440:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
   b8450:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
   b8460:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   b8470:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   b8480:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
   b8490:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   b84a0:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
   b84b0:	2e64 0063                                   d.c.

000b84b4 <link_const_variable_data_end>:
   b84b4:	000b488d 	.word	0x000b488d
   b84b8:	000b517d 	.word	0x000b517d
   b84bc:	000b51a5 	.word	0x000b51a5
   b84c0:	000b5355 	.word	0x000b5355
   b84c4:	000b53f9 	.word	0x000b53f9
   b84c8:	000b5575 	.word	0x000b5575
   b84cc:	000b55a9 	.word	0x000b55a9
   b84d0:	000b6085 	.word	0x000b6085
   b84d4:	000b61e9 	.word	0x000b61e9

000b84d8 <link_constructors_end>:
	...
